/**
 * Pricemonitor API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.6586
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.patagona.pricemonitor.client.api

import com.patagona.pricemonitor.client.model.ActivateMarketplaceResponseV3ApiResponse
import com.patagona.pricemonitor.client.model.ApiErrorResponse
import com.patagona.pricemonitor.client.model.GetAuthorizationStatusResponseV3ApiResponse
import com.patagona.pricemonitor.client.model.PostActivateMarketplaceRequestV3
import com.patagona.pricemonitor.client.model.PostAuthorizeSellerRequestV3
import com.patagona.pricemonitor.client.model.PostAuthorizeSellerResponseV3ApiResponse
import com.patagona.pricemonitor.client.core._
import alias._
import sttp.client._
import sttp.model.Method

object AmazonIntegrationApi {

  def apply(baseUrl: String = "https://api.patagona.de")(implicit serializer: SttpSerializer) = new AmazonIntegrationApi(baseUrl)
}

class AmazonIntegrationApi(baseUrl: String)(implicit serializer: SttpSerializer) {

  import Helpers._
  import serializer._

  /**
   * Expected answers:
   *   code 200 : GetAuthorizationStatusResponseV3ApiResponse (Authorization status of a customer on Amazon.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   *   BearerAuth (http)
   * 
   * @param companyId ID of a company
   */
  def getAuthorizationStatusVendorV3(companyId: Long)(implicit basicAuth: Option[BasicCredentials], bearerToken: Option[BearerToken]): ApiRequestT[GetAuthorizationStatusResponseV3ApiResponse] =
{
    var r = basicRequest
      .method(Method.GET, uri"$baseUrl/api/v3/companies/${companyId}/amazon/authorization/status")
      .contentType("application/json")
      basicAuth.foreach(b => r = r.auth.basic(b.user, b.password))
      bearerToken.foreach(b => r = r.auth.bearer(b.token))
      r.response(asJson[GetAuthorizationStatusResponseV3ApiResponse])
}

  /**
   * Expected answers:
   *   code 200 : ActivateMarketplaceResponseV3ApiResponse (Marketplace activation status.)
   *   code 400 : ApiErrorResponse (- Specified marketplace already activated. - Invalid marketplace country code is specified. - Given company is not registered with our system. One must register his seller central account with our system. )
   * 
   * Available security schemes:
   *   BasicAuth (http)
   *   BearerAuth (http)
   * 
   * @param marketplaceCountryCode Marketplace country code. You can view complete list here. https://developer-docs.amazon.com/sp-api/docs/marketplace-ids. Currently, only Europe as a region is supported.
   * @param companyId ID of a company
   * @param contractId ID of the contract
   */
  def getMarketplaceActivationStatus(marketplaceCountryCode: String, companyId: Long, contractId: String)(implicit basicAuth: Option[BasicCredentials], bearerToken: Option[BearerToken]): ApiRequestT[ActivateMarketplaceResponseV3ApiResponse] =
{
    var r = basicRequest
      .method(Method.GET, uri"$baseUrl/api/v3/companies/${companyId}/amazon/marketplace/${marketplaceCountryCode}/contracts/${contractId}")
      .contentType("application/json")
      basicAuth.foreach(b => r = r.auth.basic(b.user, b.password))
      bearerToken.foreach(b => r = r.auth.bearer(b.token))
      r.response(asJson[ActivateMarketplaceResponseV3ApiResponse])
}

  /**
   * Expected answers:
   *   code 200 : ActivateMarketplaceResponseV3ApiResponse (Successfully activated marketplace of a customer in our system.)
   *   code 400 : ApiErrorResponse (- Specified marketplace already activated. - Invalid marketplace country code is specified. - Given company is not registered with our system. One must register his seller central account with our system. )
   * 
   * Available security schemes:
   *   BasicAuth (http)
   *   BearerAuth (http)
   * 
   * @param companyId ID of a company
   * @param postActivateMarketplaceRequestV3 Marketplace of a customer to be activated.
   */
  def postActivateMarketplaceVendorV3(companyId: Long, postActivateMarketplaceRequestV3: Option[PostActivateMarketplaceRequestV3] = None)(implicit basicAuth: Option[BasicCredentials], bearerToken: Option[BearerToken]): ApiRequestT[ActivateMarketplaceResponseV3ApiResponse] =
{
    var r = basicRequest
      .method(Method.POST, uri"$baseUrl/api/v3/companies/${companyId}/amazon/marketplace")
      .contentType("application/json")
      basicAuth.foreach(b => r = r.auth.basic(b.user, b.password))
      bearerToken.foreach(b => r = r.auth.bearer(b.token))
      r=r.body(postActivateMarketplaceRequestV3)
      r.response(asJson[ActivateMarketplaceResponseV3ApiResponse])
}

  /**
   * Expected answers:
   *   code 200 : PostAuthorizeSellerResponseV3ApiResponse (Successfully authorized customer's Amazon seller central account.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   *   BearerAuth (http)
   * 
   * @param companyId ID of a company
   * @param postAuthorizeSellerRequestV3 Customer's Amazon seller central account to be authorized.
   */
  def postAuthorizeSellerVendorV3(companyId: Long, postAuthorizeSellerRequestV3: Option[PostAuthorizeSellerRequestV3] = None)(implicit basicAuth: Option[BasicCredentials], bearerToken: Option[BearerToken]): ApiRequestT[PostAuthorizeSellerResponseV3ApiResponse] =
{
    var r = basicRequest
      .method(Method.POST, uri"$baseUrl/api/v3/companies/${companyId}/amazon/authorization")
      .contentType("application/json")
      basicAuth.foreach(b => r = r.auth.basic(b.user, b.password))
      bearerToken.foreach(b => r = r.auth.bearer(b.token))
      r=r.body(postAuthorizeSellerRequestV3)
      r.response(asJson[PostAuthorizeSellerResponseV3ApiResponse])
}

}

