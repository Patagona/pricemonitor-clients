/**
 * Omnia 2.0 API The Omnia 2.0 API is RESTful and provides access to the backend of Omnia 2.0 and Pricemonitor. It is used to manage products, offers, contracts and more.
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.6835
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.patagona.pricemonitor.client.api

import com.patagona.pricemonitor.client.model.EmbedSSOUrlResponseV3ApiResponse
import com.patagona.pricemonitor.client.model.PostEmbedSSOUrlRequestV3
import com.patagona.pricemonitor.client.core._
import alias._
import sttp.client._
import sttp.model.Method

object LookerApi {

  def apply(baseUrl: String = "https://api.patagona.de")(implicit serializer: SttpSerializer) = new LookerApi(baseUrl)
}

class LookerApi(baseUrl: String)(implicit serializer: SttpSerializer) {

  import Helpers._
  import serializer._

  /**
   * Expected answers:
   *   code 200 : EmbedSSOUrlResponseV3ApiResponse (Signed embed SSO url for Looker.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   *   BearerAuth (http)
   * 
   * @param contractId ID of the contract
   * @param postEmbedSSOUrlRequestV3 Payload for retrieving a signed embed SSO url using Looker API.
   */
  def postEmbedSSOUrlManufacturer(contractId: String, postEmbedSSOUrlRequestV3: Option[PostEmbedSSOUrlRequestV3] = None)(implicit basicAuth: Option[BasicCredentials], bearerToken: Option[BearerToken]): ApiRequestT[EmbedSSOUrlResponseV3ApiResponse] =
{
    var r = basicRequest
      .method(Method.POST, uri"$baseUrl/api/v3/manufacturer/contracts/${contractId}/looker/sso/embed/url")
      .contentType("application/json")
      basicAuth.foreach(b => r = r.auth.basic(b.user, b.password))
      bearerToken.foreach(b => r = r.auth.bearer(b.token))
      r=r.body(postEmbedSSOUrlRequestV3)
      r.response(asJson[EmbedSSOUrlResponseV3ApiResponse])
}

  /**
   * Expected answers:
   *   code 200 : EmbedSSOUrlResponseV3ApiResponse (Signed embed SSO url for Looker.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   *   BearerAuth (http)
   * 
   * @param contractId ID of the contract
   * @param postEmbedSSOUrlRequestV3 Payload for retrieving a signed embed SSO url using Looker API.
   */
  def postEmbedSSOUrlVendor(contractId: String, postEmbedSSOUrlRequestV3: Option[PostEmbedSSOUrlRequestV3] = None)(implicit basicAuth: Option[BasicCredentials], bearerToken: Option[BearerToken]): ApiRequestT[EmbedSSOUrlResponseV3ApiResponse] =
{
    var r = basicRequest
      .method(Method.POST, uri"$baseUrl/api/v3/vendor/contracts/${contractId}/looker/sso/embed/url")
      .contentType("application/json")
      basicAuth.foreach(b => r = r.auth.basic(b.user, b.password))
      bearerToken.foreach(b => r = r.auth.bearer(b.token))
      r=r.body(postEmbedSSOUrlRequestV3)
      r.response(asJson[EmbedSSOUrlResponseV3ApiResponse])
}

}

