/**
 * Pricemonitor API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.6335
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.patagona.pricemonitor.client.api

import com.patagona.pricemonitor.client.model.ApiErrorResponse
import com.patagona.pricemonitor.client.model.DeleteByNumericIdApiResponse
import com.patagona.pricemonitor.client.model.EmptyApiResponse
import com.patagona.pricemonitor.client.model.GetMonitoringSchedulesApiResponse
import com.patagona.pricemonitor.client.model.PostMonitoringScheduleRequestV3
import com.patagona.pricemonitor.client.model.PutMonitoringSchedulesApiResponse
import com.patagona.pricemonitor.client.core._
import alias._
import sttp.client._
import sttp.model.Method

object MonitoringSchedulesApi {

  def apply(baseUrl: String = "https://api.patagona.de")(implicit serializer: SttpSerializer) = new MonitoringSchedulesApi(baseUrl)
}

class MonitoringSchedulesApi(baseUrl: String)(implicit serializer: SttpSerializer) {

  import Helpers._
  import serializer._

  /**
   * Expected answers:
   *   code 200 : DeleteByNumericIdApiResponse (Monitoring schedule has been deleted successfully.)
   *   code 404 : ApiErrorResponse (Specified monitoring schedule does not exist.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   *   BearerAuth (http)
   * 
   * @param contractId ID of the contract
   * @param scheduleId ID of a monitoring schedule
   */
  def deleteMonitoringScheduleManufacturerV3(contractId: String, scheduleId: Int)(implicit basicAuth: Option[BasicCredentials], bearerToken: Option[BearerToken]): ApiRequestT[DeleteByNumericIdApiResponse] =
{
    var r = basicRequest
      .method(Method.DELETE, uri"$baseUrl/api/v3/manufacturer/contracts/${contractId}/settings/monitoringschedules/${scheduleId}")
      .contentType("application/json")
      basicAuth.foreach(b => r = r.auth.basic(b.user, b.password))
      bearerToken.foreach(b => r = r.auth.bearer(b.token))
      r.response(asJson[DeleteByNumericIdApiResponse])
}

  /**
   * Expected answers:
   *   code 200 : DeleteByNumericIdApiResponse (Monitoring schedule has been deleted successfully.)
   *   code 404 : ApiErrorResponse (Specified monitoring schedule does not exist.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   *   BearerAuth (http)
   * 
   * @param contractId ID of the contract
   * @param scheduleId ID of a monitoring schedule
   */
  def deleteMonitoringScheduleVendorV3(contractId: String, scheduleId: Int)(implicit basicAuth: Option[BasicCredentials], bearerToken: Option[BearerToken]): ApiRequestT[DeleteByNumericIdApiResponse] =
{
    var r = basicRequest
      .method(Method.DELETE, uri"$baseUrl/api/v3/vendor/contracts/${contractId}/settings/monitoringschedules/${scheduleId}")
      .contentType("application/json")
      basicAuth.foreach(b => r = r.auth.basic(b.user, b.password))
      bearerToken.foreach(b => r = r.auth.bearer(b.token))
      r.response(asJson[DeleteByNumericIdApiResponse])
}

  /**
   * Expected answers:
   *   code 200 : EmptyApiResponse (Monitoring task was successfully created and is executing)
   *   code 404 : ApiErrorResponse (Couldn't find any monitoring schedules for given schedule id. No monitoring task was created)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   *   BearerAuth (http)
   * 
   * @param contractId ID of the contract
   * @param scheduleId ID of a monitoring schedule
   */
  def executeMonitoringScheduleManufacturerV3(contractId: String, scheduleId: Int)(implicit basicAuth: Option[BasicCredentials], bearerToken: Option[BearerToken]): ApiRequestT[EmptyApiResponse] =
{
    var r = basicRequest
      .method(Method.POST, uri"$baseUrl/api/v3/manufacturer/contracts/${contractId}/settings/monitoringschedules/${scheduleId}/execute")
      .contentType("application/json")
      basicAuth.foreach(b => r = r.auth.basic(b.user, b.password))
      bearerToken.foreach(b => r = r.auth.bearer(b.token))
      r.response(asJson[EmptyApiResponse])
}

  /**
   * Expected answers:
   *   code 200 : EmptyApiResponse (Monitoring task was successfully created and is executing)
   *   code 404 : ApiErrorResponse (Couldn't find any monitoring schedules for given schedule id. No monitoring task was created)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   *   BearerAuth (http)
   * 
   * @param contractId ID of the contract
   * @param scheduleId ID of a monitoring schedule
   */
  def executeMonitoringScheduleVendorV3(contractId: String, scheduleId: Int)(implicit basicAuth: Option[BasicCredentials], bearerToken: Option[BearerToken]): ApiRequestT[EmptyApiResponse] =
{
    var r = basicRequest
      .method(Method.POST, uri"$baseUrl/api/v3/vendor/contracts/${contractId}/settings/monitoringschedules/${scheduleId}/execute")
      .contentType("application/json")
      basicAuth.foreach(b => r = r.auth.basic(b.user, b.password))
      bearerToken.foreach(b => r = r.auth.bearer(b.token))
      r.response(asJson[EmptyApiResponse])
}

  /**
   * Expected answers:
   *   code 200 : GetMonitoringSchedulesApiResponse (List of monitoring schedules.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   *   BearerAuth (http)
   * 
   * @param contractId ID of the contract
   */
  def getMonitoringSchedulesManufacturerV3(contractId: String)(implicit basicAuth: Option[BasicCredentials], bearerToken: Option[BearerToken]): ApiRequestT[GetMonitoringSchedulesApiResponse] =
{
    var r = basicRequest
      .method(Method.GET, uri"$baseUrl/api/v3/manufacturer/contracts/${contractId}/settings/monitoringschedules")
      .contentType("application/json")
      basicAuth.foreach(b => r = r.auth.basic(b.user, b.password))
      bearerToken.foreach(b => r = r.auth.bearer(b.token))
      r.response(asJson[GetMonitoringSchedulesApiResponse])
}

  /**
   * Expected answers:
   *   code 200 : GetMonitoringSchedulesApiResponse (List of monitoring schedules.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   *   BearerAuth (http)
   * 
   * @param contractId ID of the contract
   */
  def getMonitoringSchedulesVendorV3(contractId: String)(implicit basicAuth: Option[BasicCredentials], bearerToken: Option[BearerToken]): ApiRequestT[GetMonitoringSchedulesApiResponse] =
{
    var r = basicRequest
      .method(Method.GET, uri"$baseUrl/api/v3/vendor/contracts/${contractId}/settings/monitoringschedules")
      .contentType("application/json")
      basicAuth.foreach(b => r = r.auth.basic(b.user, b.password))
      bearerToken.foreach(b => r = r.auth.bearer(b.token))
      r.response(asJson[GetMonitoringSchedulesApiResponse])
}

  /**
   * Expected answers:
   *   code 200 : PutMonitoringSchedulesApiResponse (Monitoring schedule has been created successfully.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   *   BearerAuth (http)
   * 
   * @param contractId ID of the contract
   * @param postMonitoringScheduleRequestV3 Request body for creating monitoring schedule.
   */
  def postMonitoringScheduleManufacturerV3(contractId: String, postMonitoringScheduleRequestV3: Option[PostMonitoringScheduleRequestV3] = None)(implicit basicAuth: Option[BasicCredentials], bearerToken: Option[BearerToken]): ApiRequestT[PutMonitoringSchedulesApiResponse] =
{
    var r = basicRequest
      .method(Method.POST, uri"$baseUrl/api/v3/manufacturer/contracts/${contractId}/settings/monitoringschedules")
      .contentType("application/json")
      basicAuth.foreach(b => r = r.auth.basic(b.user, b.password))
      bearerToken.foreach(b => r = r.auth.bearer(b.token))
      r=r.body(postMonitoringScheduleRequestV3)
      r.response(asJson[PutMonitoringSchedulesApiResponse])
}

  /**
   * Expected answers:
   *   code 200 : PutMonitoringSchedulesApiResponse (Monitoring schedule has been created successfully.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   *   BearerAuth (http)
   * 
   * @param contractId ID of the contract
   * @param postMonitoringScheduleRequestV3 Request body for creating monitoring schedule.
   */
  def postMonitoringScheduleVendorV3(contractId: String, postMonitoringScheduleRequestV3: Option[PostMonitoringScheduleRequestV3] = None)(implicit basicAuth: Option[BasicCredentials], bearerToken: Option[BearerToken]): ApiRequestT[PutMonitoringSchedulesApiResponse] =
{
    var r = basicRequest
      .method(Method.POST, uri"$baseUrl/api/v3/vendor/contracts/${contractId}/settings/monitoringschedules")
      .contentType("application/json")
      basicAuth.foreach(b => r = r.auth.basic(b.user, b.password))
      bearerToken.foreach(b => r = r.auth.bearer(b.token))
      r=r.body(postMonitoringScheduleRequestV3)
      r.response(asJson[PutMonitoringSchedulesApiResponse])
}

  /**
   * Expected answers:
   *   code 201 : PutMonitoringSchedulesApiResponse (Monitoring schedule has been updated successfully.)
   *   code 404 : ApiErrorResponse (Specified monitoring schedule does not exist.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   *   BearerAuth (http)
   * 
   * @param contractId ID of the contract
   * @param scheduleId ID of a monitoring schedule
   * @param postMonitoringScheduleRequestV3 Request body for updating monitoring schedule.
   */
  def putMonitoringScheduleManufacturerV3(contractId: String, scheduleId: Int, postMonitoringScheduleRequestV3: Option[PostMonitoringScheduleRequestV3] = None)(implicit basicAuth: Option[BasicCredentials], bearerToken: Option[BearerToken]): ApiRequestT[PutMonitoringSchedulesApiResponse] =
{
    var r = basicRequest
      .method(Method.PUT, uri"$baseUrl/api/v3/manufacturer/contracts/${contractId}/settings/monitoringschedules/${scheduleId}")
      .contentType("application/json")
      basicAuth.foreach(b => r = r.auth.basic(b.user, b.password))
      bearerToken.foreach(b => r = r.auth.bearer(b.token))
      r=r.body(postMonitoringScheduleRequestV3)
      r.response(asJson[PutMonitoringSchedulesApiResponse])
}

  /**
   * Expected answers:
   *   code 201 : PutMonitoringSchedulesApiResponse (Monitoring schedule has been updated successfully.)
   *   code 404 : ApiErrorResponse (Specified monitoring schedule does not exist.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   *   BearerAuth (http)
   * 
   * @param contractId ID of the contract
   * @param scheduleId ID of a monitoring schedule
   * @param postMonitoringScheduleRequestV3 Request body for updating monitoring schedule.
   */
  def putMonitoringScheduleVendorV3(contractId: String, scheduleId: Int, postMonitoringScheduleRequestV3: Option[PostMonitoringScheduleRequestV3] = None)(implicit basicAuth: Option[BasicCredentials], bearerToken: Option[BearerToken]): ApiRequestT[PutMonitoringSchedulesApiResponse] =
{
    var r = basicRequest
      .method(Method.PUT, uri"$baseUrl/api/v3/vendor/contracts/${contractId}/settings/monitoringschedules/${scheduleId}")
      .contentType("application/json")
      basicAuth.foreach(b => r = r.auth.basic(b.user, b.password))
      bearerToken.foreach(b => r = r.auth.bearer(b.token))
      r=r.body(postMonitoringScheduleRequestV3)
      r.response(asJson[PutMonitoringSchedulesApiResponse])
}

}

