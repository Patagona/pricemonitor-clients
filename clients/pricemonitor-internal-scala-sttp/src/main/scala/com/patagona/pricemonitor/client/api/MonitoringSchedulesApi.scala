/**
 * Omnia 2.0 API The Omnia 2.0 API is RESTful and provides access to the backend of Omnia 2.0 and Pricemonitor. It is used to manage products, offers, contracts, and more.  This API supports both public endpoints for customer integration and internal endpoints for platform management. All endpoints are authenticated using either Basic Authentication or JWT Bearer tokens.
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.7246
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.patagona.pricemonitor.client.api

import com.patagona.pricemonitor.client.model.ApiErrorResponse
import com.patagona.pricemonitor.client.model.DeleteByNumericIdApiResponse
import com.patagona.pricemonitor.client.model.EmptyApiResponse
import com.patagona.pricemonitor.client.model.GetMonitoringSchedulesApiResponse
import com.patagona.pricemonitor.client.model.PostMonitoringScheduleRequestV3
import com.patagona.pricemonitor.client.model.PutMonitoringSchedulesApiResponse
import com.patagona.pricemonitor.client.core._
import alias._
import sttp.client._
import sttp.model.Method

object MonitoringSchedulesApi {

  def apply(baseUrl: String = "https://api.patagona.de")(implicit serializer: SttpSerializer) = new MonitoringSchedulesApi(baseUrl)
}

class MonitoringSchedulesApi(baseUrl: String)(implicit serializer: SttpSerializer) {

  import Helpers._
  import serializer._

  /**
   * Delete a monitoring schedule for a given manufacturer contract.
   * 
   * Expected answers:
   *   code 200 : DeleteByNumericIdApiResponse (Monitoring schedule has been deleted successfully.)
   *   code 404 : ApiErrorResponse (Specified monitoring schedule does not exist.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   *   BearerAuth (http)
   * 
   * @param contractId Unique identifier of the contract
   * @param scheduleId Unique identifier of a monitoring schedule
   */
  def deleteMonitoringScheduleManufacturerV3(contractId: String, scheduleId: Int)(implicit basicAuth: Option[BasicCredentials], bearerToken: Option[BearerToken]): ApiRequestT[DeleteByNumericIdApiResponse] =
{
    var r = basicRequest
      .method(Method.DELETE, uri"$baseUrl/api/v3/manufacturer/contracts/${contractId}/settings/monitoringschedules/${scheduleId}")
      .contentType("application/json")
      basicAuth.foreach(b => r = r.auth.basic(b.user, b.password))
      bearerToken.foreach(b => r = r.auth.bearer(b.token))
      r.response(asJson[DeleteByNumericIdApiResponse])
}

  /**
   * Delete a monitoring schedule for a given vendor contract.
   * 
   * Expected answers:
   *   code 200 : DeleteByNumericIdApiResponse (Monitoring schedule has been deleted successfully.)
   *   code 404 : ApiErrorResponse (Specified monitoring schedule does not exist.)
   *   code 503 : ApiErrorResponse (Monitoring schedule could not be deleted due to an internal server error.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   *   BearerAuth (http)
   * 
   * @param contractId Unique identifier of the contract
   * @param scheduleId Unique identifier of a monitoring schedule
   */
  def deleteMonitoringScheduleVendorV3(contractId: String, scheduleId: Int)(implicit basicAuth: Option[BasicCredentials], bearerToken: Option[BearerToken]): ApiRequestT[DeleteByNumericIdApiResponse] =
{
    var r = basicRequest
      .method(Method.DELETE, uri"$baseUrl/api/v3/vendor/contracts/${contractId}/settings/monitoringschedules/${scheduleId}")
      .contentType("application/json")
      basicAuth.foreach(b => r = r.auth.basic(b.user, b.password))
      bearerToken.foreach(b => r = r.auth.bearer(b.token))
      r.response(asJson[DeleteByNumericIdApiResponse])
}

  /**
   * Trigger a monitoring pipeline task for a manufacturer for a configured monitoring schedule.
   * 
   * Expected answers:
   *   code 200 : EmptyApiResponse (Monitoring task was successfully created and is executing)
   *   code 404 : ApiErrorResponse (Couldn't find any monitoring schedules for given schedule id. No monitoring task was created)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   *   BearerAuth (http)
   * 
   * @param contractId Unique identifier of the contract
   * @param scheduleId Unique identifier of a monitoring schedule
   * @param triggerFollowUpTask Flag to trigger follow-up tasks once the current task is completed
   */
  def executeMonitoringScheduleManufacturerV3(contractId: String, scheduleId: Int, triggerFollowUpTask: Option[Boolean] = None)(implicit basicAuth: Option[BasicCredentials], bearerToken: Option[BearerToken]): ApiRequestT[EmptyApiResponse] =
{
    var r = basicRequest
      .method(Method.POST, uri"$baseUrl/api/v3/manufacturer/contracts/${contractId}/settings/monitoringschedules/${scheduleId}/execute?triggerFollowUpTask=$triggerFollowUpTask")
      .contentType("application/json")
      basicAuth.foreach(b => r = r.auth.basic(b.user, b.password))
      bearerToken.foreach(b => r = r.auth.bearer(b.token))
      r.response(asJson[EmptyApiResponse])
}

  /**
   * Trigger a monitoring pipeline task for a vendor for a configured monitoring schedule.
   * 
   * Expected answers:
   *   code 200 : EmptyApiResponse (Monitoring task was successfully created and is executing)
   *   code 404 : ApiErrorResponse (Couldn't find any monitoring schedules for given schedule id. No monitoring task was created)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   *   BearerAuth (http)
   * 
   * @param contractId Unique identifier of the contract
   * @param scheduleId Unique identifier of a monitoring schedule
   * @param triggerFollowUpTask Flag to trigger follow-up tasks once the current task is completed
   */
  def executeMonitoringScheduleVendorV3(contractId: String, scheduleId: Int, triggerFollowUpTask: Option[Boolean] = None)(implicit basicAuth: Option[BasicCredentials], bearerToken: Option[BearerToken]): ApiRequestT[EmptyApiResponse] =
{
    var r = basicRequest
      .method(Method.POST, uri"$baseUrl/api/v3/vendor/contracts/${contractId}/settings/monitoringschedules/${scheduleId}/execute?triggerFollowUpTask=$triggerFollowUpTask")
      .contentType("application/json")
      basicAuth.foreach(b => r = r.auth.basic(b.user, b.password))
      bearerToken.foreach(b => r = r.auth.bearer(b.token))
      r.response(asJson[EmptyApiResponse])
}

  /**
   * Get all the monitoring schedules for a specified manufacturer contract.
   * 
   * Expected answers:
   *   code 200 : GetMonitoringSchedulesApiResponse (List of monitoring schedules.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   *   BearerAuth (http)
   * 
   * @param contractId Unique identifier of the contract
   */
  def getMonitoringSchedulesManufacturerV3(contractId: String)(implicit basicAuth: Option[BasicCredentials], bearerToken: Option[BearerToken]): ApiRequestT[GetMonitoringSchedulesApiResponse] =
{
    var r = basicRequest
      .method(Method.GET, uri"$baseUrl/api/v3/manufacturer/contracts/${contractId}/settings/monitoringschedules")
      .contentType("application/json")
      basicAuth.foreach(b => r = r.auth.basic(b.user, b.password))
      bearerToken.foreach(b => r = r.auth.bearer(b.token))
      r.response(asJson[GetMonitoringSchedulesApiResponse])
}

  /**
   * Get all the monitoring schedules for a specified vendor contract.
   * 
   * Expected answers:
   *   code 200 : GetMonitoringSchedulesApiResponse (List of monitoring schedules.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   *   BearerAuth (http)
   * 
   * @param contractId Unique identifier of the contract
   */
  def getMonitoringSchedulesVendorV3(contractId: String)(implicit basicAuth: Option[BasicCredentials], bearerToken: Option[BearerToken]): ApiRequestT[GetMonitoringSchedulesApiResponse] =
{
    var r = basicRequest
      .method(Method.GET, uri"$baseUrl/api/v3/vendor/contracts/${contractId}/settings/monitoringschedules")
      .contentType("application/json")
      basicAuth.foreach(b => r = r.auth.basic(b.user, b.password))
      bearerToken.foreach(b => r = r.auth.bearer(b.token))
      r.response(asJson[GetMonitoringSchedulesApiResponse])
}

  /**
   * Add a monitoring schedule for a given manufacturer contract.
   * 
   * Expected answers:
   *   code 200 : PutMonitoringSchedulesApiResponse (Monitoring schedule has been created successfully.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   *   BearerAuth (http)
   * 
   * @param contractId Unique identifier of the contract
   * @param postMonitoringScheduleRequestV3 Request body for creating monitoring schedule.
   */
  def postMonitoringScheduleManufacturerV3(contractId: String, postMonitoringScheduleRequestV3: Option[PostMonitoringScheduleRequestV3] = None)(implicit basicAuth: Option[BasicCredentials], bearerToken: Option[BearerToken]): ApiRequestT[PutMonitoringSchedulesApiResponse] =
{
    var r = basicRequest
      .method(Method.POST, uri"$baseUrl/api/v3/manufacturer/contracts/${contractId}/settings/monitoringschedules")
      .contentType("application/json")
      basicAuth.foreach(b => r = r.auth.basic(b.user, b.password))
      bearerToken.foreach(b => r = r.auth.bearer(b.token))
      r=r.body(postMonitoringScheduleRequestV3)
      r.response(asJson[PutMonitoringSchedulesApiResponse])
}

  /**
   * Add a monitoring schedule for a given contract.
   * 
   * Expected answers:
   *   code 200 : PutMonitoringSchedulesApiResponse (Monitoring schedule has been created successfully.)
   *   code 503 : ApiErrorResponse (Monitoring schedule could not be created due to an internal server error.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   *   BearerAuth (http)
   * 
   * @param contractId Unique identifier of the contract
   * @param postMonitoringScheduleRequestV3 Request body for creating monitoring schedule.
   */
  def postMonitoringScheduleVendorV3(contractId: String, postMonitoringScheduleRequestV3: Option[PostMonitoringScheduleRequestV3] = None)(implicit basicAuth: Option[BasicCredentials], bearerToken: Option[BearerToken]): ApiRequestT[PutMonitoringSchedulesApiResponse] =
{
    var r = basicRequest
      .method(Method.POST, uri"$baseUrl/api/v3/vendor/contracts/${contractId}/settings/monitoringschedules")
      .contentType("application/json")
      basicAuth.foreach(b => r = r.auth.basic(b.user, b.password))
      bearerToken.foreach(b => r = r.auth.bearer(b.token))
      r=r.body(postMonitoringScheduleRequestV3)
      r.response(asJson[PutMonitoringSchedulesApiResponse])
}

  /**
   * Update a monitoring schedule for a given manufacturer contract.
   * 
   * Expected answers:
   *   code 201 : PutMonitoringSchedulesApiResponse (Monitoring schedule has been updated successfully.)
   *   code 404 : ApiErrorResponse (Specified monitoring schedule does not exist.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   *   BearerAuth (http)
   * 
   * @param contractId Unique identifier of the contract
   * @param scheduleId Unique identifier of a monitoring schedule
   * @param postMonitoringScheduleRequestV3 Request body for updating monitoring schedule.
   */
  def putMonitoringScheduleManufacturerV3(contractId: String, scheduleId: Int, postMonitoringScheduleRequestV3: Option[PostMonitoringScheduleRequestV3] = None)(implicit basicAuth: Option[BasicCredentials], bearerToken: Option[BearerToken]): ApiRequestT[PutMonitoringSchedulesApiResponse] =
{
    var r = basicRequest
      .method(Method.PUT, uri"$baseUrl/api/v3/manufacturer/contracts/${contractId}/settings/monitoringschedules/${scheduleId}")
      .contentType("application/json")
      basicAuth.foreach(b => r = r.auth.basic(b.user, b.password))
      bearerToken.foreach(b => r = r.auth.bearer(b.token))
      r=r.body(postMonitoringScheduleRequestV3)
      r.response(asJson[PutMonitoringSchedulesApiResponse])
}

  /**
   * Update a monitoring schedule for a given vendor contract.
   * 
   * Expected answers:
   *   code 201 : PutMonitoringSchedulesApiResponse (Monitoring schedule has been updated successfully.)
   *   code 404 : ApiErrorResponse (Specified monitoring schedule does not exist.)
   *   code 503 : ApiErrorResponse (Monitoring schedule could not be updated due to an internal server error.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   *   BearerAuth (http)
   * 
   * @param contractId Unique identifier of the contract
   * @param scheduleId Unique identifier of a monitoring schedule
   * @param postMonitoringScheduleRequestV3 Request body for updating monitoring schedule.
   */
  def putMonitoringScheduleVendorV3(contractId: String, scheduleId: Int, postMonitoringScheduleRequestV3: Option[PostMonitoringScheduleRequestV3] = None)(implicit basicAuth: Option[BasicCredentials], bearerToken: Option[BearerToken]): ApiRequestT[PutMonitoringSchedulesApiResponse] =
{
    var r = basicRequest
      .method(Method.PUT, uri"$baseUrl/api/v3/vendor/contracts/${contractId}/settings/monitoringschedules/${scheduleId}")
      .contentType("application/json")
      basicAuth.foreach(b => r = r.auth.basic(b.user, b.password))
      bearerToken.foreach(b => r = r.auth.bearer(b.token))
      r=r.body(postMonitoringScheduleRequestV3)
      r.response(asJson[PutMonitoringSchedulesApiResponse])
}

}

