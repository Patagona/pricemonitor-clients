/**
 * Omnia 2.0 API The Omnia 2.0 API is RESTful and provides access to the backend of Omnia 2.0 and Pricemonitor. It is used to manage products, offers, contracts, and more.  This API supports both public endpoints for customer integration and internal endpoints for platform management. All endpoints are authenticated using either Basic Authentication or JWT Bearer tokens.
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.7214
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.patagona.pricemonitor.client.api

import com.patagona.pricemonitor.client.model.ApiErrorResponse
import com.patagona.pricemonitor.client.model.CreateFeatureFlagApiResponse
import com.patagona.pricemonitor.client.model.EmptyApiResponse
import com.patagona.pricemonitor.client.model.GetAllFeatureFlagsApiResponse
import com.patagona.pricemonitor.client.model.GetFeatureFlagByKeyApiResponse
import com.patagona.pricemonitor.client.model.PostFeatureFlagRequest
import com.patagona.pricemonitor.client.model.PutFeatureFlagRequest
import com.patagona.pricemonitor.client.model.UpdateFeatureFlagApiResponse
import com.patagona.pricemonitor.client.core._
import alias._
import sttp.client._
import sttp.model.Method

object FeatureFlagsApi {

  def apply(baseUrl: String = "https://api.patagona.de")(implicit serializer: SttpSerializer) = new FeatureFlagsApi(baseUrl)
}

class FeatureFlagsApi(baseUrl: String)(implicit serializer: SttpSerializer) {

  import Helpers._
  import serializer._

  /**
   * **ðŸ”’ INTERNAL:** Creates a new feature flag in the system.  Feature flags must have a unique key that follows the pattern `[a-zA-Z0-9._-]+` and cannot exceed 128 characters in length. 
   * 
   * Expected answers:
   *   code 200 : CreateFeatureFlagApiResponse (Feature flag created successfully)
   *   code 400 : ApiErrorResponse (Request validation failed. Common reasons include: - Invalid flag key format (must be alphanumeric, dot, underscore, or dash) - Flag key already exists - Flag name is empty or too long - Description exceeds maximum length )
   * 
   * Available security schemes:
   *   BasicAuth (http)
   *   BearerAuth (http)
   * 
   * @param postFeatureFlagRequest The feature flag to be created
   */
  def createFeatureFlag(postFeatureFlagRequest: PostFeatureFlagRequest)(implicit basicAuth: Option[BasicCredentials], bearerToken: Option[BearerToken]): ApiRequestT[CreateFeatureFlagApiResponse] =
{
    var r = basicRequest
      .method(Method.POST, uri"$baseUrl/controlpanel/api/feature-flags")
      .contentType("application/json")
      basicAuth.foreach(b => r = r.auth.basic(b.user, b.password))
      bearerToken.foreach(b => r = r.auth.bearer(b.token))
      r=r.body(postFeatureFlagRequest)
      r.response(asJson[CreateFeatureFlagApiResponse])
}

  /**
   * **ðŸ”’ INTERNAL:** Deletes a feature flag from the system (soft delete).  The feature flag is marked as deleted but preserved in the database for audit purposes. Once deleted, the flag key becomes unavailable for new flags. 
   * 
   * Expected answers:
   *   code 200 : EmptyApiResponse (Feature flag deleted successfully)
   *   code 404 : ApiErrorResponse (Feature flag with the specified key was not found)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   *   BearerAuth (http)
   * 
   * @param key Feature flag key identifier
   */
  def deleteFeatureFlag(key: String)(implicit basicAuth: Option[BasicCredentials], bearerToken: Option[BearerToken]): ApiRequestT[EmptyApiResponse] =
{
    var r = basicRequest
      .method(Method.DELETE, uri"$baseUrl/controlpanel/api/feature-flags/${key}")
      .contentType("application/json")
      basicAuth.foreach(b => r = r.auth.basic(b.user, b.password))
      bearerToken.foreach(b => r = r.auth.bearer(b.token))
      r.response(asJson[EmptyApiResponse])
}

  /**
   * **ðŸ”’ INTERNAL:** Retrieves a list of all feature flags configured in the system.  Feature flags are used to control the availability of application features and can be managed through the control panel interface. 
   * 
   * Expected answers:
   *   code 200 : GetAllFeatureFlagsApiResponse (List of all feature flags)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   *   BearerAuth (http)
   */
  def getAllFeatureFlags()(implicit basicAuth: Option[BasicCredentials], bearerToken: Option[BearerToken]): ApiRequestT[GetAllFeatureFlagsApiResponse] =
{
    var r = basicRequest
      .method(Method.GET, uri"$baseUrl/controlpanel/api/feature-flags")
      .contentType("application/json")
      basicAuth.foreach(b => r = r.auth.basic(b.user, b.password))
      bearerToken.foreach(b => r = r.auth.bearer(b.token))
      r.response(asJson[GetAllFeatureFlagsApiResponse])
}

  /**
   * **ðŸ”’ INTERNAL:** Retrieves a specific feature flag by its key.  Returns the feature flag configuration including metadata such as creation and update timestamps. 
   * 
   * Expected answers:
   *   code 200 : GetFeatureFlagByKeyApiResponse (Feature flag details retrieved successfully)
   *   code 404 : ApiErrorResponse (Feature flag with the specified key was not found)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   *   BearerAuth (http)
   * 
   * @param key Feature flag key identifier
   */
  def getFeatureFlagByKey(key: String)(implicit basicAuth: Option[BasicCredentials], bearerToken: Option[BearerToken]): ApiRequestT[GetFeatureFlagByKeyApiResponse] =
{
    var r = basicRequest
      .method(Method.GET, uri"$baseUrl/controlpanel/api/feature-flags/${key}")
      .contentType("application/json")
      basicAuth.foreach(b => r = r.auth.basic(b.user, b.password))
      bearerToken.foreach(b => r = r.auth.bearer(b.token))
      r.response(asJson[GetFeatureFlagByKeyApiResponse])
}

  /**
   * **ðŸ”’ INTERNAL:** Updates an existing feature flag's name and description.  The feature flag key cannot be changed after creation. Only the display name and description can be updated. 
   * 
   * Expected answers:
   *   code 200 : UpdateFeatureFlagApiResponse (Feature flag updated successfully)
   *   code 400 : ApiErrorResponse (Request validation failed. Common reasons include: - Flag name is empty or too long - Description exceeds maximum length )
   *   code 404 : ApiErrorResponse (Feature flag with the specified key was not found)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   *   BearerAuth (http)
   * 
   * @param key Feature flag key identifier
   * @param putFeatureFlagRequest The feature flag updates to be applied
   */
  def updateFeatureFlag(key: String, putFeatureFlagRequest: PutFeatureFlagRequest)(implicit basicAuth: Option[BasicCredentials], bearerToken: Option[BearerToken]): ApiRequestT[UpdateFeatureFlagApiResponse] =
{
    var r = basicRequest
      .method(Method.PUT, uri"$baseUrl/controlpanel/api/feature-flags/${key}")
      .contentType("application/json")
      basicAuth.foreach(b => r = r.auth.basic(b.user, b.password))
      bearerToken.foreach(b => r = r.auth.bearer(b.token))
      r=r.body(putFeatureFlagRequest)
      r.response(asJson[UpdateFeatureFlagApiResponse])
}

}

