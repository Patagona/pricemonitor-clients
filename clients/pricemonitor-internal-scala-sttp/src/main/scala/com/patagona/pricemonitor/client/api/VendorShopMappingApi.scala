/**
 * Pricemonitor API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.6288
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.patagona.pricemonitor.client.api

import com.patagona.pricemonitor.client.model.ApiErrorResponse
import com.patagona.pricemonitor.client.model.DeleteByNumericIdApiResponse
import com.patagona.pricemonitor.client.model.GetVendorShopMappingsApiResponse
import com.patagona.pricemonitor.client.model.PostVendorShopMappingRequestV3
import com.patagona.pricemonitor.client.model.VendorShopMappingV3ApiResponse
import com.patagona.pricemonitor.client.core._
import alias._
import sttp.client._
import sttp.model.Method

object VendorShopMappingApi {

  def apply(baseUrl: String = "https://api.patagona.de")(implicit serializer: SttpSerializer) = new VendorShopMappingApi(baseUrl)
}

class VendorShopMappingApi(baseUrl: String)(implicit serializer: SttpSerializer) {

  import Helpers._
  import serializer._

  /**
   * Expected answers:
   *   code 200 : DeleteByNumericIdApiResponse (A vendor and associated shops have been deleted successfully.)
   *   code 404 : ApiErrorResponse (Specified vendor does not exist.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   *   BearerAuth (http)
   * 
   * @param contractId ID of the contract
   * @param vendorId ID of vendor shop mapping
   */
  def deleteVendorShopMappingManufacturerV3(contractId: String, vendorId: Long)(implicit basicAuth: Option[BasicCredentials], bearerToken: Option[BearerToken]): ApiRequestT[DeleteByNumericIdApiResponse] =
{
    var r = basicRequest
      .method(Method.DELETE, uri"$baseUrl/api/v3/manufacturer/contracts/${contractId}/vendors/${vendorId}")
      .contentType("application/json")
      basicAuth.foreach(b => r = r.auth.basic(b.user, b.password))
      bearerToken.foreach(b => r = r.auth.bearer(b.token))
      r.response(asJson[DeleteByNumericIdApiResponse])
}

  /**
   * Expected answers:
   *   code 200 : VendorShopMappingV3ApiResponse (Get vendor along with their associated shop for given vendor id and contract.)
   *   code 404 : ApiErrorResponse (Vendor doesn't exist for given vendor id.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   *   BearerAuth (http)
   * 
   * @param contractId ID of the contract
   * @param vendorId ID of vendor shop mapping
   */
  def getVendorShopMappingManufacturerV3(contractId: String, vendorId: Long)(implicit basicAuth: Option[BasicCredentials], bearerToken: Option[BearerToken]): ApiRequestT[VendorShopMappingV3ApiResponse] =
{
    var r = basicRequest
      .method(Method.GET, uri"$baseUrl/api/v3/manufacturer/contracts/${contractId}/vendors/${vendorId}")
      .contentType("application/json")
      basicAuth.foreach(b => r = r.auth.basic(b.user, b.password))
      bearerToken.foreach(b => r = r.auth.bearer(b.token))
      r.response(asJson[VendorShopMappingV3ApiResponse])
}

  /**
   * Expected answers:
   *   code 200 : GetVendorShopMappingsApiResponse (List of vendors along with their associated shops.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   *   BearerAuth (http)
   * 
   * @param contractId ID of the contract
   */
  def getVendorShopMappingsManufacturerV3(contractId: String)(implicit basicAuth: Option[BasicCredentials], bearerToken: Option[BearerToken]): ApiRequestT[GetVendorShopMappingsApiResponse] =
{
    var r = basicRequest
      .method(Method.GET, uri"$baseUrl/api/v3/manufacturer/contracts/${contractId}/vendors")
      .contentType("application/json")
      basicAuth.foreach(b => r = r.auth.basic(b.user, b.password))
      bearerToken.foreach(b => r = r.auth.bearer(b.token))
      r.response(asJson[GetVendorShopMappingsApiResponse])
}

  /**
   * Expected answers:
   *   code 200 : VendorShopMappingV3ApiResponse (Vendor shop mapping has been successfully created.)
   *   code 400 : ApiErrorResponse (The specified vendor name is empty. Or the specified shops are empty.)
   *   code 409 : ApiErrorResponse (The specified vendor name already exists in our system.)
   *   code 422 : ApiErrorResponse (The specified shops do not exist in our system.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   *   BearerAuth (http)
   * 
   * @param contractId ID of the contract
   * @param postVendorShopMappingRequestV3 Request body for creating a new vendor and associate shops with it. Please note that atleast one shop is required for a successful creation.
   */
  def postVendorShopMappingManufacturerV3(contractId: String, postVendorShopMappingRequestV3: Option[PostVendorShopMappingRequestV3] = None)(implicit basicAuth: Option[BasicCredentials], bearerToken: Option[BearerToken]): ApiRequestT[VendorShopMappingV3ApiResponse] =
{
    var r = basicRequest
      .method(Method.POST, uri"$baseUrl/api/v3/manufacturer/contracts/${contractId}/vendors")
      .contentType("application/json")
      basicAuth.foreach(b => r = r.auth.basic(b.user, b.password))
      bearerToken.foreach(b => r = r.auth.bearer(b.token))
      r=r.body(postVendorShopMappingRequestV3)
      r.response(asJson[VendorShopMappingV3ApiResponse])
}

  /**
   * Expected answers:
   *   code 200 : VendorShopMappingV3ApiResponse (Vendor shop mapping has been successfully updated.)
   *   code 400 : ApiErrorResponse (The specified vendor name is empty. Or the specified shops are empty.)
   *   code 409 : ApiErrorResponse (The specified vendor name already exists in our system.)
   *   code 422 : ApiErrorResponse (The specified shops do not exist in our system.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   *   BearerAuth (http)
   * 
   * @param contractId ID of the contract
   * @param vendorId ID of vendor shop mapping
   * @param postVendorShopMappingRequestV3 Request body for updating an existing vendor and associate shops with it. Please note that atleast one shop is required for a successful creation.
   */
  def putVendorShopMappingManufacturerV3(contractId: String, vendorId: Long, postVendorShopMappingRequestV3: Option[PostVendorShopMappingRequestV3] = None)(implicit basicAuth: Option[BasicCredentials], bearerToken: Option[BearerToken]): ApiRequestT[VendorShopMappingV3ApiResponse] =
{
    var r = basicRequest
      .method(Method.PUT, uri"$baseUrl/api/v3/manufacturer/contracts/${contractId}/vendors/${vendorId}")
      .contentType("application/json")
      basicAuth.foreach(b => r = r.auth.basic(b.user, b.password))
      bearerToken.foreach(b => r = r.auth.bearer(b.token))
      r=r.body(postVendorShopMappingRequestV3)
      r.response(asJson[VendorShopMappingV3ApiResponse])
}

}

