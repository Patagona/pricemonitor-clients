/**
 * Pricemonitor API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.6301
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.patagona.pricemonitor.client.api

import com.patagona.pricemonitor.client.model.ApiErrorResponse
import com.patagona.pricemonitor.client.model.PostAccountRequestV3
import com.patagona.pricemonitor.client.model.PostAccountResponseV3ApiResponse
import com.patagona.pricemonitor.client.model.PostNewPasswordRequest
import com.patagona.pricemonitor.client.model.PutResetPasswordRequest
import com.patagona.pricemonitor.client.model.UserInfo
import com.patagona.pricemonitor.client.model.UserSignupRequest
import com.patagona.pricemonitor.client.core._
import alias._
import sttp.client._
import sttp.model.Method

object AccountApi {

  def apply(baseUrl: String = "https://api.patagona.de")(implicit serializer: SttpSerializer) = new AccountApi(baseUrl)
}

class AccountApi(baseUrl: String)(implicit serializer: SttpSerializer) {

  import Helpers._
  import serializer._

  /**
   * Expected answers:
   *   code 200 : Any (Authenticate with the API and create a session)
   */
  def authenticate(): ApiRequestT[Any] =
{
    var r = basicRequest
      .method(Method.POST, uri"$baseUrl/login")
      .contentType("application/json")
      r.response(asJson[Any])
}

  /**
   * Expected answers:
   *   code 200 : Any (Change the current users password)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   *   BearerAuth (http)
   */
  def changePassword()(implicit basicAuth: Option[BasicCredentials], bearerToken: Option[BearerToken]): ApiRequestT[Any] =
{
    var r = basicRequest
      .method(Method.PUT, uri"$baseUrl/api/account/password")
      .contentType("application/json")
      basicAuth.foreach(b => r = r.auth.basic(b.user, b.password))
      bearerToken.foreach(b => r = r.auth.bearer(b.token))
      r.response(asJson[Any])
}

  /**
   * Expected answers:
   *   code 200 :  (No response was specified)
   *   code 204 :  (Confirmation token was found)
   *   code 404 :  (No such confirmation token was found)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   *   BearerAuth (http)
   * 
   * @param token 
   */
  def checkUserConfirmation(token: String)(implicit basicAuth: Option[BasicCredentials], bearerToken: Option[BearerToken]): ApiRequestT[Unit] =
{
    var r = basicRequest
      .method(Method.HEAD, uri"$baseUrl/api/account/confirm/${token}")
      .contentType("application/json")
      basicAuth.foreach(b => r = r.auth.basic(b.user, b.password))
      bearerToken.foreach(b => r = r.auth.bearer(b.token))
      r.response(asJson[Unit])
}

  /**
   * Expected answers:
   *   code 200 :  (No response was specified)
   *   code 204 :  (User was confirmed & logged in)
   *   code 400 : ApiErrorResponse (Unable to confirm the user because of bad request data)
   *   code 500 : ApiErrorResponse (Unable to confirm the user because of an unexpected error)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   *   BearerAuth (http)
   * 
   * @param token 
   * @param body The password that should be set on the confirmed user
   */
  def confirmUser(token: String, body: String)(implicit basicAuth: Option[BasicCredentials], bearerToken: Option[BearerToken]): ApiRequestT[Unit] =
{
    var r = basicRequest
      .method(Method.POST, uri"$baseUrl/api/account/confirm/${token}")
      .contentType("application/json")
      basicAuth.foreach(b => r = r.auth.basic(b.user, b.password))
      bearerToken.foreach(b => r = r.auth.bearer(b.token))
      r=r.body(body)
      r.response(asJson[Unit])
}

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   *   BearerAuth (http)
   * 
   * @param userId 
   * @param roleName 
   */
  def deleteUserRole(userId: Long, roleName: String)(implicit basicAuth: Option[BasicCredentials], bearerToken: Option[BearerToken]): ApiRequestT[Any] =
{
    var r = basicRequest
      .method(Method.DELETE, uri"$baseUrl/api/2/users/${userId}/role/${roleName}")
      .contentType("application/json")
      basicAuth.foreach(b => r = r.auth.basic(b.user, b.password))
      bearerToken.foreach(b => r = r.auth.bearer(b.token))
      r.response(asJson[Any])
}

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * @param token 
   */
  def loginByAuthToken(token: String): ApiRequestT[Any] =
{
    var r = basicRequest
      .method(Method.GET, uri"$baseUrl/api/login/token/${token}")
      .contentType("application/json")
      r.response(asJson[Any])
}

  /**
   * Expected answers:
   *   code 200 : Any (Deauthenticate with the API and destroy the current session)
   */
  def logout(): ApiRequestT[Any] =
{
    var r = basicRequest
      .method(Method.POST, uri"$baseUrl/logout")
      .contentType("application/json")
      r.response(asJson[Any])
}

  /**
   * Expected answers:
   *   code 200 : PostAccountResponseV3ApiResponse (The account information of the newly created account.)
   *   code 400 : ApiErrorResponse (Returned if: - The Request body is not a valid JSON string - The user account name is empty - The email doesn't match a valid email format - The password length is less than 6 characters long - The enpoint was requested too often - The given email address already exists )
   * 
   * @param postAccountRequestV3 Request body for creating a new user account. It must contain name, email and password.
   */
  def postAccountV3(postAccountRequestV3: Option[PostAccountRequestV3] = None): ApiRequestT[PostAccountResponseV3ApiResponse] =
{
    var r = basicRequest
      .method(Method.POST, uri"$baseUrl/api/v3/account")
      .contentType("application/json")
      r=r.body(postAccountRequestV3)
      r.response(asJson[PostAccountResponseV3ApiResponse])
}

  /**
   * Expected answers:
   *   code 200 : String (Successful response upon password request)
   *   code 400 : ApiErrorResponse (Invalid request body is specified)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   *   BearerAuth (http)
   * 
   * @param postNewPasswordRequest Request a new password.
   */
  def requestNewPassword(postNewPasswordRequest: Option[PostNewPasswordRequest] = None)(implicit basicAuth: Option[BasicCredentials], bearerToken: Option[BearerToken]): ApiRequestT[String] =
{
    var r = basicRequest
      .method(Method.POST, uri"$baseUrl/api/account/password/reset")
      .contentType("application/json")
      basicAuth.foreach(b => r = r.auth.basic(b.user, b.password))
      bearerToken.foreach(b => r = r.auth.bearer(b.token))
      r=r.body(postNewPasswordRequest)
      r.response(asJson[String])
}

  /**
   * Expected answers:
   *   code 200 : String (Password changed successfully.)
   *   code 400 : String (Password didn't change successfully.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   *   BearerAuth (http)
   * 
   * @param putResetPasswordRequest Reset a password
   */
  def resetPassword(putResetPasswordRequest: Option[PutResetPasswordRequest] = None)(implicit basicAuth: Option[BasicCredentials], bearerToken: Option[BearerToken]): ApiRequestT[String] =
{
    var r = basicRequest
      .method(Method.PUT, uri"$baseUrl/api/account/password/reset")
      .contentType("application/json")
      basicAuth.foreach(b => r = r.auth.basic(b.user, b.password))
      bearerToken.foreach(b => r = r.auth.bearer(b.token))
      r=r.body(putResetPasswordRequest)
      r.response(asJson[String])
}

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   *   BearerAuth (http)
   * 
   * @param userId 
   * @param roleName 
   * @param body This is a generated entry and needs to be described.
   */
  def updateUserRole(userId: Long, roleName: String, body: Option[Any] = None)(implicit basicAuth: Option[BasicCredentials], bearerToken: Option[BearerToken]): ApiRequestT[Any] =
{
    var r = basicRequest
      .method(Method.PUT, uri"$baseUrl/api/2/users/${userId}/role/${roleName}")
      .contentType("application/json")
      basicAuth.foreach(b => r = r.auth.basic(b.user, b.password))
      bearerToken.foreach(b => r = r.auth.bearer(b.token))
      r=r.body(body)
      r.response(asJson[Any])
}

  /**
   * Returns the current user with its companies and contracts
   * 
   * Expected answers:
   *   code 200 : UserInfo (No response was specified)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   *   BearerAuth (http)
   */
  def userInfo()(implicit basicAuth: Option[BasicCredentials], bearerToken: Option[BearerToken]): ApiRequestT[UserInfo] =
{
    var r = basicRequest
      .method(Method.GET, uri"$baseUrl/api/account")
      .contentType("application/json")
      basicAuth.foreach(b => r = r.auth.basic(b.user, b.password))
      bearerToken.foreach(b => r = r.auth.bearer(b.token))
      r.response(asJson[UserInfo])
}

  /**
   * Expected answers:
   *   code 200 :  (No response was specified)
   *   code 201 :  (User was created and confirmation eMail was sent)
   *   code 400 : ApiErrorResponse (Unable to create the user because of bad request data)
   *   code 500 : ApiErrorResponse (Unable to create the user because of an unexpected error)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   *   BearerAuth (http)
   * 
   * @param userSignupRequest The user signup data
   */
  def userSignup(userSignupRequest: UserSignupRequest)(implicit basicAuth: Option[BasicCredentials], bearerToken: Option[BearerToken]): ApiRequestT[Unit] =
{
    var r = basicRequest
      .method(Method.POST, uri"$baseUrl/api/account")
      .contentType("application/json")
      basicAuth.foreach(b => r = r.auth.basic(b.user, b.password))
      bearerToken.foreach(b => r = r.auth.bearer(b.token))
      r=r.body(userSignupRequest)
      r.response(asJson[Unit])
}

}

