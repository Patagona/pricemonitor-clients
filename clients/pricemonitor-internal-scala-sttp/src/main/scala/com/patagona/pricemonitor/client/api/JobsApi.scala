/**
 * Omnia 2.0 API The Omnia 2.0 API is RESTful and provides access to the backend of Omnia 2.0 and Pricemonitor. It is used to manage products, offers, contracts and more.
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.6960
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.patagona.pricemonitor.client.api

import com.patagona.pricemonitor.client.model.DkronExecutionsApiResponse
import com.patagona.pricemonitor.client.model.DkronJobApiResponse
import com.patagona.pricemonitor.client.model.Job
import com.patagona.pricemonitor.client.model.JobApiResponse
import com.patagona.pricemonitor.client.model.JobType
import com.patagona.pricemonitor.client.model.JobsApiResponse
import com.patagona.pricemonitor.client.model.SchedulerSchedulerApiErrorResponse
import com.patagona.pricemonitor.client.core._
import alias._
import sttp.client._
import sttp.model.Method

object JobsApi {

  def apply(baseUrl: String = "https://api.patagona.de")(implicit serializer: SttpSerializer) = new JobsApi(baseUrl)
}

class JobsApi(baseUrl: String)(implicit serializer: SttpSerializer) {

  import Helpers._
  import serializer._

  /**
   * The `_id` **must** not be sent when creating a job. It is ignored otherwise.  The `contractId` is taken from the URL path.  **NOTE**: When also sending the `contractId` in the body and it does not conform to the path `contractId`, the request will be rejected. 
   * 
   * Expected answers:
   *   code 200 : JobApiResponse (OK)
   * 
   * Available security schemes:
   *   basicAuth (http)
   *   bearerAuth (http)
   * 
   * @param contractId Each job must have a `contractId`
   * @param job 
   */
  def createJob(contractId: String, job: Option[Job] = None)(implicit basicAuth: Option[BasicCredentials], bearerToken: Option[BearerToken]): ApiRequestT[JobApiResponse] =
{
    var r = basicRequest
      .method(Method.POST, uri"$baseUrl/api/v3/vendor/contracts/${contractId}/scheduler/jobs")
      .contentType("application/json")
      basicAuth.foreach(b => r = r.auth.basic(b.user, b.password))
      bearerToken.foreach(b => r = r.auth.bearer(b.token))
      r=r.body(job)
      r.response(asJson[JobApiResponse])
}

  /**
   * Expected answers:
   *   code 200 : JobApiResponse (OK)
   * 
   * Available security schemes:
   *   basicAuth (http)
   *   bearerAuth (http)
   * 
   * @param jobId The internal job ID
   * @param contractId Each job must have a `contractId`
   */
  def deleteJob(jobId: String, contractId: String)(implicit basicAuth: Option[BasicCredentials], bearerToken: Option[BearerToken]): ApiRequestT[JobApiResponse] =
{
    var r = basicRequest
      .method(Method.DELETE, uri"$baseUrl/api/v3/vendor/contracts/${contractId}/scheduler/jobs/${jobId}")
      .contentType("application/json")
      basicAuth.foreach(b => r = r.auth.basic(b.user, b.password))
      bearerToken.foreach(b => r = r.auth.bearer(b.token))
      r.response(asJson[JobApiResponse])
}

  /**
   * Expected answers:
   *   code 200 : JobsApiResponse (OK)
   * 
   * Available security schemes:
   *   basicAuth (http)
   *   bearerAuth (http)
   * 
   * @param contractId Each job must have a `contractId`
   * @param jobType Filter by job type
   */
  def getContractJobs(contractId: String, jobType: Option[JobType] = None)(implicit basicAuth: Option[BasicCredentials], bearerToken: Option[BearerToken]): ApiRequestT[JobsApiResponse] =
{
    var r = basicRequest
      .method(Method.GET, uri"$baseUrl/api/v3/vendor/contracts/${contractId}/scheduler/jobs?jobType=$jobType")
      .contentType("application/json")
      basicAuth.foreach(b => r = r.auth.basic(b.user, b.password))
      bearerToken.foreach(b => r = r.auth.bearer(b.token))
      r.response(asJson[JobsApiResponse])
}

  /**
   * Expected answers:
   *   code 200 : DkronExecutionsApiResponse (OK)
   * 
   * Available security schemes:
   *   basicAuth (http)
   *   bearerAuth (http)
   * 
   * @param jobId The internal job ID
   * @param contractId Each job must have a `contractId`
   */
  def getDkronExecutions(jobId: String, contractId: String)(implicit basicAuth: Option[BasicCredentials], bearerToken: Option[BearerToken]): ApiRequestT[DkronExecutionsApiResponse] =
{
    var r = basicRequest
      .method(Method.GET, uri"$baseUrl/api/v3/vendor/contracts/${contractId}/scheduler/jobs/${jobId}/dkron/executions")
      .contentType("application/json")
      basicAuth.foreach(b => r = r.auth.basic(b.user, b.password))
      bearerToken.foreach(b => r = r.auth.bearer(b.token))
      r.response(asJson[DkronExecutionsApiResponse])
}

  /**
   * Expected answers:
   *   code 200 : DkronJobApiResponse (OK)
   * 
   * Available security schemes:
   *   basicAuth (http)
   *   bearerAuth (http)
   * 
   * @param jobId The internal job ID
   * @param contractId Each job must have a `contractId`
   */
  def getDkronJob(jobId: String, contractId: String)(implicit basicAuth: Option[BasicCredentials], bearerToken: Option[BearerToken]): ApiRequestT[DkronJobApiResponse] =
{
    var r = basicRequest
      .method(Method.GET, uri"$baseUrl/api/v3/vendor/contracts/${contractId}/scheduler/jobs/${jobId}/dkron")
      .contentType("application/json")
      basicAuth.foreach(b => r = r.auth.basic(b.user, b.password))
      bearerToken.foreach(b => r = r.auth.bearer(b.token))
      r.response(asJson[DkronJobApiResponse])
}

  /**
   * Expected answers:
   *   code 200 : JobApiResponse (OK)
   * 
   * Available security schemes:
   *   basicAuth (http)
   *   bearerAuth (http)
   * 
   * @param jobId The internal job ID
   * @param contractId Each job must have a `contractId`
   */
  def getJob(jobId: String, contractId: String)(implicit basicAuth: Option[BasicCredentials], bearerToken: Option[BearerToken]): ApiRequestT[JobApiResponse] =
{
    var r = basicRequest
      .method(Method.GET, uri"$baseUrl/api/v3/vendor/contracts/${contractId}/scheduler/jobs/${jobId}")
      .contentType("application/json")
      basicAuth.foreach(b => r = r.auth.basic(b.user, b.password))
      bearerToken.foreach(b => r = r.auth.bearer(b.token))
      r.response(asJson[JobApiResponse])
}

  /**
   * Expected answers:
   *   code 200 : JobApiResponse (OK)
   *   code 400 : SchedulerSchedulerApiErrorResponse (Bad request. Incorrect jobId provided.)
   * 
   * Available security schemes:
   *   basicAuth (http)
   *   bearerAuth (http)
   * 
   * @param jobId The internal job ID
   * @param contractId Each job must have a `contractId`
   * @param job 
   */
  def updateJob(jobId: String, contractId: String, job: Option[Job] = None)(implicit basicAuth: Option[BasicCredentials], bearerToken: Option[BearerToken]): ApiRequestT[JobApiResponse] =
{
    var r = basicRequest
      .method(Method.PUT, uri"$baseUrl/api/v3/vendor/contracts/${contractId}/scheduler/jobs/${jobId}")
      .contentType("application/json")
      basicAuth.foreach(b => r = r.auth.basic(b.user, b.password))
      bearerToken.foreach(b => r = r.auth.bearer(b.token))
      r=r.body(job)
      r.response(asJson[JobApiResponse])
}

}

