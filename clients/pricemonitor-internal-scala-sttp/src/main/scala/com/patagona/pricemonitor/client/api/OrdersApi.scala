/**
 * Pricemonitor API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.6056
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.patagona.pricemonitor.client.api

import com.patagona.pricemonitor.client.model.DeleteOrdersApiResponse
import com.patagona.pricemonitor.client.model.PostCustomerOrdersRequestV2
import com.patagona.pricemonitor.client.model.PostOrdersBulkApiResponse
import com.patagona.pricemonitor.client.core._
import alias._
import sttp.client._
import sttp.model.Method

object OrdersApi {

  def apply(baseUrl: String = "https://api.patagona.de")(implicit serializer: SttpSerializer) = new OrdersApi(baseUrl)
}

class OrdersApi(baseUrl: String)(implicit serializer: SttpSerializer) {

  import Helpers._
  import serializer._

  /**
   * Expected answers:
   *   code 200 : DeleteOrdersApiResponse (Successfully deleted all orders)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   *   BearerAuth (http)
   * 
   * @param contractId ID of the contract
   */
  def deleteOrders(contractId: String)(implicit basicAuth: BasicCredentials, bearerToken: BearerToken): ApiRequestT[DeleteOrdersApiResponse] =
    basicRequest
      .method(Method.DELETE, uri"$baseUrl/api/v3/vendor/contracts/${contractId}/orders")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .auth.bearer(bearerToken.token)
      .response(asJson[DeleteOrdersApiResponse])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   *   BearerAuth (http)
   * 
   * @param contractId ID of the contract
   */
  def getOrdersCountByPortalByContract(contractId: String)(implicit basicAuth: BasicCredentials, bearerToken: BearerToken): ApiRequestT[Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/api/1/${contractId}/products/orderscountbyportal")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .auth.bearer(bearerToken.token)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   *   BearerAuth (http)
   * 
   * @param contractId ID of the contract
   * @param start 
   * @param limit 
   */
  def getOrdersVendorV3(contractId: String, start: Int, limit: Int)(implicit basicAuth: BasicCredentials, bearerToken: BearerToken): ApiRequestT[Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/api/v3/vendor/contracts/${contractId}/orders?start=$start&limit=$limit")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .auth.bearer(bearerToken.token)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : PostOrdersBulkApiResponse (Successfully added orders)
   *   code 400 : PostOrdersBulkApiResponse (Unable to add orders)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   *   BearerAuth (http)
   * 
   * @param contractId ID of the contract
   * @param postCustomerOrdersRequestV2 Orders to be added
   */
  def postOrders(contractId: String, postCustomerOrdersRequestV2: PostCustomerOrdersRequestV2)(implicit basicAuth: BasicCredentials, bearerToken: BearerToken): ApiRequestT[PostOrdersBulkApiResponse] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/api/2/v/contracts/${contractId}/orders")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .auth.bearer(bearerToken.token)
      .body(postCustomerOrdersRequestV2)
      .response(asJson[PostOrdersBulkApiResponse])

}

