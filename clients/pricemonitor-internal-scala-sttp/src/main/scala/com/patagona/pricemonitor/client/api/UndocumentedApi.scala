/**
 * Pricemonitor API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.5707
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.patagona.pricemonitor.client.api

import com.patagona.pricemonitor.client.model.CustomerContractSettings
import com.patagona.pricemonitor.client.model.GetContractSettingsResponseV1
import com.patagona.pricemonitor.client.model.GetCustomerContractSettingsApiResponse
import com.patagona.pricemonitor.client.model.GetProductMonitoringStatusStatsVendorV3ApiResponse
import java.time.OffsetDateTime
import com.patagona.pricemonitor.client.model.PostVendorsByDomainResponse
import com.patagona.pricemonitor.client.model.PutAdminContractSettingsBody
import com.patagona.pricemonitor.client.model.PutCustomerContractSettingsApiResponse
import com.patagona.pricemonitor.client.model.TagFilteredVendorsRequest
import com.patagona.pricemonitor.client.core._
import alias._
import sttp.client._
import sttp.model.Method

object UndocumentedApi {

  def apply(baseUrl: String = "https://api.patagona.de")(implicit serializer: SttpSerializer) = new UndocumentedApi(baseUrl)
}

class UndocumentedApi(baseUrl: String)(implicit serializer: SttpSerializer) {

  import Helpers._
  import serializer._

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   */
  def addCompany()(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/controlpanel/api/companies")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param id 
   * @param email 
   * @param body This is a generated entry and needs to be described.
   */
  def addCompanyUser(id: Int, email: String, body: Option[Any] = None)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.PUT, uri"$baseUrl/controlpanel/companies/${id}/users/${email}")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .body(body)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 :  (A new user was added)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   */
  def addUser()(implicit basicAuth: BasicCredentials): ApiRequestT[Unit] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/controlpanel/users")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Unit])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   */
  def allAvailablePortals()(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/api/2/domains")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (Authenticate with the API and create a session)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   */
  def authenticate()(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/login")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (Change the current users password)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   */
  def changePassword()(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.PUT, uri"$baseUrl/api/account/password")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param body This is a generated entry and needs to be described.
   */
  def createAlertSettings(contractId: String, body: Option[Any] = None)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/api/1/${contractId}/settings/alerts")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .body(body)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param email 
   * @param body This is a generated entry and needs to be described.
   */
  def createAuthToken(email: String, body: Option[Any] = None)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/controlpanel/users/${email}/authtokens")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .body(body)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param body This is a generated entry and needs to be described.
   */
  def createTask(contractId: String, body: Option[Any] = None)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/api/1/${contractId}/tasks")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .body(body)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param body This is a generated entry and needs to be described.
   */
  def createTaskVendorV2(contractId: String, body: Option[Any] = None)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/api/2/v/contracts/${contractId}/tasks")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .body(body)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param alertId 
   */
  def deleteAlertSettings(contractId: String, alertId: String)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.DELETE, uri"$baseUrl/api/1/${contractId}/settings/alerts/${alertId}")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param email 
   * @param token 
   */
  def deleteAuthToken(email: String, token: String)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.DELETE, uri"$baseUrl/controlpanel/users/${email}/authtokens/${token}")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   */
  def deleteCallbackSettingsManufacturerV2(contractId: String)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.DELETE, uri"$baseUrl/api/2/m/contracts/${contractId}/settings/callbacks")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   */
  def deleteCallbackSettingsVendorV2(contractId: String)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.DELETE, uri"$baseUrl/api/2/v/contracts/${contractId}/settings/callbacks")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   */
  def deleteContractVendorV2(contractId: String)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.DELETE, uri"$baseUrl/api/2/v/contracts/${contractId}")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   */
  def deleteDynamicMonitoringSettings(contractId: String)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.DELETE, uri"$baseUrl/api/1/${contractId}/settings/dynamicmonitoring")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param feedId 
   */
  def deleteFeedVendorV2(contractId: String, feedId: String)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.DELETE, uri"$baseUrl/api/2/v/contracts/${contractId}/feeds/${feedId}")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   */
  def deleteImportSettingsVendorV2(contractId: String)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.DELETE, uri"$baseUrl/api/2/v/contracts/${contractId}/settings/import")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param updatedMax 
   */
  def deleteProductsManufacturerV3(contractId: String, updatedMax: Option[OffsetDateTime] = None)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.DELETE, uri"$baseUrl/api/v3/manufacturer/contracts/${contractId}/products?updatedMax=$updatedMax")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   */
  def deleteRepricingStrategyVendorV2(contractId: String)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.DELETE, uri"$baseUrl/api/2/v/contracts/${contractId}/settings/repricingstrategy")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param userId 
   * @param roleName 
   */
  def deleteUserRole(userId: Long, roleName: String)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.DELETE, uri"$baseUrl/api/2/users/${userId}/role/${roleName}")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   */
  def getActiveEbayTokenVendorV2(contractId: String)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/api/2/v/contracts/${contractId}/settings/ebay/token")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   */
  def getAlertSettings(contractId: String)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/api/1/${contractId}/settings/alerts")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 :  (A list of contracts was loaded)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   */
  def getAllContracts()(implicit basicAuth: BasicCredentials): ApiRequestT[Unit] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/controlpanel/api/contracts")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Unit])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param start 
   * @param limit 
   */
  def getAllEbayAuthorizationsVendorV2(contractId: String, start: Int, limit: Int)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/api/2/v/contracts/${contractId}/settings/ebay/authorizations?start=$start&limit=$limit")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param start 
   * @param limit 
   */
  def getAllEbayTokensVendorV2(contractId: String, start: Int, limit: Int)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/api/2/v/contracts/${contractId}/settings/ebay/tokens?start=$start&limit=$limit")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 :  (A list of portals was loaded)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   */
  def getAllPortals()(implicit basicAuth: BasicCredentials): ApiRequestT[Unit] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/controlpanel/api/portals")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Unit])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId 
   * @param taskId 
   * @param taskType 
   * @param taskState 
   * @param limit 
   * @param minCreationDate 
   * @param maxCreationDate 
   */
  def getAllTasks(contractId: Seq[String], taskId: Seq[String], taskType: Seq[String], taskState: Seq[String], limit: Int, minCreationDate: Option[OffsetDateTime] = None, maxCreationDate: Option[OffsetDateTime] = None)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/controlpanel/api/tasks?contractId=$contractId&taskId=$taskId&taskType=$taskType&taskState=$taskState&minCreationDate=$minCreationDate&maxCreationDate=$maxCreationDate&limit=$limit")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 :  (A list of users was loaded)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   */
  def getAllUsers()(implicit basicAuth: BasicCredentials): ApiRequestT[Unit] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/controlpanel/api/users")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Unit])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   */
  def getCallbacksVendorV2(contractId: String)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/api/2/v/contracts/${contractId}/settings/callbacks")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param session 
   * @param includeDeliveryCosts 
   * @param tagFilteredVendorsRequest This is a generated entry and needs to be described.
   */
  def getCheapestVendorsManufacturerV2(contractId: String, session: OffsetDateTime, includeDeliveryCosts: Boolean, tagFilteredVendorsRequest: Option[TagFilteredVendorsRequest] = None)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/api/2/m/contracts/${contractId}/result/vendors/cheapest?session=$session&includeDeliveryCosts=$includeDeliveryCosts")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .body(tagFilteredVendorsRequest)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param companyId 
   */
  def getCompany(companyId: Long)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/controlpanel/api/companies/${companyId}")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param maxCreationDate 
   * @param minExpirationDate 
   */
  def getContractsVendorV2(maxCreationDate: Option[OffsetDateTime] = None, minExpirationDate: Option[OffsetDateTime] = None)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/api/2/v/contracts?maxCreationDate=$maxCreationDate&minExpirationDate=$minExpirationDate")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   */
  def getCurrencyVendorV2(contractId: String)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/api/2/v/contracts/${contractId}/settings/currency")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : GetCustomerContractSettingsApiResponse (Settings for this contract.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   */
  def getCustomerContractSettingsManufaturerV3(contractId: String)(implicit basicAuth: BasicCredentials): ApiRequestT[GetCustomerContractSettingsApiResponse] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/api/v3/manufacturer/contracts/${contractId}/settings/customer")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[GetCustomerContractSettingsApiResponse])

  /**
   * Expected answers:
   *   code 200 : GetCustomerContractSettingsApiResponse (Settings for this contract.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   */
  def getCustomerContractSettingsVendorV3(contractId: String)(implicit basicAuth: BasicCredentials): ApiRequestT[GetCustomerContractSettingsApiResponse] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/api/v3/vendor/contracts/${contractId}/settings/customer")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[GetCustomerContractSettingsApiResponse])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   */
  def getDynamicMonitoringSettings(contractId: String)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/api/1/${contractId}/settings/dynamicmonitoring")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param authIds 
   */
  def getEbayAuthorizationsVendorV2(contractId: String, authIds: String)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/api/2/v/contracts/${contractId}/settings/ebay/authorizations/${authIds}")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param productId 
   */
  def getExtendedTagsManufacturerV3(contractId: String, productId: String)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/api/v3/manufacturer/contracts/${contractId}/products/${productId}/extendedtags")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param feedId 
   * @param fileName 
   */
  def getFeedExportDeltaVendorV2(contractId: String, feedId: String, fileName: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/api/2/v/contracts/${contractId}/feeds/${feedId}/export/delta?fileName=$fileName")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param feedId 
   * @param fileName 
   */
  def getFeedExportVendorV2(contractId: String, feedId: String, fileName: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/api/2/v/contracts/${contractId}/feeds/${feedId}/export?fileName=$fileName")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   */
  def getImportSettingsVendorV2(contractId: String)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/api/2/v/contracts/${contractId}/settings/import")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   */
  def getManufacturerManufacturerV2(contractId: String)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/api/2/m/contracts/${contractId}")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param inputType 
   * @param identifiers 
   */
  def getMappingsVendorV2(contractId: String, inputType: String, identifiers: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/api/2/v/contracts/${contractId}/productidentifiermapping?inputType=$inputType&identifiers=$identifiers")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   */
  def getMonitoringSettingsManufacturerV3(contractId: String)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/api/v3/manufacturer/contracts/${contractId}/settings/monitoring")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   */
  def getMonitoringSettingsVendorV2(contractId: String)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/api/2/v/contracts/${contractId}/settings/monitoring")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   */
  def getMonitoringSettingsVendorV3(contractId: String)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/api/v3/vendor/contracts/${contractId}/settings/monitoring")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param contractType 
   */
  def getOfferRetentionSettingsManufacturerV3(contractId: String, contractType: String)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/api/v3/manufacturer/contracts/${contractId}/settings/offerretention?contractType=$contractType")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param contractType 
   */
  def getOfferRetentionSettingsVendorV3(contractId: String, contractType: String)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/api/v3/vendor/contracts/${contractId}/settings/offerretention?contractType=$contractType")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   */
  def getOrdersCountByPortalByContract(contractId: String)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/api/1/${contractId}/products/orderscountbyportal")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param start 
   * @param limit 
   */
  def getOrdersVendorV3(contractId: String, start: Int, limit: Int)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/api/v3/vendor/contracts/${contractId}/orders?start=$start&limit=$limit")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param session 
   * @param limit 
   * @param includeDeliveryCosts 
   * @param body This is a generated entry and needs to be described.
   */
  def getPriceCuttersManufacturerV2(contractId: String, session: OffsetDateTime, limit: Int, includeDeliveryCosts: Boolean, body: Option[Any] = None)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/api/2/m/contracts/${contractId}/result/pricecutters?session=$session&limit=$limit&includeDeliveryCosts=$includeDeliveryCosts")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .body(body)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param session 
   * @param limit 
   * @param includeDeliveryCosts 
   * @param body This is a generated entry and needs to be described.
   */
  def getPriceCuttersVendorV2(contractId: String, session: OffsetDateTime, limit: Int, includeDeliveryCosts: Boolean, body: Option[Any] = None)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/api/2/v/contracts/${contractId}/result/pricecutters?session=$session&limit=$limit&includeDeliveryCosts=$includeDeliveryCosts")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .body(body)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param startTime 
   * @param endTime 
   * @param maxPositions 
   */
  def getPriceRecommendationStatsVendorV2(contractId: String, startTime: OffsetDateTime, endTime: OffsetDateTime, maxPositions: Int)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/api/2/v/contracts/${contractId}/result/pricerecommendationstats?startTime=$startTime&endTime=$endTime&maxPositions=$maxPositions")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param body This is a generated entry and needs to be described.
   */
  def getProductFiltersByIDVendorV2(contractId: String, body: Option[Any] = None)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/api/2/v/contracts/${contractId}/offerfilters/:listType/products/query")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .body(body)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param start 
   * @param end 
   */
  def getProductMetricsByContract(contractId: String, start: OffsetDateTime, end: OffsetDateTime)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/api/1/${contractId}/products/articlescountbyportal?start=$start&end=$end")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : GetProductMonitoringStatusStatsVendorV3ApiResponse (Contains the monitoring status stats per domain)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   */
  def getProductMonitoringStatusStatsVendorV3(contractId: String)(implicit basicAuth: BasicCredentials): ApiRequestT[GetProductMonitoringStatusStatsVendorV3ApiResponse] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/api/v3/vendor/contracts/${contractId}/products/monitoringstatus/stats")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[GetProductMonitoringStatusStatsVendorV3ApiResponse])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param start 
   * @param end 
   * @param includeDeliveryCosts 
   * @param referencePriceDelta 
   */
  def getProductPriceViolationsManufacturerV2(contractId: String, start: OffsetDateTime, end: OffsetDateTime, includeDeliveryCosts: Boolean, referencePriceDelta: Double)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/api/2/m/contracts/${contractId}/result/priceviolations?start=$start&end=$end&includeDeliveryCosts=$includeDeliveryCosts&referencePriceDelta=$referencePriceDelta")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param start 
   * @param end 
   * @param includeDeliveryCosts 
   * @param referencePriceDelta 
   */
  def getProductPriceViolationsVendorV2(contractId: String, start: OffsetDateTime, end: OffsetDateTime, includeDeliveryCosts: Boolean, referencePriceDelta: Double)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/api/2/v/contracts/${contractId}/result/priceviolations?start=$start&end=$end&includeDeliveryCosts=$includeDeliveryCosts&referencePriceDelta=$referencePriceDelta")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   */
  def getRepricingStrategyVendorV2(contractId: String)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/api/2/v/contracts/${contractId}/settings/repricingstrategy")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : GetContractSettingsResponseV1 (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   */
  def getSettings(contractId: String)(implicit basicAuth: BasicCredentials): ApiRequestT[GetContractSettingsResponseV1] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/api/1/${contractId}/settings")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[GetContractSettingsResponseV1])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param portal 
   * @param until 
   */
  def getStats(contractId: String, portal: String, until: Option[OffsetDateTime] = None)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/api/1/${contractId}/products/analysis/pricerecommendations/stats/${portal}?until=$until")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param key 
   */
  def getTagValuesManufacturerV2(contractId: String, key: String)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/api/2/m/contracts/${contractId}/products/tags/${key}")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param key 
   */
  def getTagValuesVendorV2(contractId: String, key: String)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/api/2/v/contracts/${contractId}/products/tags/${key}")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   */
  def getTagsManufacturerV2(contractId: String)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/api/2/m/contracts/${contractId}/products/tags")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   */
  def getTagsVendorV2(contractId: String)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/api/2/v/contracts/${contractId}/products/tags")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param taskId 
   */
  def getTask(contractId: String, taskId: String)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/api/1/${contractId}/tasks/${taskId}")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param taskId 
   */
  def getTaskDataVendorV2(contractId: String, taskId: String)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/api/2/v/contracts/${contractId}/tasks/${taskId}/data")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param taskId 
   */
  def getTaskState(contractId: String, taskId: String)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/api/1/${contractId}/tasks/${taskId}/state")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param tasks 
   * @param attributes 
   * @param limit 
   * @param taskType 
   */
  def getTasks(contractId: String, tasks: String, attributes: String, limit: Int, taskType: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/api/1/${contractId}/tasks?tasks=$tasks&attributes=$attributes&limit=$limit&taskType=$taskType")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param sinceSeconds 
   */
  def getTasksStats(sinceSeconds: Int)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/controlpanel/api/tasks/stats?sinceSeconds=$sinceSeconds")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId 
   */
  def getTimeStamps(contractId: Long)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/api/1/${contractId}/products/analysis/timestamps")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param email 
   */
  def getUser(email: String)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/controlpanel/api/users/${email}")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param companyId 
   */
  def getUsers(companyId: Long)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/controlpanel/api/companies/${companyId}/users")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   */
  def getVendorSettingsV2VendorV2(contractId: String)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/api/2/v/contracts/${contractId}/settings/repricing")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   */
  def getVendorV3(contractId: String)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/api/v3/vendor/contracts/${contractId}")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   */
  def getVendorVendorV2(contractId: String)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/api/2/v/contracts/${contractId}")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : PostVendorsByDomainResponse (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param domain 
   * @param start 
   * @param includeDeliveryCosts 
   * @param session 
   * @param tagFilteredVendorsRequest This is a generated entry and needs to be described.
   */
  def getVendorsByDomainManufacturerV2(contractId: String, domain: String, start: Int, includeDeliveryCosts: Boolean, session: OffsetDateTime, tagFilteredVendorsRequest: Option[TagFilteredVendorsRequest] = None)(implicit basicAuth: BasicCredentials): ApiRequestT[PostVendorsByDomainResponse] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/api/2/m/contracts/${contractId}/result/vendors/list?domain=$domain&start=$start&includeDeliveryCosts=$includeDeliveryCosts&session=$session")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .body(tagFilteredVendorsRequest)
      .response(asJson[PostVendorsByDomainResponse])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param nameFilter 
   */
  def listVendors(nameFilter: String)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/controlpanel/vendors?nameFilter=$nameFilter")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param token 
   */
  def loginByAuthToken(token: String)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/api/login/token/${token}")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (Deauthenticate with the API and destroy the current session)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   */
  def logout()(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/logout")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param path The monitoring-pipeline path to be called
   */
  def monitoringPipelinePostRequestManufacturerV3(contractId: String, path: String)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/api/v3/manufacturer/contracts/${contractId}/monitoringpipeline/${path}")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param path The monitoring-pipeline path to be called
   */
  def monitoringPipelinePostRequestVendorV3(contractId: String, path: String)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/api/v3/vendor/contracts/${contractId}/monitoringpipeline/${path}")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param body This is a generated entry and needs to be described.
   */
  def monitoringPipelineUpsertSearchAttemptsManufacturerV3(contractId: String, body: Option[Any] = None)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/api/v3/manufacturer/contracts/${contractId}/monitoringpipeline/v1/searchattempts")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .body(body)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param body This is a generated entry and needs to be described.
   */
  def monitoringPipelineUpsertSearchAttemptsVendorV3(contractId: String, body: Option[Any] = None)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/api/v3/vendor/contracts/${contractId}/monitoringpipeline/v1/searchattempts")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .body(body)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param productId 
   * @param body This is a generated entry and needs to be described.
   */
  def patchProductManufacturerV3(contractId: String, productId: String, body: Option[Any] = None)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.PATCH, uri"$baseUrl/api/v3/manufacturer/contracts/${contractId}/products/${productId}")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .body(body)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param productId 
   * @param body This is a generated entry and needs to be described.
   */
  def patchProductVendorV3(contractId: String, productId: String, body: Option[Any] = None)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.PATCH, uri"$baseUrl/api/v3/vendor/contracts/${contractId}/products/${productId}")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .body(body)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param vendor 
   * @param day 
   * @param body This is a generated entry and needs to be described.
   */
  def positionDistribution(contractId: String, vendor: String, day: OffsetDateTime, body: Option[Any] = None)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/api/1/${contractId}/vendors/${vendor}/positions?day=$day")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .body(body)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param body This is a generated entry and needs to be described.
   */
  def postEbayAuthorizationVendorV2(contractId: String, body: Option[Any] = None)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/api/2/v/contracts/${contractId}/settings/ebay/authorizations")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .body(body)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param body This is a generated entry and needs to be described.
   */
  def postFeedVendorV2(contractId: String, body: Option[Any] = None)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/api/2/v/contracts/${contractId}/feeds")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .body(body)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   */
  def postLogMessage()(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/api/2/log/messages")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param body This is a generated entry and needs to be described.
   */
  def postMappingsVendorV2(contractId: String, body: Option[Any] = None)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/api/2/v/contracts/${contractId}/productidentifiermapping")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .body(body)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param body This is a generated entry and needs to be described.
   */
  def postOffersInABulkVendorV2(contractId: String, body: Option[Any] = None)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/api/2/v/contracts/${contractId}/offers")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .body(body)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param productId 
   * @param body This is a generated entry and needs to be described.
   */
  def postOffersVendorV2(contractId: String, productId: String, body: Option[Any] = None)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/api/2/v/contracts/${contractId}/offers/${productId}")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .body(body)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param body This is a generated entry and needs to be described.
   */
  def putCallbacksVendorV2(contractId: String, body: Option[Any] = None)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.PUT, uri"$baseUrl/api/2/v/contracts/${contractId}/settings/callbacks")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .body(body)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param body This is a generated entry and needs to be described.
   */
  def putCurrencyVendorV2(contractId: String, body: Option[Any] = None)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.PUT, uri"$baseUrl/api/2/v/contracts/${contractId}/settings/currency")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .body(body)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : PutCustomerContractSettingsApiResponse (Settings for this contract.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param customerContractSettings This is a generated entry and needs to be described.
   */
  def putCustomerContractSettingsManufacturerV3(contractId: String, customerContractSettings: Option[CustomerContractSettings] = None)(implicit basicAuth: BasicCredentials): ApiRequestT[PutCustomerContractSettingsApiResponse] =
    basicRequest
      .method(Method.PUT, uri"$baseUrl/api/v3/manufacturer/contracts/${contractId}/settings/customer")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .body(customerContractSettings)
      .response(asJson[PutCustomerContractSettingsApiResponse])

  /**
   * Expected answers:
   *   code 200 : PutCustomerContractSettingsApiResponse (Settings for this contract.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param customerContractSettings This is a generated entry and needs to be described.
   */
  def putCustomerContractSettingsVendorV3(contractId: String, customerContractSettings: Option[CustomerContractSettings] = None)(implicit basicAuth: BasicCredentials): ApiRequestT[PutCustomerContractSettingsApiResponse] =
    basicRequest
      .method(Method.PUT, uri"$baseUrl/api/v3/vendor/contracts/${contractId}/settings/customer")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .body(customerContractSettings)
      .response(asJson[PutCustomerContractSettingsApiResponse])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param body This is a generated entry and needs to be described.
   */
  def putDynamicMonitoringSettings(contractId: String, body: Option[Any] = None)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.PUT, uri"$baseUrl/api/1/${contractId}/settings/dynamicmonitoring")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .body(body)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param feedId 
   * @param body This is a generated entry and needs to be described.
   */
  def putFeedVendorV2(contractId: String, feedId: String, body: Option[Any] = None)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.PUT, uri"$baseUrl/api/2/v/contracts/${contractId}/feeds/${feedId}")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .body(body)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param body This is a generated entry and needs to be described.
   */
  def putImageTagManufacturerV2(contractId: String, body: Option[Any] = None)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.PUT, uri"$baseUrl/api/2/m/contracts/${contractId}/settings/imagetag")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .body(body)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param body This is a generated entry and needs to be described.
   */
  def putImageTagVendorV2(contractId: String, body: Option[Any] = None)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.PUT, uri"$baseUrl/api/2/v/contracts/${contractId}/settings/imagetag")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .body(body)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param body This is a generated entry and needs to be described.
   */
  def putImportSettingsVendorV2(contractId: String, body: Option[Any] = None)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.PUT, uri"$baseUrl/api/2/v/contracts/${contractId}/settings/import")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .body(body)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param body This is a generated entry and needs to be described.
   */
  def putMonitoringSettingsManufacturerV3(contractId: String, body: Option[Any] = None)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.PUT, uri"$baseUrl/api/v3/manufacturer/contracts/${contractId}/settings/monitoring")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .body(body)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param body This is a generated entry and needs to be described.
   */
  def putMonitoringSettingsVendorV2(contractId: String, body: Option[Any] = None)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.PUT, uri"$baseUrl/api/2/v/contracts/${contractId}/settings/monitoring")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .body(body)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param body This is a generated entry and needs to be described.
   */
  def putMonitoringSettingsVendorV3(contractId: String, body: Option[Any] = None)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.PUT, uri"$baseUrl/api/v3/vendor/contracts/${contractId}/settings/monitoring")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .body(body)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param contractType 
   * @param body This is a generated entry and needs to be described.
   */
  def putOfferRetentionSettingsManufacturerV3(contractId: String, contractType: String, body: Option[Any] = None)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.PUT, uri"$baseUrl/api/v3/manufacturer/contracts/${contractId}/settings/offerretention?contractType=$contractType")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .body(body)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param contractType 
   * @param body This is a generated entry and needs to be described.
   */
  def putOfferRetentionSettingsVendorV3(contractId: String, contractType: String, body: Option[Any] = None)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.PUT, uri"$baseUrl/api/v3/vendor/contracts/${contractId}/settings/offerretention?contractType=$contractType")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .body(body)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param body This is a generated entry and needs to be described.
   */
  def putProductsCSVManufacturerV2(contractId: String, body: Option[Any] = None)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.PUT, uri"$baseUrl/api/2/m/contracts/${contractId}/products/csv")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .body(body)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param body This is a generated entry and needs to be described.
   */
  def putProductsVendorV2(contractId: String, body: Option[Any] = None)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.PUT, uri"$baseUrl/api/2/v/contracts/${contractId}/products")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .body(body)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param body This is a generated entry and needs to be described.
   */
  def putRepricingStrategyVendorV2(contractId: String, body: Option[Any] = None)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.PUT, uri"$baseUrl/api/2/v/contracts/${contractId}/settings/repricingstrategy")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .body(body)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : PutAdminContractSettingsBody (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param putAdminContractSettingsBody This is a generated entry and needs to be described.
   */
  def putSettings(contractId: String, putAdminContractSettingsBody: Option[PutAdminContractSettingsBody] = None)(implicit basicAuth: BasicCredentials): ApiRequestT[PutAdminContractSettingsBody] =
    basicRequest
      .method(Method.PUT, uri"$baseUrl/api/1/${contractId}/settings")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .body(putAdminContractSettingsBody)
      .response(asJson[PutAdminContractSettingsBody])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param body This is a generated entry and needs to be described.
   */
  def putVendorSettingsVendorV2(contractId: String, body: Option[Any] = None)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.PUT, uri"$baseUrl/api/2/v/contracts/${contractId}/settings/repricing")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .body(body)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param body This is a generated entry and needs to be described.
   */
  def queryOffersManufacturerV3(contractId: String, body: Option[Any] = None)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/api/v3/manufacturer/contracts/${contractId}/offers/query")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .body(body)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param start 
   * @param limit 
   * @param since 
   * @param until 
   */
  def rawOffers(contractId: String, start: Int, limit: Int, since: Option[OffsetDateTime] = None, until: Option[OffsetDateTime] = None)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/api/1/${contractId}/products/offers?start=$start&limit=$limit&since=$since&until=$until")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param companyId 
   * @param userId 
   */
  def removeUser(companyId: Long, userId: Long)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.DELETE, uri"$baseUrl/controlpanel/api/companies/${companyId}/users/${userId}")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param body This is a generated entry and needs to be described.
   */
  def saveIncludeDeliveryCosts(contractId: String, body: Option[Any] = None)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/api/1/${contractId}/settings/include_delivery_costs")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .body(body)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param body This is a generated entry and needs to be described.
   */
  def saveSales(contractId: String, body: Option[Any] = None)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/api/1/${contractId}/products/sales")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .body(body)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param path The scheduler path to be called
   */
  def schedulerDeleteRequestManufacturerV3(contractId: String, path: String)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.DELETE, uri"$baseUrl/api/v3/manufacturer/contracts/${contractId}/scheduler/${path}")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param path The scheduler path to be called
   */
  def schedulerDeleteRequestVendorV3(contractId: String, path: String)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.DELETE, uri"$baseUrl/api/v3/vendor/contracts/${contractId}/scheduler/${path}")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param path The scheduler path to be called
   */
  def schedulerGetRequestManufacturerV3(contractId: String, path: String)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/api/v3/manufacturer/contracts/${contractId}/scheduler/${path}")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param path The scheduler path to be called
   */
  def schedulerGetRequestVendorV3(contractId: String, path: String)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/api/v3/vendor/contracts/${contractId}/scheduler/${path}")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param path The scheduler path to be called
   */
  def schedulerPostRequestManufacturerV3(contractId: String, path: String)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/api/v3/manufacturer/contracts/${contractId}/scheduler/${path}")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param path The scheduler path to be called
   */
  def schedulerPostRequestVendorV3(contractId: String, path: String)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/api/v3/vendor/contracts/${contractId}/scheduler/${path}")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param path The scheduler path to be called
   */
  def schedulerPutRequestManufacturerV3(contractId: String, path: String)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.PUT, uri"$baseUrl/api/v3/manufacturer/contracts/${contractId}/scheduler/${path}")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param path The scheduler path to be called
   */
  def schedulerPutRequestVendorV3(contractId: String, path: String)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.PUT, uri"$baseUrl/api/v3/vendor/contracts/${contractId}/scheduler/${path}")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param body This is a generated entry and needs to be described.
   */
  def segmentOffersManufacturerV2(contractId: String, body: Option[Any] = None)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/api/2/m/contracts/${contractId}/result/offersegmentation")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .body(body)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param body This is a generated entry and needs to be described.
   */
  def segmentOffersVendorV2(contractId: String, body: Option[Any] = None)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/api/2/v/contracts/${contractId}/result/offersegmentation")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .body(body)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param path The shop-integration path to be called
   */
  def shopIntegrationGetRequest(contractId: String, path: String)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/api/2/v/contracts/${contractId}/shop-integration/${path}")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param path The shop-integration path to be called
   */
  def shopIntegrationPostRequest(contractId: String, path: String)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/api/2/v/contracts/${contractId}/shop-integration/${path}")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param path 
   * @param body This is a generated entry and needs to be described.
   */
  def shopIntegrationPostRequestVendorV2(contractId: String, path: String, body: Option[Any] = None)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/api/2/v/contracts/${contractId}/products/import?path=$path")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .body(body)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param limit 
   */
  def timestampsManufacturerV2(contractId: String, limit: Int)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/api/2/m/contracts/${contractId}/result/timestamps?limit=$limit")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param alertId 
   * @param body This is a generated entry and needs to be described.
   */
  def updateAlertSettings(contractId: String, alertId: String, body: Option[Any] = None)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.PUT, uri"$baseUrl/api/1/${contractId}/settings/alerts/${alertId}")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .body(body)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param email 
   * @param token 
   * @param body This is a generated entry and needs to be described.
   */
  def updateAuthToken(email: String, token: String, body: Option[Any] = None)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.PUT, uri"$baseUrl/controlpanel/users/${email}/authtokens/${token}")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .body(body)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param taskId 
   * @param body This is a generated entry and needs to be described.
   */
  def updateTaskVendorV2(contractId: String, taskId: String, body: Option[Any] = None)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.PUT, uri"$baseUrl/api/2/v/contracts/${contractId}/tasks/${taskId}")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .body(body)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param userId 
   * @param roleName 
   * @param body This is a generated entry and needs to be described.
   */
  def updateUserRole(userId: Long, roleName: String, body: Option[Any] = None)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.PUT, uri"$baseUrl/api/2/users/${userId}/role/${roleName}")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .body(body)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param body This is a generated entry and needs to be described.
   */
  def validateOffersManufacturerV2(contractId: String, body: Option[Any] = None)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/api/2/m/contracts/${contractId}/result/validation")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .body(body)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param body This is a generated entry and needs to be described.
   */
  def validateOffersVendorV2(contractId: String, body: Option[Any] = None)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/api/2/v/contracts/${contractId}/result/validation")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .body(body)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param vendor 
   * @param minPrice 
   * @param maxPrice 
   */
  def vendorData(vendor: String, minPrice: Double, maxPrice: Double)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/controlpanel/vendorexport/${vendor}?minPrice=$minPrice&maxPrice=$maxPrice")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param session 
   * @param tagFilteredVendorsRequest This is a generated entry and needs to be described.
   */
  def vendorsPerDomainManufacturerV2(contractId: String, session: OffsetDateTime, tagFilteredVendorsRequest: Option[TagFilteredVendorsRequest] = None)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/api/2/m/contracts/${contractId}/result/vendors/domaindistribution?session=$session")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .body(tagFilteredVendorsRequest)
      .response(asJson[Any])

}

