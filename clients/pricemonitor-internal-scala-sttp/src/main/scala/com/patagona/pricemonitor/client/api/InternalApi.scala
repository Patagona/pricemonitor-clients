/**
 * Pricemonitor API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.5583
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.patagona.pricemonitor.client.api

import com.patagona.pricemonitor.client.model.AdminCompanyV2
import com.patagona.pricemonitor.client.model.AndOfferFilter
import com.patagona.pricemonitor.client.model.ApiError
import com.patagona.pricemonitor.client.model.ApiErrorResponse
import com.patagona.pricemonitor.client.model.ContractStats
import com.patagona.pricemonitor.client.model.CreateTaskBodyV2
import com.patagona.pricemonitor.client.model.CustomerContractSettings
import com.patagona.pricemonitor.client.model.GenericTask
import com.patagona.pricemonitor.client.model.GenericTaskWithUrl
import com.patagona.pricemonitor.client.model.GetContractSettingsResponseV1
import com.patagona.pricemonitor.client.model.GetCustomerContractSettingsApiResponse
import com.patagona.pricemonitor.client.model.GetManufacturerV3ApiResponse
import com.patagona.pricemonitor.client.model.GetMonitoringSchedulesApiResponse
import com.patagona.pricemonitor.client.model.GetProductMonitoringStatusStatsVendorV3ApiResponse
import com.patagona.pricemonitor.client.model.OfferFilterApiResponse
import java.time.OffsetDateTime
import com.patagona.pricemonitor.client.model.PostMonitoringScheduleRequestV3
import com.patagona.pricemonitor.client.model.PostNewPasswordRequest
import com.patagona.pricemonitor.client.model.PostOfferStatisticsApiResponse
import com.patagona.pricemonitor.client.model.PostOfferStatisticsRequest
import com.patagona.pricemonitor.client.model.PostVendorsByDomainResponse
import com.patagona.pricemonitor.client.model.PriceRecommendationApiQueryV2
import com.patagona.pricemonitor.client.model.PricesByDayByProductIdRequestV2
import com.patagona.pricemonitor.client.model.PricesByDayByProductIdResponseV2
import com.patagona.pricemonitor.client.model.PutAdminContractSettingsBody
import com.patagona.pricemonitor.client.model.PutCustomerContractSettingsApiResponse
import com.patagona.pricemonitor.client.model.PutResetPasswordRequest
import com.patagona.pricemonitor.client.model.QueryOffersOfShopRequestV3
import com.patagona.pricemonitor.client.model.QueryOffersOfShopV3ApiResponse
import com.patagona.pricemonitor.client.model.QueryPriceRecommendationsV2ApiResponse
import com.patagona.pricemonitor.client.model.QueryProductsByFilterManufacturerV3ApiResponse
import com.patagona.pricemonitor.client.model.QueryProductsByFilterVendorV3ApiResponse
import com.patagona.pricemonitor.client.model.QueryProductsRequestV3
import com.patagona.pricemonitor.client.model.TagFilteredVendorsRequest
import com.patagona.pricemonitor.client.model.UpdateTaskRequestV2
import com.patagona.pricemonitor.client.model.VersionApiResponse
import com.patagona.pricemonitor.client.core._
import alias._
import sttp.client._
import sttp.model.Method

object InternalApi {

  def apply(baseUrl: String = "https://api.patagona.de")(implicit serializer: SttpSerializer) = new InternalApi(baseUrl)
}

class InternalApi(baseUrl: String)(implicit serializer: SttpSerializer) {

  import Helpers._
  import serializer._

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   */
  def addCompany()(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/controlpanel/api/companies")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param id 
   * @param email 
   * @param body This is a generated entry and needs to be described.
   */
  def addCompanyUser(id: Int, email: String, body: Option[Any] = None)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.PUT, uri"$baseUrl/controlpanel/companies/${id}/users/${email}")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .body(body)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 :  (A new user was added)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   */
  def addUser()(implicit basicAuth: BasicCredentials): ApiRequestT[Unit] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/controlpanel/users")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Unit])

  /**
   * Get all offers of a shop. Please note that it might return offers for inactive products.
   * 
   * Expected answers:
   *   code 200 : QueryOffersOfShopV3ApiResponse (Returns offers of the shop)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param queryOffersOfShopRequestV3 
   */
  def apiV3ManufacturerContractsContractIdOffersShopQueryPost(contractId: String, queryOffersOfShopRequestV3: QueryOffersOfShopRequestV3)(implicit basicAuth: BasicCredentials): ApiRequestT[QueryOffersOfShopV3ApiResponse] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/api/v3/manufacturer/contracts/${contractId}/offers/shop/query")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .body(queryOffersOfShopRequestV3)
      .response(asJson[QueryOffersOfShopV3ApiResponse])

  /**
   * This operation is used to get offer statistics (e.g. offer count, average price) grouped by product and domain. Warning: This endpoint contains complex query structure and will be replaced in the future. Please note that offer statistics can only be computed for at maximum 2500 products at a time.
   * 
   * Expected answers:
   *   code 200 : PostOfferStatisticsApiResponse (Returns a list of offer statistics per product.)
   *   code 400 : ApiError (Returned in case of unparsable request body JSON or unsupported filter.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param postOfferStatisticsRequest 
   */
  def apiV3ManufacturerContractsContractIdOffersStatsQueryPost(contractId: String, postOfferStatisticsRequest: PostOfferStatisticsRequest)(implicit basicAuth: BasicCredentials): ApiRequestT[PostOfferStatisticsApiResponse] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/api/v3/manufacturer/contracts/${contractId}/offers/stats/query")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .body(postOfferStatisticsRequest)
      .response(asJson[PostOfferStatisticsApiResponse])

  /**
   * Get all offers of a shop. Please note that it might return offers for inactive products.
   * 
   * Expected answers:
   *   code 200 : QueryOffersOfShopV3ApiResponse (Returns offers of the shop)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param queryOffersOfShopRequestV3 
   */
  def apiV3VendorContractsContractIdOffersShopQueryPost(contractId: String, queryOffersOfShopRequestV3: QueryOffersOfShopRequestV3)(implicit basicAuth: BasicCredentials): ApiRequestT[QueryOffersOfShopV3ApiResponse] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/api/v3/vendor/contracts/${contractId}/offers/shop/query")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .body(queryOffersOfShopRequestV3)
      .response(asJson[QueryOffersOfShopV3ApiResponse])

  /**
   * This operation is used to get offer statistics (e.g. offer count, average price) grouped by product and domain. Warning: This endpoint contains complex query structure and will be replaced in the future. Please note that offer statistics can only be computed for at maximum 2500 products at a time.
   * 
   * Expected answers:
   *   code 200 : PostOfferStatisticsApiResponse (Returns a list of offer statistics per product.)
   *   code 400 : ApiError (Returned in case of unparsable request body JSON or unsupported filter.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param postOfferStatisticsRequest 
   */
  def apiV3VendorContractsContractIdOffersStatsQueryPost(contractId: String, postOfferStatisticsRequest: PostOfferStatisticsRequest)(implicit basicAuth: BasicCredentials): ApiRequestT[PostOfferStatisticsApiResponse] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/api/v3/vendor/contracts/${contractId}/offers/stats/query")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .body(postOfferStatisticsRequest)
      .response(asJson[PostOfferStatisticsApiResponse])

  /**
   * Expected answers:
   *   code 200 : AdminCompanyV2 (A list of companies was loaded)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param start Start of the pagination
   * @param limit Number of elements per page
   */
  def controlpanelApiCompaniesGet(start: Int, limit: Int)(implicit basicAuth: BasicCredentials): ApiRequestT[AdminCompanyV2] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/controlpanel/api/companies")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[AdminCompanyV2])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param body This is a generated entry and needs to be described.
   */
  def createAlertSettings(contractId: String, body: Option[Any] = None)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/api/1/${contractId}/settings/alerts")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .body(body)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param email 
   * @param body This is a generated entry and needs to be described.
   */
  def createAuthToken(email: String, body: Option[Any] = None)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/controlpanel/users/${email}/authtokens")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .body(body)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param body This is a generated entry and needs to be described.
   */
  def createTask(contractId: String, body: Option[Any] = None)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/api/1/${contractId}/tasks")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .body(body)
      .response(asJson[Any])

  /**
   * Create a new task
   * 
   * Expected answers:
   *   code 200 : GenericTaskWithUrl (The new task was successfully created)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param createTaskBodyV2 This is a generated entry and needs to be described.
   */
  def createTaskManufacturerV2(contractId: String, createTaskBodyV2: Option[CreateTaskBodyV2] = None)(implicit basicAuth: BasicCredentials): ApiRequestT[GenericTaskWithUrl] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/api/2/m/contracts/${contractId}/tasks")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .body(createTaskBodyV2)
      .response(asJson[GenericTaskWithUrl])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param body This is a generated entry and needs to be described.
   */
  def createTaskVendorV2(contractId: String, body: Option[Any] = None)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/api/2/v/contracts/${contractId}/tasks")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .body(body)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param alertId 
   */
  def deleteAlertSettings(contractId: String, alertId: String)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.DELETE, uri"$baseUrl/api/1/${contractId}/settings/alerts/${alertId}")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param email 
   * @param token 
   */
  def deleteAuthToken(email: String, token: String)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.DELETE, uri"$baseUrl/controlpanel/users/${email}/authtokens/${token}")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   */
  def deleteCallbackSettingsManufacturerV2(contractId: String)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.DELETE, uri"$baseUrl/api/2/m/contracts/${contractId}/settings/callbacks")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   */
  def deleteCallbackSettingsVendorV2(contractId: String)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.DELETE, uri"$baseUrl/api/2/v/contracts/${contractId}/settings/callbacks")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   */
  def deleteContractVendorV2(contractId: String)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.DELETE, uri"$baseUrl/api/2/v/contracts/${contractId}")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   */
  def deleteDynamicMonitoringSettings(contractId: String)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.DELETE, uri"$baseUrl/api/1/${contractId}/settings/dynamicmonitoring")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param feedId 
   */
  def deleteFeedVendorV2(contractId: String, feedId: String)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.DELETE, uri"$baseUrl/api/2/v/contracts/${contractId}/feeds/${feedId}")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   */
  def deleteImportSettingsVendorV2(contractId: String)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.DELETE, uri"$baseUrl/api/2/v/contracts/${contractId}/settings/import")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (Monitoring schedule has been deleted successfully.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param scheduleId ID of a monitoring schedule
   */
  def deleteMonitoringScheduleManufacturerV3(contractId: String, scheduleId: Int)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.DELETE, uri"$baseUrl/api/v3/manufacturer/contracts/${contractId}/settings/monitoringschedules/${scheduleId}")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (Monitoring schedule has been deleted successfully.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param scheduleId ID of a monitoring schedule
   */
  def deleteMonitoringScheduleVendorV3(contractId: String, scheduleId: Int)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.DELETE, uri"$baseUrl/api/v3/vendor/contracts/${contractId}/settings/monitoringschedules/${scheduleId}")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param updatedMax 
   */
  def deleteProductsManufacturerV3(contractId: String, updatedMax: Option[OffsetDateTime] = None)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.DELETE, uri"$baseUrl/api/v3/manufacturer/contracts/${contractId}/products?updatedMax=$updatedMax")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   */
  def deleteRepricingStrategyVendorV2(contractId: String)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.DELETE, uri"$baseUrl/api/2/v/contracts/${contractId}/settings/repricingstrategy")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param userId 
   * @param roleName 
   */
  def deleteUserRole(userId: Long, roleName: String)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.DELETE, uri"$baseUrl/api/2/users/${userId}/role/${roleName}")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (Monitoring task was successfully created and is executing)
   *   code 404 : ApiErrorResponse (Couldn't find any monitoring schedules for given schedule id. No monitoring task was created)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param scheduleId ID of a monitoring schedule
   */
  def executeMonitoringScheduleManufacturerV3(contractId: String, scheduleId: Int)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/api/v3/manufacturer/contracts/${contractId}/settings/monitoringschedules/${scheduleId}/execute")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (Monitoring task was successfully created and is executing)
   *   code 404 : ApiErrorResponse (Couldn't find any monitoring schedules for given schedule id. No monitoring task was created)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param scheduleId ID of a monitoring schedule
   */
  def executeMonitoringScheduleVendorV3(contractId: String, scheduleId: Int)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/api/v3/vendor/contracts/${contractId}/settings/monitoringschedules/${scheduleId}/execute")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   */
  def getActiveEbayTokenVendorV2(contractId: String)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/api/2/v/contracts/${contractId}/settings/ebay/token")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   */
  def getAlertSettings(contractId: String)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/api/1/${contractId}/settings/alerts")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 :  (A list of contracts was loaded)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   */
  def getAllContracts()(implicit basicAuth: BasicCredentials): ApiRequestT[Unit] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/controlpanel/api/contracts")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Unit])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param start 
   * @param limit 
   */
  def getAllEbayAuthorizationsVendorV2(contractId: String, start: Int, limit: Int)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/api/2/v/contracts/${contractId}/settings/ebay/authorizations?start=$start&limit=$limit")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param start 
   * @param limit 
   */
  def getAllEbayTokensVendorV2(contractId: String, start: Int, limit: Int)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/api/2/v/contracts/${contractId}/settings/ebay/tokens?start=$start&limit=$limit")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 :  (A list of portals was loaded)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   */
  def getAllPortals()(implicit basicAuth: BasicCredentials): ApiRequestT[Unit] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/controlpanel/api/portals")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Unit])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId 
   * @param taskId 
   * @param taskType 
   * @param taskState 
   * @param limit 
   * @param minCreationDate 
   * @param maxCreationDate 
   */
  def getAllTasks(contractId: Seq[String], taskId: Seq[String], taskType: Seq[String], taskState: Seq[String], limit: Int, minCreationDate: Option[OffsetDateTime] = None, maxCreationDate: Option[OffsetDateTime] = None)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/controlpanel/api/tasks?contractId=$contractId&taskId=$taskId&taskType=$taskType&taskState=$taskState&minCreationDate=$minCreationDate&maxCreationDate=$maxCreationDate&limit=$limit")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 :  (A list of users was loaded)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   */
  def getAllUsers()(implicit basicAuth: BasicCredentials): ApiRequestT[Unit] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/controlpanel/api/users")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Unit])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   */
  def getCallbacksVendorV2(contractId: String)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/api/2/v/contracts/${contractId}/settings/callbacks")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param session 
   * @param includeDeliveryCosts 
   * @param tagFilteredVendorsRequest This is a generated entry and needs to be described.
   */
  def getCheapestVendorsManufacturerV2(contractId: String, session: OffsetDateTime, includeDeliveryCosts: Boolean, tagFilteredVendorsRequest: Option[TagFilteredVendorsRequest] = None)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/api/2/m/contracts/${contractId}/result/vendors/cheapest?session=$session&includeDeliveryCosts=$includeDeliveryCosts")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .body(tagFilteredVendorsRequest)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param companyId 
   */
  def getCompany(companyId: Long)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/controlpanel/api/companies/${companyId}")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : OfferFilterApiResponse (List of the filters to ignore the individual offers.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param listType 
   */
  def getComplexOfferFiltersVendorV2(contractId: String, listType: String)(implicit basicAuth: BasicCredentials): ApiRequestT[OfferFilterApiResponse] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/api/2/v/contracts/${contractId}/offerfilters/${listType}/complex")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[OfferFilterApiResponse])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param maxCreationDate 
   * @param minExpirationDate 
   */
  def getContractsVendorV2(maxCreationDate: Option[OffsetDateTime] = None, minExpirationDate: Option[OffsetDateTime] = None)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/api/2/v/contracts?maxCreationDate=$maxCreationDate&minExpirationDate=$minExpirationDate")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   */
  def getCurrencyVendorV2(contractId: String)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/api/2/v/contracts/${contractId}/settings/currency")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : GetCustomerContractSettingsApiResponse (Settings for this contract.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   */
  def getCustomerContractSettingsManufaturerV3(contractId: String)(implicit basicAuth: BasicCredentials): ApiRequestT[GetCustomerContractSettingsApiResponse] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/api/v3/manufacturer/contracts/${contractId}/settings/customer")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[GetCustomerContractSettingsApiResponse])

  /**
   * Expected answers:
   *   code 200 : GetCustomerContractSettingsApiResponse (Settings for this contract.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   */
  def getCustomerContractSettingsVendorV3(contractId: String)(implicit basicAuth: BasicCredentials): ApiRequestT[GetCustomerContractSettingsApiResponse] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/api/v3/vendor/contracts/${contractId}/settings/customer")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[GetCustomerContractSettingsApiResponse])

  /**
   * Expected answers:
   *   code 200 : Any (A list of configured domains is returned.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   */
  def getDomainsVendorV2(contractId: String)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/api/2/v/contracts/${contractId}/settings/domains")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   */
  def getDynamicMonitoringSettings(contractId: String)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/api/1/${contractId}/settings/dynamicmonitoring")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param authIds 
   */
  def getEbayAuthorizationsVendorV2(contractId: String, authIds: String)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/api/2/v/contracts/${contractId}/settings/ebay/authorizations/${authIds}")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param productId 
   */
  def getExtendedTagsManufacturerV3(contractId: String, productId: String)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/api/v3/manufacturer/contracts/${contractId}/products/${productId}/extendedtags")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param feedId 
   * @param fileName 
   */
  def getFeedExportDeltaVendorV2(contractId: String, feedId: String, fileName: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/api/2/v/contracts/${contractId}/feeds/${feedId}/export/delta?fileName=$fileName")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param feedId 
   * @param fileName 
   */
  def getFeedExportVendorV2(contractId: String, feedId: String, fileName: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/api/2/v/contracts/${contractId}/feeds/${feedId}/export?fileName=$fileName")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   */
  def getImportSettingsVendorV2(contractId: String)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/api/2/v/contracts/${contractId}/settings/import")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   */
  def getManufacturerManufacturerV2(contractId: String)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/api/2/m/contracts/${contractId}")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : GetManufacturerV3ApiResponse (Contract Information)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   */
  def getManufacturerV3(contractId: String)(implicit basicAuth: BasicCredentials): ApiRequestT[GetManufacturerV3ApiResponse] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/api/v3/manufacturer/contracts/${contractId}")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[GetManufacturerV3ApiResponse])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param inputType 
   * @param identifiers 
   */
  def getMappingsVendorV2(contractId: String, inputType: String, identifiers: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/api/2/v/contracts/${contractId}/productidentifiermapping?inputType=$inputType&identifiers=$identifiers")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : GetMonitoringSchedulesApiResponse (List of monitoring schedules.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   */
  def getMonitoringSchedulesManufacturerV3(contractId: String)(implicit basicAuth: BasicCredentials): ApiRequestT[GetMonitoringSchedulesApiResponse] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/api/v3/manufacturer/contracts/${contractId}/settings/monitoringschedules")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[GetMonitoringSchedulesApiResponse])

  /**
   * Expected answers:
   *   code 200 : GetMonitoringSchedulesApiResponse (List of monitoring schedules.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   */
  def getMonitoringSchedulesVendorV3(contractId: String)(implicit basicAuth: BasicCredentials): ApiRequestT[GetMonitoringSchedulesApiResponse] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/api/v3/vendor/contracts/${contractId}/settings/monitoringschedules")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[GetMonitoringSchedulesApiResponse])

  /**
   * Get the current monitoring settings for a given contract
   * 
   * Expected answers:
   *   code 200 : Any (The current monitoring settings object)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   */
  def getMonitoringSettingsManufacturerV2(contractId: String)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/api/2/m/contracts/${contractId}/settings/monitoring")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   */
  def getMonitoringSettingsManufacturerV3(contractId: String)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/api/v3/manufacturer/contracts/${contractId}/settings/monitoring")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   */
  def getMonitoringSettingsVendorV2(contractId: String)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/api/2/v/contracts/${contractId}/settings/monitoring")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   */
  def getMonitoringSettingsVendorV3(contractId: String)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/api/v3/vendor/contracts/${contractId}/settings/monitoring")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (List of the filters to ignore the individual offers. Offers are filtered against vendor name either for all the domain or for a specific domain.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param listType 
   */
  def getOfferFiltersVendorV2(contractId: String, listType: String)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/api/2/v/contracts/${contractId}/offerfilters/${listType}/vendors")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param contractType 
   */
  def getOfferRetentionSettingsManufacturerV3(contractId: String, contractType: String)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/api/v3/manufacturer/contracts/${contractId}/settings/offerretention?contractType=$contractType")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param contractType 
   */
  def getOfferRetentionSettingsVendorV3(contractId: String, contractType: String)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/api/v3/vendor/contracts/${contractId}/settings/offerretention?contractType=$contractType")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   */
  def getOrdersCountByPortalByContract(contractId: String)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/api/1/${contractId}/products/orderscountbyportal")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param start 
   * @param limit 
   */
  def getOrdersVendorV3(contractId: String, start: Int, limit: Int)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/api/v3/vendor/contracts/${contractId}/orders?start=$start&limit=$limit")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param session 
   * @param limit 
   * @param includeDeliveryCosts 
   * @param body This is a generated entry and needs to be described.
   */
  def getPriceCuttersManufacturerV2(contractId: String, session: OffsetDateTime, limit: Int, includeDeliveryCosts: Boolean, body: Option[Any] = None)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/api/2/m/contracts/${contractId}/result/pricecutters?session=$session&limit=$limit&includeDeliveryCosts=$includeDeliveryCosts")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .body(body)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param session 
   * @param limit 
   * @param includeDeliveryCosts 
   * @param body This is a generated entry and needs to be described.
   */
  def getPriceCuttersVendorV2(contractId: String, session: OffsetDateTime, limit: Int, includeDeliveryCosts: Boolean, body: Option[Any] = None)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/api/2/v/contracts/${contractId}/result/pricecutters?session=$session&limit=$limit&includeDeliveryCosts=$includeDeliveryCosts")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .body(body)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param startTime 
   * @param endTime 
   * @param maxPositions 
   */
  def getPriceRecommendationStatsVendorV2(contractId: String, startTime: OffsetDateTime, endTime: OffsetDateTime, maxPositions: Int)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/api/2/v/contracts/${contractId}/result/pricerecommendationstats?startTime=$startTime&endTime=$endTime&maxPositions=$maxPositions")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param body This is a generated entry and needs to be described.
   */
  def getProductFiltersByIDVendorV2(contractId: String, body: Option[Any] = None)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/api/2/v/contracts/${contractId}/offerfilters/:listType/products/query")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .body(body)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (List of the filters per product to ignore the individual offers.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param listType 
   * @param start 
   * @param limit 
   */
  def getProductFiltersByRangeVendorV2(contractId: String, listType: String, start: Int, limit: Int)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/api/2/v/contracts/${contractId}/offerfilters/${listType}/products?start=$start&limit=$limit")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : OfferFilterApiResponse (List of the filters to ignore the individual offers.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param listType 
   * @param productId 
   */
  def getProductFiltersVendorV2(contractId: String, listType: String, productId: String)(implicit basicAuth: BasicCredentials): ApiRequestT[OfferFilterApiResponse] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/api/2/v/contracts/${contractId}/offerfilters/${listType}/products/${productId}")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[OfferFilterApiResponse])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param start 
   * @param end 
   */
  def getProductMetricsByContract(contractId: String, start: OffsetDateTime, end: OffsetDateTime)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/api/1/${contractId}/products/articlescountbyportal?start=$start&end=$end")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : GetProductMonitoringStatusStatsVendorV3ApiResponse (Contains the monitoring status stats per domain)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   */
  def getProductMonitoringStatusStatsVendorV3(contractId: String)(implicit basicAuth: BasicCredentials): ApiRequestT[GetProductMonitoringStatusStatsVendorV3ApiResponse] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/api/v3/vendor/contracts/${contractId}/products/monitoringstatus/stats")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[GetProductMonitoringStatusStatsVendorV3ApiResponse])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param start 
   * @param end 
   * @param includeDeliveryCosts 
   * @param referencePriceDelta 
   */
  def getProductPriceViolationsManufacturerV2(contractId: String, start: OffsetDateTime, end: OffsetDateTime, includeDeliveryCosts: Boolean, referencePriceDelta: Double)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/api/2/m/contracts/${contractId}/result/priceviolations?start=$start&end=$end&includeDeliveryCosts=$includeDeliveryCosts&referencePriceDelta=$referencePriceDelta")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param start 
   * @param end 
   * @param includeDeliveryCosts 
   * @param referencePriceDelta 
   */
  def getProductPriceViolationsVendorV2(contractId: String, start: OffsetDateTime, end: OffsetDateTime, includeDeliveryCosts: Boolean, referencePriceDelta: Double)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/api/2/v/contracts/${contractId}/result/priceviolations?start=$start&end=$end&includeDeliveryCosts=$includeDeliveryCosts&referencePriceDelta=$referencePriceDelta")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   */
  def getRepricingStrategyVendorV2(contractId: String)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/api/2/v/contracts/${contractId}/settings/repricingstrategy")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : GetContractSettingsResponseV1 (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   */
  def getSettings(contractId: String)(implicit basicAuth: BasicCredentials): ApiRequestT[GetContractSettingsResponseV1] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/api/1/${contractId}/settings")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[GetContractSettingsResponseV1])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param portal 
   * @param until 
   */
  def getStats(contractId: String, portal: String, until: Option[OffsetDateTime] = None)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/api/1/${contractId}/products/analysis/pricerecommendations/stats/${portal}?until=$until")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param key 
   */
  def getTagValuesManufacturerV2(contractId: String, key: String)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/api/2/m/contracts/${contractId}/products/tags/${key}")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param key 
   */
  def getTagValuesVendorV2(contractId: String, key: String)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/api/2/v/contracts/${contractId}/products/tags/${key}")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   */
  def getTagsManufacturerV2(contractId: String)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/api/2/m/contracts/${contractId}/products/tags")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   */
  def getTagsVendorV2(contractId: String)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/api/2/v/contracts/${contractId}/products/tags")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param taskId 
   */
  def getTask(contractId: String, taskId: String)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/api/1/${contractId}/tasks/${taskId}")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (The payload data of the requested task is returned)
   *   code 404 :  (The task with the given ID could not be found)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param taskId 
   */
  def getTaskDataManufacturerV2(contractId: String, taskId: String)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/api/2/m/contracts/${contractId}/tasks/${taskId}/data")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param taskId 
   */
  def getTaskDataVendorV2(contractId: String, taskId: String)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/api/2/v/contracts/${contractId}/tasks/${taskId}/data")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Get the task designated by the taskId parameter
   * 
   * Expected answers:
   *   code 200 : GenericTask (The task was found and is returned)
   *   code 404 :  (No task with given taskId was found)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param taskId 
   */
  def getTaskManufacturerV2(contractId: String, taskId: String)(implicit basicAuth: BasicCredentials): ApiRequestT[GenericTask] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/api/2/m/contracts/${contractId}/tasks/${taskId}")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[GenericTask])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param taskId 
   */
  def getTaskState(contractId: String, taskId: String)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/api/1/${contractId}/tasks/${taskId}/state")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param tasks 
   * @param attributes 
   * @param limit 
   * @param taskType 
   */
  def getTasks(contractId: String, tasks: String, attributes: String, limit: Int, taskType: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/api/1/${contractId}/tasks?tasks=$tasks&attributes=$attributes&limit=$limit&taskType=$taskType")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Returns a list of task objects for the given contract
   * 
   * Expected answers:
   *   code 200 : Seq[GenericTask] (The list of tasks for the given contract)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param taskTypeFilter A list of task types to filter for
   * @param taskState A list of task states to filter for
   * @param limit The maximum number of tasks returned
   * @param includeFailures Include failed tasks
   * @param taskIdsFilter Comma separated list of task IDs to filter for
   * @param minCreationDate Ignore all tasks created earlier than this date (ISO 8601)
   * @param maxCreationDate Ignore all tasks created later than this date (ISO 8601)
   */
  def getTasksManufacturerV2(contractId: String, taskTypeFilter: Seq[String], taskState: Seq[String], limit: Int, includeFailures: Boolean, taskIdsFilter: Option[String] = None, minCreationDate: Option[OffsetDateTime] = None, maxCreationDate: Option[OffsetDateTime] = None)(implicit basicAuth: BasicCredentials): ApiRequestT[Seq[GenericTask]] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/api/2/m/contracts/${contractId}/tasks?taskIdsFilter=$taskIdsFilter&taskTypeFilter=$taskTypeFilter&taskState=$taskState&minCreationDate=$minCreationDate&maxCreationDate=$maxCreationDate&limit=$limit&includeFailures=$includeFailures")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Seq[GenericTask]])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param sinceSeconds 
   */
  def getTasksStats(sinceSeconds: Int)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/controlpanel/api/tasks/stats?sinceSeconds=$sinceSeconds")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId 
   */
  def getTimeStamps(contractId: Long)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/api/1/${contractId}/products/analysis/timestamps")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param email 
   */
  def getUser(email: String)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/controlpanel/api/users/${email}")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param companyId 
   */
  def getUsers(companyId: Long)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/controlpanel/api/companies/${companyId}/users")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   */
  def getVendorSettingsV2VendorV2(contractId: String)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/api/2/v/contracts/${contractId}/settings/repricing")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   */
  def getVendorV3(contractId: String)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/api/v3/vendor/contracts/${contractId}")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   */
  def getVendorVendorV2(contractId: String)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/api/2/v/contracts/${contractId}")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : PostVendorsByDomainResponse (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param domain 
   * @param start 
   * @param includeDeliveryCosts 
   * @param session 
   * @param tagFilteredVendorsRequest This is a generated entry and needs to be described.
   */
  def getVendorsByDomainManufacturerV2(contractId: String, domain: String, start: Int, includeDeliveryCosts: Boolean, session: OffsetDateTime, tagFilteredVendorsRequest: Option[TagFilteredVendorsRequest] = None)(implicit basicAuth: BasicCredentials): ApiRequestT[PostVendorsByDomainResponse] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/api/2/m/contracts/${contractId}/result/vendors/list?domain=$domain&start=$start&includeDeliveryCosts=$includeDeliveryCosts&session=$session")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .body(tagFilteredVendorsRequest)
      .response(asJson[PostVendorsByDomainResponse])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param nameFilter 
   */
  def listVendors(nameFilter: String)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/controlpanel/vendors?nameFilter=$nameFilter")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param token 
   */
  def loginByAuthToken(token: String)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/api/login/token/${token}")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param path The monitoring-pipeline path to be called
   */
  def monitoringPipelinePostRequestManufacturerV3(contractId: String, path: String)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/api/v3/manufacturer/contracts/${contractId}/monitoringpipeline/${path}")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param path The monitoring-pipeline path to be called
   */
  def monitoringPipelinePostRequestVendorV3(contractId: String, path: String)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/api/v3/vendor/contracts/${contractId}/monitoringpipeline/${path}")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param body This is a generated entry and needs to be described.
   */
  def monitoringPipelineUpsertSearchAttemptsManufacturerV3(contractId: String, body: Option[Any] = None)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/api/v3/manufacturer/contracts/${contractId}/monitoringpipeline/v1/searchattempts")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .body(body)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param body This is a generated entry and needs to be described.
   */
  def monitoringPipelineUpsertSearchAttemptsVendorV3(contractId: String, body: Option[Any] = None)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/api/v3/vendor/contracts/${contractId}/monitoringpipeline/v1/searchattempts")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .body(body)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param productId 
   * @param body This is a generated entry and needs to be described.
   */
  def patchProductManufacturerV3(contractId: String, productId: String, body: Option[Any] = None)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.PATCH, uri"$baseUrl/api/v3/manufacturer/contracts/${contractId}/products/${productId}")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .body(body)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param productId 
   * @param body This is a generated entry and needs to be described.
   */
  def patchProductVendorV3(contractId: String, productId: String, body: Option[Any] = None)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.PATCH, uri"$baseUrl/api/v3/vendor/contracts/${contractId}/products/${productId}")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .body(body)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param vendor 
   * @param day 
   * @param body This is a generated entry and needs to be described.
   */
  def positionDistribution(contractId: String, vendor: String, day: OffsetDateTime, body: Option[Any] = None)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/api/1/${contractId}/vendors/${vendor}/positions?day=$day")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .body(body)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param body This is a generated entry and needs to be described.
   */
  def postEbayAuthorizationVendorV2(contractId: String, body: Option[Any] = None)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/api/2/v/contracts/${contractId}/settings/ebay/authorizations")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .body(body)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param body This is a generated entry and needs to be described.
   */
  def postFeedVendorV2(contractId: String, body: Option[Any] = None)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/api/2/v/contracts/${contractId}/feeds")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .body(body)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param body This is a generated entry and needs to be described.
   */
  def postMappingsVendorV2(contractId: String, body: Option[Any] = None)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/api/2/v/contracts/${contractId}/productidentifiermapping")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .body(body)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (Monitoring schedule has been created successfully.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param postMonitoringScheduleRequestV3 Request body for creating monitoring schedule.
   */
  def postMonitoringScheduleManufacturerV3(contractId: String, postMonitoringScheduleRequestV3: Option[PostMonitoringScheduleRequestV3] = None)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/api/v3/manufacturer/contracts/${contractId}/settings/monitoringschedules")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .body(postMonitoringScheduleRequestV3)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (Monitoring schedule has been created successfully.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param postMonitoringScheduleRequestV3 Request body for creating monitoring schedule.
   */
  def postMonitoringScheduleVendorV3(contractId: String, postMonitoringScheduleRequestV3: Option[PostMonitoringScheduleRequestV3] = None)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/api/v3/vendor/contracts/${contractId}/settings/monitoringschedules")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .body(postMonitoringScheduleRequestV3)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param body This is a generated entry and needs to be described.
   */
  def postOffersInABulkVendorV2(contractId: String, body: Option[Any] = None)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/api/2/v/contracts/${contractId}/offers")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .body(body)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param productId 
   * @param body This is a generated entry and needs to be described.
   */
  def postOffersVendorV2(contractId: String, productId: String, body: Option[Any] = None)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/api/2/v/contracts/${contractId}/offers/${productId}")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .body(body)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Seq[PricesByDayByProductIdResponseV2] (The list of all known prices for the queried day & product ID)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param productId The product ID to filter for
   * @param pricesByDayByProductIdRequestV2 Query all known prices for a given day & product ID. Can be filtered by using the selectors.
   */
  def pricesByDayByProductIdManufacturerV2(contractId: String, productId: String, pricesByDayByProductIdRequestV2: Option[PricesByDayByProductIdRequestV2] = None)(implicit basicAuth: BasicCredentials): ApiRequestT[Seq[PricesByDayByProductIdResponseV2]] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/api/2/m/contracts/${contractId}/result/pricesbyday/productid/${productId}")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .body(pricesByDayByProductIdRequestV2)
      .response(asJson[Seq[PricesByDayByProductIdResponseV2]])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param body This is a generated entry and needs to be described.
   */
  def putCallbacksVendorV2(contractId: String, body: Option[Any] = None)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.PUT, uri"$baseUrl/api/2/v/contracts/${contractId}/settings/callbacks")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .body(body)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : OfferFilterApiResponse (List of the filters that have been sent as the request body.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param listType 
   * @param andOfferFilter List of the filter that needs to be considered to ignore the individual offers.
   */
  def putComplexOfferFiltersVendorV2(contractId: String, listType: String, andOfferFilter: Seq[AndOfferFilter])(implicit basicAuth: BasicCredentials): ApiRequestT[OfferFilterApiResponse] =
    basicRequest
      .method(Method.PUT, uri"$baseUrl/api/2/v/contracts/${contractId}/offerfilters/${listType}/complex")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .body(andOfferFilter)
      .response(asJson[OfferFilterApiResponse])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param body This is a generated entry and needs to be described.
   */
  def putCurrencyVendorV2(contractId: String, body: Option[Any] = None)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.PUT, uri"$baseUrl/api/2/v/contracts/${contractId}/settings/currency")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .body(body)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : PutCustomerContractSettingsApiResponse (Settings for this contract.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param customerContractSettings This is a generated entry and needs to be described.
   */
  def putCustomerContractSettingsManufacturerV3(contractId: String, customerContractSettings: Option[CustomerContractSettings] = None)(implicit basicAuth: BasicCredentials): ApiRequestT[PutCustomerContractSettingsApiResponse] =
    basicRequest
      .method(Method.PUT, uri"$baseUrl/api/v3/manufacturer/contracts/${contractId}/settings/customer")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .body(customerContractSettings)
      .response(asJson[PutCustomerContractSettingsApiResponse])

  /**
   * Expected answers:
   *   code 200 : PutCustomerContractSettingsApiResponse (Settings for this contract.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param customerContractSettings This is a generated entry and needs to be described.
   */
  def putCustomerContractSettingsVendorV3(contractId: String, customerContractSettings: Option[CustomerContractSettings] = None)(implicit basicAuth: BasicCredentials): ApiRequestT[PutCustomerContractSettingsApiResponse] =
    basicRequest
      .method(Method.PUT, uri"$baseUrl/api/v3/vendor/contracts/${contractId}/settings/customer")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .body(customerContractSettings)
      .response(asJson[PutCustomerContractSettingsApiResponse])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param body This is a generated entry and needs to be described.
   */
  def putDynamicMonitoringSettings(contractId: String, body: Option[Any] = None)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.PUT, uri"$baseUrl/api/1/${contractId}/settings/dynamicmonitoring")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .body(body)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param feedId 
   * @param body This is a generated entry and needs to be described.
   */
  def putFeedVendorV2(contractId: String, feedId: String, body: Option[Any] = None)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.PUT, uri"$baseUrl/api/2/v/contracts/${contractId}/feeds/${feedId}")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .body(body)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param body This is a generated entry and needs to be described.
   */
  def putImageTagManufacturerV2(contractId: String, body: Option[Any] = None)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.PUT, uri"$baseUrl/api/2/m/contracts/${contractId}/settings/imagetag")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .body(body)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param body This is a generated entry and needs to be described.
   */
  def putImageTagVendorV2(contractId: String, body: Option[Any] = None)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.PUT, uri"$baseUrl/api/2/v/contracts/${contractId}/settings/imagetag")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .body(body)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param body This is a generated entry and needs to be described.
   */
  def putImportSettingsVendorV2(contractId: String, body: Option[Any] = None)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.PUT, uri"$baseUrl/api/2/v/contracts/${contractId}/settings/import")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .body(body)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (Monitoring schedule has been updated successfully.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param scheduleId ID of a monitoring schedule
   * @param postMonitoringScheduleRequestV3 Request body for updating monitoring schedule.
   */
  def putMonitoringScheduleManufacturerV3(contractId: String, scheduleId: Int, postMonitoringScheduleRequestV3: Option[PostMonitoringScheduleRequestV3] = None)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.PUT, uri"$baseUrl/api/v3/manufacturer/contracts/${contractId}/settings/monitoringschedules/${scheduleId}")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .body(postMonitoringScheduleRequestV3)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (Monitoring schedule has been updated successfully.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param scheduleId ID of a monitoring schedule
   * @param postMonitoringScheduleRequestV3 Request body for updating monitoring schedule.
   */
  def putMonitoringScheduleVendorV3(contractId: String, scheduleId: Int, postMonitoringScheduleRequestV3: Option[PostMonitoringScheduleRequestV3] = None)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.PUT, uri"$baseUrl/api/v3/vendor/contracts/${contractId}/settings/monitoringschedules/${scheduleId}")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .body(postMonitoringScheduleRequestV3)
      .response(asJson[Any])

  /**
   * Update the monitoring settings for a given contract
   * 
   * Expected answers:
   *   code 200 : Any (Returns the successfully updated monitoring settings object)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param body The monitoring settings object to be written to the database
   */
  def putMonitoringSettingsManufacturerV2(contractId: String, body: Option[Any] = None)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.PUT, uri"$baseUrl/api/2/m/contracts/${contractId}/settings/monitoring")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .body(body)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param body This is a generated entry and needs to be described.
   */
  def putMonitoringSettingsManufacturerV3(contractId: String, body: Option[Any] = None)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.PUT, uri"$baseUrl/api/v3/manufacturer/contracts/${contractId}/settings/monitoring")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .body(body)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param body This is a generated entry and needs to be described.
   */
  def putMonitoringSettingsVendorV2(contractId: String, body: Option[Any] = None)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.PUT, uri"$baseUrl/api/2/v/contracts/${contractId}/settings/monitoring")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .body(body)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param body This is a generated entry and needs to be described.
   */
  def putMonitoringSettingsVendorV3(contractId: String, body: Option[Any] = None)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.PUT, uri"$baseUrl/api/v3/vendor/contracts/${contractId}/settings/monitoring")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .body(body)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (List of the filters that have been sent as the request body.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param listType 
   * @param body List of the filters that needs to be considered to ignore the individual offers.
   */
  def putOfferFiltersVendorV2(contractId: String, listType: String, body: Option[Any] = None)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.PUT, uri"$baseUrl/api/2/v/contracts/${contractId}/offerfilters/${listType}/vendors")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .body(body)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param contractType 
   * @param body This is a generated entry and needs to be described.
   */
  def putOfferRetentionSettingsManufacturerV3(contractId: String, contractType: String, body: Option[Any] = None)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.PUT, uri"$baseUrl/api/v3/manufacturer/contracts/${contractId}/settings/offerretention?contractType=$contractType")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .body(body)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param contractType 
   * @param body This is a generated entry and needs to be described.
   */
  def putOfferRetentionSettingsVendorV3(contractId: String, contractType: String, body: Option[Any] = None)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.PUT, uri"$baseUrl/api/v3/vendor/contracts/${contractId}/settings/offerretention?contractType=$contractType")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .body(body)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : OfferFilterApiResponse (List of the filters that have been sent as the request body.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param listType 
   * @param productId 
   * @param andOfferFilter List of the filter that needs to be considered to ignore the individual offers.
   */
  def putProductFiltersVendorV2(contractId: String, listType: String, productId: String, andOfferFilter: Seq[AndOfferFilter])(implicit basicAuth: BasicCredentials): ApiRequestT[OfferFilterApiResponse] =
    basicRequest
      .method(Method.PUT, uri"$baseUrl/api/2/v/contracts/${contractId}/offerfilters/${listType}/products/${productId}")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .body(andOfferFilter)
      .response(asJson[OfferFilterApiResponse])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param body This is a generated entry and needs to be described.
   */
  def putProductsCSVManufacturerV2(contractId: String, body: Option[Any] = None)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.PUT, uri"$baseUrl/api/2/m/contracts/${contractId}/products/csv")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .body(body)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param body This is a generated entry and needs to be described.
   */
  def putProductsVendorV2(contractId: String, body: Option[Any] = None)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.PUT, uri"$baseUrl/api/2/v/contracts/${contractId}/products")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .body(body)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param body This is a generated entry and needs to be described.
   */
  def putRepricingStrategyVendorV2(contractId: String, body: Option[Any] = None)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.PUT, uri"$baseUrl/api/2/v/contracts/${contractId}/settings/repricingstrategy")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .body(body)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : PutAdminContractSettingsBody (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param putAdminContractSettingsBody This is a generated entry and needs to be described.
   */
  def putSettings(contractId: String, putAdminContractSettingsBody: Option[PutAdminContractSettingsBody] = None)(implicit basicAuth: BasicCredentials): ApiRequestT[PutAdminContractSettingsBody] =
    basicRequest
      .method(Method.PUT, uri"$baseUrl/api/1/${contractId}/settings")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .body(putAdminContractSettingsBody)
      .response(asJson[PutAdminContractSettingsBody])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param body This is a generated entry and needs to be described.
   */
  def putVendorSettingsVendorV2(contractId: String, body: Option[Any] = None)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.PUT, uri"$baseUrl/api/2/v/contracts/${contractId}/settings/repricing")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .body(body)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param body This is a generated entry and needs to be described.
   */
  def queryOffersManufacturerV3(contractId: String, body: Option[Any] = None)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/api/v3/manufacturer/contracts/${contractId}/offers/query")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .body(body)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : QueryPriceRecommendationsV2ApiResponse (A paginated list of price recommendations is returned for the specified timerange. <br> Only the newest price recommendations are returned in case of multiple price recommendations per product. )
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param priceRecommendationApiQueryV2 The request body specifies which price recommendations will be searched for.
   */
  def queryPriceRecommendationsVendorV2(contractId: String, priceRecommendationApiQueryV2: Option[PriceRecommendationApiQueryV2] = None)(implicit basicAuth: BasicCredentials): ApiRequestT[QueryPriceRecommendationsV2ApiResponse] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/api/2/v/contracts/${contractId}/result/pricerecommendations/query")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .body(priceRecommendationApiQueryV2)
      .response(asJson[QueryPriceRecommendationsV2ApiResponse])

  /**
   * Expected answers:
   *   code 200 : QueryProductsByFilterManufacturerV3ApiResponse (Returns a list of found products.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param queryProductsRequestV3 The body contains the products query.
   */
  def queryProductsByFilterManufacturerV3(contractId: String, queryProductsRequestV3: Option[QueryProductsRequestV3] = None)(implicit basicAuth: BasicCredentials): ApiRequestT[QueryProductsByFilterManufacturerV3ApiResponse] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/api/v3/manufacturer/contracts/${contractId}/products/query")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .body(queryProductsRequestV3)
      .response(asJson[QueryProductsByFilterManufacturerV3ApiResponse])

  /**
   * Expected answers:
   *   code 200 : QueryProductsByFilterVendorV3ApiResponse (Returns a list of found products.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param queryProductsRequestV3 The body contains the products query.
   */
  def queryProductsByFilterVendorV3(contractId: String, queryProductsRequestV3: Option[QueryProductsRequestV3] = None)(implicit basicAuth: BasicCredentials): ApiRequestT[QueryProductsByFilterVendorV3ApiResponse] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/api/v3/vendor/contracts/${contractId}/products/query")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .body(queryProductsRequestV3)
      .response(asJson[QueryProductsByFilterVendorV3ApiResponse])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param start 
   * @param limit 
   * @param since 
   * @param until 
   */
  def rawOffers(contractId: String, start: Int, limit: Int, since: Option[OffsetDateTime] = None, until: Option[OffsetDateTime] = None)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/api/1/${contractId}/products/offers?start=$start&limit=$limit&since=$since&until=$until")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param companyId 
   * @param userId 
   */
  def removeUser(companyId: Long, userId: Long)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.DELETE, uri"$baseUrl/controlpanel/api/companies/${companyId}/users/${userId}")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : String (Successful response upon password request)
   *   code 400 : ApiErrorResponse (Invalid request body is specified)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param postNewPasswordRequest Request a new password.
   */
  def requestNewPassword(postNewPasswordRequest: Option[PostNewPasswordRequest] = None)(implicit basicAuth: BasicCredentials): ApiRequestT[String] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/api/account/password/reset")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .body(postNewPasswordRequest)
      .response(asJson[String])

  /**
   * Expected answers:
   *   code 200 : String (Password changed successfully.)
   *   code 400 : String (Password didn't change successfully.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param putResetPasswordRequest Reset a password
   */
  def resetPassword(putResetPasswordRequest: Option[PutResetPasswordRequest] = None)(implicit basicAuth: BasicCredentials): ApiRequestT[String] =
    basicRequest
      .method(Method.PUT, uri"$baseUrl/api/account/password/reset")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .body(putResetPasswordRequest)
      .response(asJson[String])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param body This is a generated entry and needs to be described.
   */
  def saveIncludeDeliveryCosts(contractId: String, body: Option[Any] = None)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/api/1/${contractId}/settings/include_delivery_costs")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .body(body)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param body This is a generated entry and needs to be described.
   */
  def saveSales(contractId: String, body: Option[Any] = None)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/api/1/${contractId}/products/sales")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .body(body)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param path The scheduler path to be called
   */
  def schedulerDeleteRequestManufacturerV3(contractId: String, path: String)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.DELETE, uri"$baseUrl/api/v3/manufacturer/contracts/${contractId}/scheduler/${path}")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param path The scheduler path to be called
   */
  def schedulerDeleteRequestVendorV3(contractId: String, path: String)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.DELETE, uri"$baseUrl/api/v3/vendor/contracts/${contractId}/scheduler/${path}")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param path The scheduler path to be called
   */
  def schedulerGetRequestManufacturerV3(contractId: String, path: String)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/api/v3/manufacturer/contracts/${contractId}/scheduler/${path}")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param path The scheduler path to be called
   */
  def schedulerGetRequestVendorV3(contractId: String, path: String)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/api/v3/vendor/contracts/${contractId}/scheduler/${path}")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param path The scheduler path to be called
   */
  def schedulerPostRequestManufacturerV3(contractId: String, path: String)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/api/v3/manufacturer/contracts/${contractId}/scheduler/${path}")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param path The scheduler path to be called
   */
  def schedulerPostRequestVendorV3(contractId: String, path: String)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/api/v3/vendor/contracts/${contractId}/scheduler/${path}")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param path The scheduler path to be called
   */
  def schedulerPutRequestManufacturerV3(contractId: String, path: String)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.PUT, uri"$baseUrl/api/v3/manufacturer/contracts/${contractId}/scheduler/${path}")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param path The scheduler path to be called
   */
  def schedulerPutRequestVendorV3(contractId: String, path: String)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.PUT, uri"$baseUrl/api/v3/vendor/contracts/${contractId}/scheduler/${path}")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param body This is a generated entry and needs to be described.
   */
  def segmentOffersManufacturerV2(contractId: String, body: Option[Any] = None)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/api/2/m/contracts/${contractId}/result/offersegmentation")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .body(body)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param body This is a generated entry and needs to be described.
   */
  def segmentOffersVendorV2(contractId: String, body: Option[Any] = None)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/api/2/v/contracts/${contractId}/result/offersegmentation")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .body(body)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param path The shop-integration path to be called
   */
  def shopIntegrationGetRequest(contractId: String, path: String)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/api/2/v/contracts/${contractId}/shop-integration/${path}")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param path The shop-integration path to be called
   */
  def shopIntegrationPostRequest(contractId: String, path: String)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/api/2/v/contracts/${contractId}/shop-integration/${path}")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param path 
   * @param body This is a generated entry and needs to be described.
   */
  def shopIntegrationPostRequestVendorV2(contractId: String, path: String, body: Option[Any] = None)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/api/2/v/contracts/${contractId}/products/import?path=$path")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .body(body)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : ContractStats (Get the contract statistics: product count, vendor count, found offers count (filters applied), active portals count, found offers count (no filters applied))
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param session A ISO 8601 timestamp which marks the end of a 48h time range in which the data is collected
   */
  def statsManufacturerV2(contractId: String, session: OffsetDateTime)(implicit basicAuth: BasicCredentials): ApiRequestT[ContractStats] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/api/2/m/contracts/${contractId}/result/contract/stats?session=$session")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[ContractStats])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param limit 
   */
  def timestampsManufacturerV2(contractId: String, limit: Int)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/api/2/m/contracts/${contractId}/result/timestamps?limit=$limit")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param alertId 
   * @param body This is a generated entry and needs to be described.
   */
  def updateAlertSettings(contractId: String, alertId: String, body: Option[Any] = None)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.PUT, uri"$baseUrl/api/1/${contractId}/settings/alerts/${alertId}")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .body(body)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param email 
   * @param token 
   * @param body This is a generated entry and needs to be described.
   */
  def updateAuthToken(email: String, token: String, body: Option[Any] = None)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.PUT, uri"$baseUrl/controlpanel/users/${email}/authtokens/${token}")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .body(body)
      .response(asJson[Any])

  /**
   * Update an existing task
   * 
   * Expected answers:
   *   code 200 : GenericTask (The task was successfully updated and the given data is returned)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param taskId 
   * @param updateTaskRequestV2 The new task object to be written to the database
   */
  def updateTaskManufacturerV2(contractId: String, taskId: String, updateTaskRequestV2: Option[UpdateTaskRequestV2] = None)(implicit basicAuth: BasicCredentials): ApiRequestT[GenericTask] =
    basicRequest
      .method(Method.PUT, uri"$baseUrl/api/2/m/contracts/${contractId}/tasks/${taskId}")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .body(updateTaskRequestV2)
      .response(asJson[GenericTask])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param taskId 
   * @param body This is a generated entry and needs to be described.
   */
  def updateTaskVendorV2(contractId: String, taskId: String, body: Option[Any] = None)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.PUT, uri"$baseUrl/api/2/v/contracts/${contractId}/tasks/${taskId}")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .body(body)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param userId 
   * @param roleName 
   * @param body This is a generated entry and needs to be described.
   */
  def updateUserRole(userId: Long, roleName: String, body: Option[Any] = None)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.PUT, uri"$baseUrl/api/2/users/${userId}/role/${roleName}")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .body(body)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param body This is a generated entry and needs to be described.
   */
  def validateOffersManufacturerV2(contractId: String, body: Option[Any] = None)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/api/2/m/contracts/${contractId}/result/validation")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .body(body)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param body This is a generated entry and needs to be described.
   */
  def validateOffersVendorV2(contractId: String, body: Option[Any] = None)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/api/2/v/contracts/${contractId}/result/validation")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .body(body)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param vendor 
   * @param minPrice 
   * @param maxPrice 
   */
  def vendorData(vendor: String, minPrice: Double, maxPrice: Double)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/controlpanel/vendorexport/${vendor}?minPrice=$minPrice&maxPrice=$maxPrice")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param session 
   * @param tagFilteredVendorsRequest This is a generated entry and needs to be described.
   */
  def vendorsPerDomainManufacturerV2(contractId: String, session: OffsetDateTime, tagFilteredVendorsRequest: Option[TagFilteredVendorsRequest] = None)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/api/2/m/contracts/${contractId}/result/vendors/domaindistribution?session=$session")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .body(tagFilteredVendorsRequest)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : VersionApiResponse (Current application version.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   */
  def version()(implicit basicAuth: BasicCredentials): ApiRequestT[VersionApiResponse] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/version")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[VersionApiResponse])

}

