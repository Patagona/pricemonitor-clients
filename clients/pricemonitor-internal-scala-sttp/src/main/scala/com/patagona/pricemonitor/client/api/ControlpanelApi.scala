/**
 * Omnia 2.0 API The Omnia 2.0 API is RESTful and provides access to the backend of Omnia 2.0 and Pricemonitor. It is used to manage products, offers, contracts, and more.  This API supports both public endpoints for customer integration and internal endpoints for platform management. All endpoints are authenticated using either Basic Authentication or JWT Bearer tokens.
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.7308
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.patagona.pricemonitor.client.api

import com.patagona.pricemonitor.client.model.AdminCompanyV2
import com.patagona.pricemonitor.client.model.ApiErrorResponse
import com.patagona.pricemonitor.client.model.CreateFeatureFlagApiResponse
import com.patagona.pricemonitor.client.model.EmptyApiResponse
import com.patagona.pricemonitor.client.model.GetAllFeatureFlagsApiResponse
import com.patagona.pricemonitor.client.model.GetFeatureFlagByKeyApiResponse
import com.patagona.pricemonitor.client.model.NewUser
import java.time.OffsetDateTime
import com.patagona.pricemonitor.client.model.PostAdminAddDomainBodyV3
import com.patagona.pricemonitor.client.model.PostAdminAddDomainV3ApiResponse
import com.patagona.pricemonitor.client.model.PostFeatureFlagRequest
import com.patagona.pricemonitor.client.model.PutAdminDomainRequestV3
import com.patagona.pricemonitor.client.model.PutAdminDomainResponseV3ApiResponse
import com.patagona.pricemonitor.client.model.PutFeatureFlagRequest
import com.patagona.pricemonitor.client.model.UpdateFeatureFlagApiResponse
import com.patagona.pricemonitor.client.model.VersionApiResponse
import com.patagona.pricemonitor.client.core._
import alias._
import sttp.client._
import sttp.model.Method

object ControlpanelApi {

  def apply(baseUrl: String = "https://api.patagona.de")(implicit serializer: SttpSerializer) = new ControlpanelApi(baseUrl)
}

class ControlpanelApi(baseUrl: String)(implicit serializer: SttpSerializer) {

  import Helpers._
  import serializer._

  /**
   * Add a company.
   * 
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   *   BearerAuth (http)
   */
  def addCompany()(implicit basicAuth: Option[BasicCredentials], bearerToken: Option[BearerToken]): ApiRequestT[Any] =
{
    var r = basicRequest
      .method(Method.POST, uri"$baseUrl/controlpanel/api/companies")
      .contentType("application/json")
      basicAuth.foreach(b => r = r.auth.basic(b.user, b.password))
      bearerToken.foreach(b => r = r.auth.bearer(b.token))
      r.response(asJson[Any])
}

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   *   BearerAuth (http)
   * 
   * @param id 
   * @param email 
   * @param body This is a generated entry and needs to be described.
   */
  def addCompanyUser(id: Int, email: String, body: Option[Any] = None)(implicit basicAuth: Option[BasicCredentials], bearerToken: Option[BearerToken]): ApiRequestT[Any] =
{
    var r = basicRequest
      .method(Method.PUT, uri"$baseUrl/controlpanel/companies/${id}/users/${email}")
      .contentType("application/json")
      basicAuth.foreach(b => r = r.auth.basic(b.user, b.password))
      bearerToken.foreach(b => r = r.auth.bearer(b.token))
      r=r.body(body)
      r.response(asJson[Any])
}

  /**
   * Expected answers:
   *   code 200 :  (A new user was added)
   *   code 400 :  (A new user was not added)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   *   BearerAuth (http)
   * 
   * @param newUser The new user to be added
   */
  def addUser(newUser: Option[NewUser] = None)(implicit basicAuth: Option[BasicCredentials], bearerToken: Option[BearerToken]): ApiRequestT[Unit] =
{
    var r = basicRequest
      .method(Method.POST, uri"$baseUrl/controlpanel/users")
      .contentType("application/json")
      basicAuth.foreach(b => r = r.auth.basic(b.user, b.password))
      bearerToken.foreach(b => r = r.auth.bearer(b.token))
      r=r.body(newUser)
      r.response(asJson[Unit])
}

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   *   BearerAuth (http)
   * 
   * @param email 
   * @param body This is a generated entry and needs to be described.
   */
  def createAuthToken(email: String, body: Option[Any] = None)(implicit basicAuth: Option[BasicCredentials], bearerToken: Option[BearerToken]): ApiRequestT[Any] =
{
    var r = basicRequest
      .method(Method.POST, uri"$baseUrl/controlpanel/users/${email}/authtokens")
      .contentType("application/json")
      basicAuth.foreach(b => r = r.auth.basic(b.user, b.password))
      bearerToken.foreach(b => r = r.auth.bearer(b.token))
      r=r.body(body)
      r.response(asJson[Any])
}

  /**
   * **ðŸ”’ INTERNAL:** Creates a new feature flag in the system.  Feature flags must have a unique key that follows the pattern `[a-zA-Z0-9._-]+` and cannot exceed 128 characters in length. 
   * 
   * Expected answers:
   *   code 200 : CreateFeatureFlagApiResponse (Feature flag created successfully)
   *   code 400 : ApiErrorResponse (Request validation failed. Common reasons include: - Invalid flag key format (must be alphanumeric, dot, underscore, or dash) - Flag key already exists - Flag name is empty or too long - Description exceeds maximum length )
   * 
   * Available security schemes:
   *   BasicAuth (http)
   *   BearerAuth (http)
   * 
   * @param postFeatureFlagRequest The feature flag to be created
   */
  def createFeatureFlag(postFeatureFlagRequest: PostFeatureFlagRequest)(implicit basicAuth: Option[BasicCredentials], bearerToken: Option[BearerToken]): ApiRequestT[CreateFeatureFlagApiResponse] =
{
    var r = basicRequest
      .method(Method.POST, uri"$baseUrl/controlpanel/api/feature-flags")
      .contentType("application/json")
      basicAuth.foreach(b => r = r.auth.basic(b.user, b.password))
      bearerToken.foreach(b => r = r.auth.bearer(b.token))
      r=r.body(postFeatureFlagRequest)
      r.response(asJson[CreateFeatureFlagApiResponse])
}

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   *   BearerAuth (http)
   * 
   * @param email 
   * @param token 
   */
  def deleteAuthToken(email: String, token: String)(implicit basicAuth: Option[BasicCredentials], bearerToken: Option[BearerToken]): ApiRequestT[Any] =
{
    var r = basicRequest
      .method(Method.DELETE, uri"$baseUrl/controlpanel/users/${email}/authtokens/${token}")
      .contentType("application/json")
      basicAuth.foreach(b => r = r.auth.basic(b.user, b.password))
      bearerToken.foreach(b => r = r.auth.bearer(b.token))
      r.response(asJson[Any])
}

  /**
   * **ðŸ”’ INTERNAL:** Deletes a feature flag from the system (soft delete).  The feature flag is marked as deleted but preserved in the database for audit purposes. Once deleted, the flag key becomes unavailable for new flags. 
   * 
   * Expected answers:
   *   code 200 : EmptyApiResponse (Feature flag deleted successfully)
   *   code 404 : ApiErrorResponse (Feature flag with the specified key was not found)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   *   BearerAuth (http)
   * 
   * @param key Feature flag key identifier
   */
  def deleteFeatureFlag(key: String)(implicit basicAuth: Option[BasicCredentials], bearerToken: Option[BearerToken]): ApiRequestT[EmptyApiResponse] =
{
    var r = basicRequest
      .method(Method.DELETE, uri"$baseUrl/controlpanel/api/feature-flags/${key}")
      .contentType("application/json")
      basicAuth.foreach(b => r = r.auth.basic(b.user, b.password))
      bearerToken.foreach(b => r = r.auth.bearer(b.token))
      r.response(asJson[EmptyApiResponse])
}

  /**
   * Expected answers:
   *   code 200 : Seq[AdminCompanyV2] (A list of companies was loaded)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   *   BearerAuth (http)
   * 
   * @param start Start of the pagination
   * @param limit Number of elements per page
   */
  def getAllCompanies(start: Option[Int] = None, limit: Option[Int] = None)(implicit basicAuth: Option[BasicCredentials], bearerToken: Option[BearerToken]): ApiRequestT[Seq[AdminCompanyV2]] =
{
    var r = basicRequest
      .method(Method.GET, uri"$baseUrl/controlpanel/api/companies?start=$start&limit=$limit")
      .contentType("application/json")
      basicAuth.foreach(b => r = r.auth.basic(b.user, b.password))
      bearerToken.foreach(b => r = r.auth.bearer(b.token))
      r.response(asJson[Seq[AdminCompanyV2]])
}

  /**
   * Expected answers:
   *   code 200 :  (A list of contracts was loaded)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   *   BearerAuth (http)
   */
  def getAllContracts()(implicit basicAuth: Option[BasicCredentials], bearerToken: Option[BearerToken]): ApiRequestT[Unit] =
{
    var r = basicRequest
      .method(Method.GET, uri"$baseUrl/controlpanel/api/contracts")
      .contentType("application/json")
      basicAuth.foreach(b => r = r.auth.basic(b.user, b.password))
      bearerToken.foreach(b => r = r.auth.bearer(b.token))
      r.response(asJson[Unit])
}

  /**
   * **ðŸ”’ INTERNAL:** Retrieves a list of all feature flags configured in the system.  Feature flags are used to control the availability of application features and can be managed through the control panel interface. 
   * 
   * Expected answers:
   *   code 200 : GetAllFeatureFlagsApiResponse (List of all feature flags)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   *   BearerAuth (http)
   */
  def getAllFeatureFlags()(implicit basicAuth: Option[BasicCredentials], bearerToken: Option[BearerToken]): ApiRequestT[GetAllFeatureFlagsApiResponse] =
{
    var r = basicRequest
      .method(Method.GET, uri"$baseUrl/controlpanel/api/feature-flags")
      .contentType("application/json")
      basicAuth.foreach(b => r = r.auth.basic(b.user, b.password))
      bearerToken.foreach(b => r = r.auth.bearer(b.token))
      r.response(asJson[GetAllFeatureFlagsApiResponse])
}

  /**
   * Expected answers:
   *   code 200 :  (A list of portals was loaded)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   *   BearerAuth (http)
   */
  def getAllPortals()(implicit basicAuth: Option[BasicCredentials], bearerToken: Option[BearerToken]): ApiRequestT[Unit] =
{
    var r = basicRequest
      .method(Method.GET, uri"$baseUrl/controlpanel/api/portals")
      .contentType("application/json")
      basicAuth.foreach(b => r = r.auth.basic(b.user, b.password))
      bearerToken.foreach(b => r = r.auth.bearer(b.token))
      r.response(asJson[Unit])
}

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   *   BearerAuth (http)
   * 
   * @param contractId 
   * @param taskId 
   * @param taskType 
   * @param taskState 
   * @param limit 
   * @param minCreationDate 
   * @param maxCreationDate 
   */
  def getAllTasks(contractId: Seq[String], taskId: Seq[String], taskType: Seq[String], taskState: Seq[String], limit: Int, minCreationDate: Option[OffsetDateTime] = None, maxCreationDate: Option[OffsetDateTime] = None)(implicit basicAuth: Option[BasicCredentials], bearerToken: Option[BearerToken]): ApiRequestT[Any] =
{
    var r = basicRequest
      .method(Method.GET, uri"$baseUrl/controlpanel/api/tasks?contractId=$contractId&taskId=$taskId&taskType=$taskType&taskState=$taskState&minCreationDate=$minCreationDate&maxCreationDate=$maxCreationDate&limit=$limit")
      .contentType("application/json")
      basicAuth.foreach(b => r = r.auth.basic(b.user, b.password))
      bearerToken.foreach(b => r = r.auth.bearer(b.token))
      r.response(asJson[Any])
}

  /**
   * Expected answers:
   *   code 200 :  (A list of users was loaded)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   *   BearerAuth (http)
   */
  def getAllUsers()(implicit basicAuth: Option[BasicCredentials], bearerToken: Option[BearerToken]): ApiRequestT[Unit] =
{
    var r = basicRequest
      .method(Method.GET, uri"$baseUrl/controlpanel/api/users")
      .contentType("application/json")
      basicAuth.foreach(b => r = r.auth.basic(b.user, b.password))
      bearerToken.foreach(b => r = r.auth.bearer(b.token))
      r.response(asJson[Unit])
}

  /**
   * **ðŸ”’ INTERNAL:** Retrieves a specific feature flag by its key.  Returns the feature flag configuration including metadata such as creation and update timestamps. 
   * 
   * Expected answers:
   *   code 200 : GetFeatureFlagByKeyApiResponse (Feature flag details retrieved successfully)
   *   code 404 : ApiErrorResponse (Feature flag with the specified key was not found)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   *   BearerAuth (http)
   * 
   * @param key Feature flag key identifier
   */
  def getFeatureFlagByKey(key: String)(implicit basicAuth: Option[BasicCredentials], bearerToken: Option[BearerToken]): ApiRequestT[GetFeatureFlagByKeyApiResponse] =
{
    var r = basicRequest
      .method(Method.GET, uri"$baseUrl/controlpanel/api/feature-flags/${key}")
      .contentType("application/json")
      basicAuth.foreach(b => r = r.auth.basic(b.user, b.password))
      bearerToken.foreach(b => r = r.auth.bearer(b.token))
      r.response(asJson[GetFeatureFlagByKeyApiResponse])
}

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   *   BearerAuth (http)
   * 
   * @param sinceSeconds 
   */
  def getTasksStats(sinceSeconds: Int)(implicit basicAuth: Option[BasicCredentials], bearerToken: Option[BearerToken]): ApiRequestT[Any] =
{
    var r = basicRequest
      .method(Method.GET, uri"$baseUrl/controlpanel/api/tasks/stats?sinceSeconds=$sinceSeconds")
      .contentType("application/json")
      basicAuth.foreach(b => r = r.auth.basic(b.user, b.password))
      bearerToken.foreach(b => r = r.auth.bearer(b.token))
      r.response(asJson[Any])
}

  /**
   * Get the user with the specified email address.
   * 
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   *   BearerAuth (http)
   * 
   * @param email 
   */
  def getUser(email: String)(implicit basicAuth: Option[BasicCredentials], bearerToken: Option[BearerToken]): ApiRequestT[Any] =
{
    var r = basicRequest
      .method(Method.GET, uri"$baseUrl/controlpanel/api/users/${email}")
      .contentType("application/json")
      basicAuth.foreach(b => r = r.auth.basic(b.user, b.password))
      bearerToken.foreach(b => r = r.auth.bearer(b.token))
      r.response(asJson[Any])
}

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   *   BearerAuth (http)
   * 
   * @param nameFilter 
   */
  def listVendors(nameFilter: String)(implicit basicAuth: Option[BasicCredentials], bearerToken: Option[BearerToken]): ApiRequestT[Any] =
{
    var r = basicRequest
      .method(Method.GET, uri"$baseUrl/controlpanel/vendors?nameFilter=$nameFilter")
      .contentType("application/json")
      basicAuth.foreach(b => r = r.auth.basic(b.user, b.password))
      bearerToken.foreach(b => r = r.auth.bearer(b.token))
      r.response(asJson[Any])
}

  /**
   * **ðŸ”’ INTERNAL:** Adds a new domain to the system for price monitoring.  This administrative operation creates a new domain configuration with the specified offer sources and monitoring capabilities. 
   * 
   * Expected answers:
   *   code 200 : PostAdminAddDomainV3ApiResponse (Domain added successfully)
   *   code 400 : ApiErrorResponse (Request validation failed. Common issues include: - Offer sources must be valid and non-empty - Domain must be a valid internet domain and non-empty - Domain name must be unique - Invalid configuration parameters )
   * 
   * Available security schemes:
   *   BasicAuth (http)
   *   BearerAuth (http)
   * 
   * @param postAdminAddDomainBodyV3 The domain configuration to be added, including offer sources and monitoring settings
   */
  def postAdminAddDomainV3(postAdminAddDomainBodyV3: Option[PostAdminAddDomainBodyV3] = None)(implicit basicAuth: Option[BasicCredentials], bearerToken: Option[BearerToken]): ApiRequestT[PostAdminAddDomainV3ApiResponse] =
{
    var r = basicRequest
      .method(Method.POST, uri"$baseUrl/controlpanel/api/v3/domains")
      .contentType("application/json")
      basicAuth.foreach(b => r = r.auth.basic(b.user, b.password))
      bearerToken.foreach(b => r = r.auth.bearer(b.token))
      r=r.body(postAdminAddDomainBodyV3)
      r.response(asJson[PostAdminAddDomainV3ApiResponse])
}

  /**
   * **ðŸ”’ INTERNAL:** Updates an existing domain configuration or creates a new domain if it doesn't exist.  This operation supports both creation and modification of domain configurations, allowing administrative management of supported monitoring domains. 
   * 
   * Expected answers:
   *   code 201 : PutAdminDomainResponseV3ApiResponse (Domain was updated or created successfully)
   *   code 400 : ApiErrorResponse (Request validation failed. Common issues include: - Offer sources must be valid - Domain must be a valid internet domain and non-empty - Domain name must be unique - Invalid configuration parameters )
   * 
   * Available security schemes:
   *   BasicAuth (http)
   *   BearerAuth (http)
   * 
   * @param domain Fully qualified domain name for the target marketplace or shop
   * @param putAdminDomainRequestV3 The domain configuration to be updated or created, including offer sources and monitoring settings
   */
  def putAdminDomainControlPanelV3(domain: String, putAdminDomainRequestV3: Option[PutAdminDomainRequestV3] = None)(implicit basicAuth: Option[BasicCredentials], bearerToken: Option[BearerToken]): ApiRequestT[PutAdminDomainResponseV3ApiResponse] =
{
    var r = basicRequest
      .method(Method.PUT, uri"$baseUrl/controlpanel/api/v3/domains/${domain}")
      .contentType("application/json")
      basicAuth.foreach(b => r = r.auth.basic(b.user, b.password))
      bearerToken.foreach(b => r = r.auth.bearer(b.token))
      r=r.body(putAdminDomainRequestV3)
      r.response(asJson[PutAdminDomainResponseV3ApiResponse])
}

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   *   BearerAuth (http)
   * 
   * @param email 
   * @param token 
   * @param body This is a generated entry and needs to be described.
   */
  def updateAuthToken(email: String, token: String, body: Option[Any] = None)(implicit basicAuth: Option[BasicCredentials], bearerToken: Option[BearerToken]): ApiRequestT[Any] =
{
    var r = basicRequest
      .method(Method.PUT, uri"$baseUrl/controlpanel/users/${email}/authtokens/${token}")
      .contentType("application/json")
      basicAuth.foreach(b => r = r.auth.basic(b.user, b.password))
      bearerToken.foreach(b => r = r.auth.bearer(b.token))
      r=r.body(body)
      r.response(asJson[Any])
}

  /**
   * **ðŸ”’ INTERNAL:** Updates an existing feature flag's name and description.  The feature flag key cannot be changed after creation. Only the display name and description can be updated. 
   * 
   * Expected answers:
   *   code 200 : UpdateFeatureFlagApiResponse (Feature flag updated successfully)
   *   code 400 : ApiErrorResponse (Request validation failed. Common reasons include: - Flag name is empty or too long - Description exceeds maximum length )
   *   code 404 : ApiErrorResponse (Feature flag with the specified key was not found)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   *   BearerAuth (http)
   * 
   * @param key Feature flag key identifier
   * @param putFeatureFlagRequest The feature flag updates to be applied
   */
  def updateFeatureFlag(key: String, putFeatureFlagRequest: PutFeatureFlagRequest)(implicit basicAuth: Option[BasicCredentials], bearerToken: Option[BearerToken]): ApiRequestT[UpdateFeatureFlagApiResponse] =
{
    var r = basicRequest
      .method(Method.PUT, uri"$baseUrl/controlpanel/api/feature-flags/${key}")
      .contentType("application/json")
      basicAuth.foreach(b => r = r.auth.basic(b.user, b.password))
      bearerToken.foreach(b => r = r.auth.bearer(b.token))
      r=r.body(putFeatureFlagRequest)
      r.response(asJson[UpdateFeatureFlagApiResponse])
}

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   *   BearerAuth (http)
   * 
   * @param vendor 
   * @param minPrice 
   * @param maxPrice 
   */
  def vendorData(vendor: String, minPrice: Double, maxPrice: Double)(implicit basicAuth: Option[BasicCredentials], bearerToken: Option[BearerToken]): ApiRequestT[Any] =
{
    var r = basicRequest
      .method(Method.GET, uri"$baseUrl/controlpanel/vendorexport/${vendor}?minPrice=$minPrice&maxPrice=$maxPrice")
      .contentType("application/json")
      basicAuth.foreach(b => r = r.auth.basic(b.user, b.password))
      bearerToken.foreach(b => r = r.auth.bearer(b.token))
      r.response(asJson[Any])
}

  /**
   * Get the current application version
   * 
   * Expected answers:
   *   code 200 : VersionApiResponse (Current application version.)
   */
  def version(): ApiRequestT[VersionApiResponse] =
{
    var r = basicRequest
      .method(Method.GET, uri"$baseUrl/version")
      .contentType("application/json")
      r.response(asJson[VersionApiResponse])
}

}

