/**
 * Pricemonitor API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.5832
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.patagona.pricemonitor.client.api

import com.patagona.pricemonitor.client.model.AdminCompanyV2
import java.time.OffsetDateTime
import com.patagona.pricemonitor.client.model.VersionApiResponse
import com.patagona.pricemonitor.client.core._
import alias._
import sttp.client._
import sttp.model.Method

object ControlpanelApi {

  def apply(baseUrl: String = "https://api.patagona.de")(implicit serializer: SttpSerializer) = new ControlpanelApi(baseUrl)
}

class ControlpanelApi(baseUrl: String)(implicit serializer: SttpSerializer) {

  import Helpers._
  import serializer._

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   *   BearerAuth (http)
   */
  def addCompany()(implicit basicAuth: BasicCredentials, bearerToken: BearerToken): ApiRequestT[Any] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/controlpanel/api/companies")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .auth.bearer(bearerToken.token)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   *   BearerAuth (http)
   * 
   * @param id 
   * @param email 
   * @param body This is a generated entry and needs to be described.
   */
  def addCompanyUser(id: Int, email: String, body: Option[Any] = None)(implicit basicAuth: BasicCredentials, bearerToken: BearerToken): ApiRequestT[Any] =
    basicRequest
      .method(Method.PUT, uri"$baseUrl/controlpanel/companies/${id}/users/${email}")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .auth.bearer(bearerToken.token)
      .body(body)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 :  (A new user was added)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   *   BearerAuth (http)
   */
  def addUser()(implicit basicAuth: BasicCredentials, bearerToken: BearerToken): ApiRequestT[Unit] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/controlpanel/users")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .auth.bearer(bearerToken.token)
      .response(asJson[Unit])

  /**
   * Expected answers:
   *   code 200 : AdminCompanyV2 (A list of companies was loaded)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   *   BearerAuth (http)
   * 
   * @param start Start of the pagination
   * @param limit Number of elements per page
   */
  def controlpanelApiCompaniesGet(start: Int, limit: Int)(implicit basicAuth: BasicCredentials, bearerToken: BearerToken): ApiRequestT[AdminCompanyV2] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/controlpanel/api/companies")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .auth.bearer(bearerToken.token)
      .response(asJson[AdminCompanyV2])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   *   BearerAuth (http)
   * 
   * @param email 
   * @param body This is a generated entry and needs to be described.
   */
  def createAuthToken(email: String, body: Option[Any] = None)(implicit basicAuth: BasicCredentials, bearerToken: BearerToken): ApiRequestT[Any] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/controlpanel/users/${email}/authtokens")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .auth.bearer(bearerToken.token)
      .body(body)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   *   BearerAuth (http)
   * 
   * @param email 
   * @param token 
   */
  def deleteAuthToken(email: String, token: String)(implicit basicAuth: BasicCredentials, bearerToken: BearerToken): ApiRequestT[Any] =
    basicRequest
      .method(Method.DELETE, uri"$baseUrl/controlpanel/users/${email}/authtokens/${token}")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .auth.bearer(bearerToken.token)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 :  (A list of contracts was loaded)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   *   BearerAuth (http)
   */
  def getAllContracts()(implicit basicAuth: BasicCredentials, bearerToken: BearerToken): ApiRequestT[Unit] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/controlpanel/api/contracts")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .auth.bearer(bearerToken.token)
      .response(asJson[Unit])

  /**
   * Expected answers:
   *   code 200 :  (A list of portals was loaded)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   *   BearerAuth (http)
   */
  def getAllPortals()(implicit basicAuth: BasicCredentials, bearerToken: BearerToken): ApiRequestT[Unit] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/controlpanel/api/portals")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .auth.bearer(bearerToken.token)
      .response(asJson[Unit])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   *   BearerAuth (http)
   * 
   * @param contractId 
   * @param taskId 
   * @param taskType 
   * @param taskState 
   * @param limit 
   * @param minCreationDate 
   * @param maxCreationDate 
   */
  def getAllTasks(contractId: Seq[String], taskId: Seq[String], taskType: Seq[String], taskState: Seq[String], limit: Int, minCreationDate: Option[OffsetDateTime] = None, maxCreationDate: Option[OffsetDateTime] = None)(implicit basicAuth: BasicCredentials, bearerToken: BearerToken): ApiRequestT[Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/controlpanel/api/tasks?contractId=$contractId&taskId=$taskId&taskType=$taskType&taskState=$taskState&minCreationDate=$minCreationDate&maxCreationDate=$maxCreationDate&limit=$limit")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .auth.bearer(bearerToken.token)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 :  (A list of users was loaded)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   *   BearerAuth (http)
   */
  def getAllUsers()(implicit basicAuth: BasicCredentials, bearerToken: BearerToken): ApiRequestT[Unit] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/controlpanel/api/users")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .auth.bearer(bearerToken.token)
      .response(asJson[Unit])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   *   BearerAuth (http)
   * 
   * @param sinceSeconds 
   */
  def getTasksStats(sinceSeconds: Int)(implicit basicAuth: BasicCredentials, bearerToken: BearerToken): ApiRequestT[Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/controlpanel/api/tasks/stats?sinceSeconds=$sinceSeconds")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .auth.bearer(bearerToken.token)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   *   BearerAuth (http)
   * 
   * @param email 
   */
  def getUser(email: String)(implicit basicAuth: BasicCredentials, bearerToken: BearerToken): ApiRequestT[Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/controlpanel/api/users/${email}")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .auth.bearer(bearerToken.token)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   *   BearerAuth (http)
   * 
   * @param nameFilter 
   */
  def listVendors(nameFilter: String)(implicit basicAuth: BasicCredentials, bearerToken: BearerToken): ApiRequestT[Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/controlpanel/vendors?nameFilter=$nameFilter")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .auth.bearer(bearerToken.token)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   *   BearerAuth (http)
   * 
   * @param email 
   * @param token 
   * @param body This is a generated entry and needs to be described.
   */
  def updateAuthToken(email: String, token: String, body: Option[Any] = None)(implicit basicAuth: BasicCredentials, bearerToken: BearerToken): ApiRequestT[Any] =
    basicRequest
      .method(Method.PUT, uri"$baseUrl/controlpanel/users/${email}/authtokens/${token}")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .auth.bearer(bearerToken.token)
      .body(body)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   *   BearerAuth (http)
   * 
   * @param vendor 
   * @param minPrice 
   * @param maxPrice 
   */
  def vendorData(vendor: String, minPrice: Double, maxPrice: Double)(implicit basicAuth: BasicCredentials, bearerToken: BearerToken): ApiRequestT[Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/controlpanel/vendorexport/${vendor}?minPrice=$minPrice&maxPrice=$maxPrice")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .auth.bearer(bearerToken.token)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : VersionApiResponse (Current application version.)
   */
  def version(): ApiRequestT[VersionApiResponse] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/version")
      .contentType("application/json")
      .response(asJson[VersionApiResponse])

}

