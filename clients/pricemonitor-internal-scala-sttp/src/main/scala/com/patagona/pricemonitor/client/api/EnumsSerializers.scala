/**
 * Omnia 2.0 API The Omnia 2.0 API is RESTful and provides access to the backend of Omnia 2.0 and Pricemonitor. It is used to manage products, offers, contracts, and more.  This API supports both public endpoints for customer integration and internal endpoints for platform management. All endpoints are authenticated using either Basic Authentication or JWT Bearer tokens.
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.7159
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.patagona.pricemonitor.client.api

import com.patagona.pricemonitor.client.model._
import org.json4s._
import scala.reflect.ClassTag

object EnumsSerializers {

  def all: Seq[Serializer[_]] = Seq[Serializer[_]]() :+
    new EnumNameSerializer(GenericTaskEnums.State) :+
    new EnumNameSerializer(GenericTaskWithUrlEnums.State) :+
    new EnumNameSerializer(LogMessageEnums.Severity) :+
    new EnumNameSerializer(LogMessagesEnums.Version) :+
    new EnumNameSerializer(OffersQuerySortOrderV30Enums.Metric) :+
    new EnumNameSerializer(OffersQuerySortOrderV30Enums.Order) :+
    new EnumNameSerializer(PostProductsRequestEnums.Version) :+
    new EnumNameSerializer(PriceRecommendationQuerySortOrderV2Enums.Metric) :+
    new EnumNameSerializer(PriceRecommendationQuerySortOrderV2Enums.Order) :+
    new EnumNameSerializer(ProductsFilterEnums.`Type`) :+
    new EnumNameSerializer(ProductsFilterEnums.Comparison) :+
    new EnumNameSerializer(PutPluginRegistrationRequestEnums.Version) :+
    new EnumNameSerializer(PutPluginRegistrationRequestAllOfEnums.Version) :+
    new EnumNameSerializer(UpdateTaskRequestV2Enums.State)

  private class EnumNameSerializer[E <: Enumeration: ClassTag](enum: E)
    extends Serializer[E#Value] {
    import JsonDSL._

    val EnumerationClass: Class[E#Value] = classOf[E#Value]

    def deserialize(implicit format: Formats):
    PartialFunction[(TypeInfo, JValue), E#Value] = {
      case (t @ TypeInfo(EnumerationClass, _), json) if isValid(json) =>
        json match {
          case JString(value) =>
            enum.withName(value)
          case value =>
            throw new MappingException(s"Can't convert $value to $EnumerationClass")
        }
    }

    private[this] def isValid(json: JValue) = json match {
      case JString(value) if enum.values.exists(_.toString == value) => true
      case _ => false
    }

    def serialize(implicit format: Formats): PartialFunction[Any, JValue] = {
      case i: E#Value => i.toString
    }
  }

}
