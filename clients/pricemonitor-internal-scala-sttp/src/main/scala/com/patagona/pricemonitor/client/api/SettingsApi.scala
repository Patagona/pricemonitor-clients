/**
 * Pricemonitor API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.5743
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.patagona.pricemonitor.client.api

import com.patagona.pricemonitor.client.model.Callbacks
import com.patagona.pricemonitor.client.model.CustomerContractSettings
import com.patagona.pricemonitor.client.model.GetContractSettingsResponseV1
import com.patagona.pricemonitor.client.model.GetCustomerContractSettingsApiResponse
import com.patagona.pricemonitor.client.model.PutAdminContractSettingsBody
import com.patagona.pricemonitor.client.model.PutCustomerContractSettingsApiResponse
import com.patagona.pricemonitor.client.core._
import alias._
import sttp.client._
import sttp.model.Method

object SettingsApi {

  def apply(baseUrl: String = "https://api.patagona.de")(implicit serializer: SttpSerializer) = new SettingsApi(baseUrl)
}

class SettingsApi(baseUrl: String)(implicit serializer: SttpSerializer) {

  import Helpers._
  import serializer._

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   */
  def allAvailablePortals()(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/api/2/domains")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param body This is a generated entry and needs to be described.
   */
  def createAlertSettings(contractId: String, body: Option[Any] = None)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/api/1/${contractId}/settings/alerts")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .body(body)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param alertId 
   */
  def deleteAlertSettings(contractId: String, alertId: String)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.DELETE, uri"$baseUrl/api/1/${contractId}/settings/alerts/${alertId}")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   */
  def deleteCallbackSettingsManufacturerV2(contractId: String)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.DELETE, uri"$baseUrl/api/2/m/contracts/${contractId}/settings/callbacks")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   */
  def deleteCallbackSettingsVendorV2(contractId: String)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.DELETE, uri"$baseUrl/api/2/v/contracts/${contractId}/settings/callbacks")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   */
  def deleteDynamicMonitoringSettings(contractId: String)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.DELETE, uri"$baseUrl/api/1/${contractId}/settings/dynamicmonitoring")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   */
  def deleteImportSettingsVendorV2(contractId: String)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.DELETE, uri"$baseUrl/api/2/v/contracts/${contractId}/settings/import")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   */
  def getActiveEbayTokenVendorV2(contractId: String)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/api/2/v/contracts/${contractId}/settings/ebay/token")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   */
  def getAlertSettings(contractId: String)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/api/1/${contractId}/settings/alerts")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param start 
   * @param limit 
   */
  def getAllEbayAuthorizationsVendorV2(contractId: String, start: Int, limit: Int)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/api/2/v/contracts/${contractId}/settings/ebay/authorizations?start=$start&limit=$limit")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param start 
   * @param limit 
   */
  def getAllEbayTokensVendorV2(contractId: String, start: Int, limit: Int)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/api/2/v/contracts/${contractId}/settings/ebay/tokens?start=$start&limit=$limit")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Callbacks (-)
   *   code 404 :  (Settings for this contract don't exist yet)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   */
  def getCallbacks(contractId: String)(implicit basicAuth: BasicCredentials): ApiRequestT[Callbacks] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/api/2/m/contracts/${contractId}/settings/callbacks")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Callbacks])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   */
  def getCallbacksVendorV2(contractId: String)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/api/2/v/contracts/${contractId}/settings/callbacks")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   */
  def getCurrencyVendorV2(contractId: String)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/api/2/v/contracts/${contractId}/settings/currency")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : GetCustomerContractSettingsApiResponse (Settings for this contract.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   */
  def getCustomerContractSettingsManufaturerV3(contractId: String)(implicit basicAuth: BasicCredentials): ApiRequestT[GetCustomerContractSettingsApiResponse] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/api/v3/manufacturer/contracts/${contractId}/settings/customer")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[GetCustomerContractSettingsApiResponse])

  /**
   * Expected answers:
   *   code 200 : GetCustomerContractSettingsApiResponse (Settings for this contract.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   */
  def getCustomerContractSettingsVendorV3(contractId: String)(implicit basicAuth: BasicCredentials): ApiRequestT[GetCustomerContractSettingsApiResponse] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/api/v3/vendor/contracts/${contractId}/settings/customer")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[GetCustomerContractSettingsApiResponse])

  /**
   * Expected answers:
   *   code 200 : Any (A list of configured domains is returned.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   */
  def getDomainsVendorV2(contractId: String)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/api/2/v/contracts/${contractId}/settings/domains")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   */
  def getDynamicMonitoringSettings(contractId: String)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/api/1/${contractId}/settings/dynamicmonitoring")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param authIds 
   */
  def getEbayAuthorizationsVendorV2(contractId: String, authIds: String)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/api/2/v/contracts/${contractId}/settings/ebay/authorizations/${authIds}")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   */
  def getImportSettingsVendorV2(contractId: String)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/api/2/v/contracts/${contractId}/settings/import")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Get the current monitoring settings for a given contract
   * 
   * Expected answers:
   *   code 200 : Any (The current monitoring settings object)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   */
  def getMonitoringSettingsManufacturerV2(contractId: String)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/api/2/m/contracts/${contractId}/settings/monitoring")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   */
  def getMonitoringSettingsManufacturerV3(contractId: String)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/api/v3/manufacturer/contracts/${contractId}/settings/monitoring")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   */
  def getMonitoringSettingsVendorV2(contractId: String)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/api/2/v/contracts/${contractId}/settings/monitoring")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   */
  def getMonitoringSettingsVendorV3(contractId: String)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/api/v3/vendor/contracts/${contractId}/settings/monitoring")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param contractType 
   */
  def getOfferRetentionSettingsManufacturerV3(contractId: String, contractType: String)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/api/v3/manufacturer/contracts/${contractId}/settings/offerretention?contractType=$contractType")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param contractType 
   */
  def getOfferRetentionSettingsVendorV3(contractId: String, contractType: String)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/api/v3/vendor/contracts/${contractId}/settings/offerretention?contractType=$contractType")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : GetContractSettingsResponseV1 (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   */
  def getSettings(contractId: String)(implicit basicAuth: BasicCredentials): ApiRequestT[GetContractSettingsResponseV1] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/api/1/${contractId}/settings")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[GetContractSettingsResponseV1])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   */
  def getVendorSettingsV2VendorV2(contractId: String)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/api/2/v/contracts/${contractId}/settings/repricing")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param body This is a generated entry and needs to be described.
   */
  def postEbayAuthorizationVendorV2(contractId: String, body: Option[Any] = None)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/api/2/v/contracts/${contractId}/settings/ebay/authorizations")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .body(body)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 :  (-)
   *   code 404 :  (Settings for this contract don't exist yet)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param callbacks Callbacks
   */
  def putCallbacks(contractId: String, callbacks: Callbacks)(implicit basicAuth: BasicCredentials): ApiRequestT[Unit] =
    basicRequest
      .method(Method.PUT, uri"$baseUrl/api/2/m/contracts/${contractId}/settings/callbacks")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .body(callbacks)
      .response(asJson[Unit])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param body This is a generated entry and needs to be described.
   */
  def putCallbacksVendorV2(contractId: String, body: Option[Any] = None)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.PUT, uri"$baseUrl/api/2/v/contracts/${contractId}/settings/callbacks")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .body(body)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param body This is a generated entry and needs to be described.
   */
  def putCurrencyVendorV2(contractId: String, body: Option[Any] = None)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.PUT, uri"$baseUrl/api/2/v/contracts/${contractId}/settings/currency")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .body(body)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : PutCustomerContractSettingsApiResponse (Settings for this contract.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param customerContractSettings This is a generated entry and needs to be described.
   */
  def putCustomerContractSettingsManufacturerV3(contractId: String, customerContractSettings: Option[CustomerContractSettings] = None)(implicit basicAuth: BasicCredentials): ApiRequestT[PutCustomerContractSettingsApiResponse] =
    basicRequest
      .method(Method.PUT, uri"$baseUrl/api/v3/manufacturer/contracts/${contractId}/settings/customer")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .body(customerContractSettings)
      .response(asJson[PutCustomerContractSettingsApiResponse])

  /**
   * Expected answers:
   *   code 200 : PutCustomerContractSettingsApiResponse (Settings for this contract.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param customerContractSettings This is a generated entry and needs to be described.
   */
  def putCustomerContractSettingsVendorV3(contractId: String, customerContractSettings: Option[CustomerContractSettings] = None)(implicit basicAuth: BasicCredentials): ApiRequestT[PutCustomerContractSettingsApiResponse] =
    basicRequest
      .method(Method.PUT, uri"$baseUrl/api/v3/vendor/contracts/${contractId}/settings/customer")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .body(customerContractSettings)
      .response(asJson[PutCustomerContractSettingsApiResponse])

  /**
   * Expected answers:
   *   code 200 :  (The domains setting for this contract was saved.)
   *   code 404 :  (Settings for this contract do not exist yet)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param requestBody Settings
   */
  def putDomains(contractId: String, requestBody: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequestT[Unit] =
    basicRequest
      .method(Method.PUT, uri"$baseUrl/api/2/v/contracts/${contractId}/settings/domains")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .body(requestBody)
      .response(asJson[Unit])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param body This is a generated entry and needs to be described.
   */
  def putDynamicMonitoringSettings(contractId: String, body: Option[Any] = None)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.PUT, uri"$baseUrl/api/1/${contractId}/settings/dynamicmonitoring")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .body(body)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param body This is a generated entry and needs to be described.
   */
  def putImageTagManufacturerV2(contractId: String, body: Option[Any] = None)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.PUT, uri"$baseUrl/api/2/m/contracts/${contractId}/settings/imagetag")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .body(body)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param body This is a generated entry and needs to be described.
   */
  def putImageTagVendorV2(contractId: String, body: Option[Any] = None)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.PUT, uri"$baseUrl/api/2/v/contracts/${contractId}/settings/imagetag")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .body(body)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param body This is a generated entry and needs to be described.
   */
  def putImportSettingsVendorV2(contractId: String, body: Option[Any] = None)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.PUT, uri"$baseUrl/api/2/v/contracts/${contractId}/settings/import")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .body(body)
      .response(asJson[Any])

  /**
   * Update the monitoring settings for a given contract
   * 
   * Expected answers:
   *   code 200 : Any (Returns the successfully updated monitoring settings object)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param body The monitoring settings object to be written to the database
   */
  def putMonitoringSettingsManufacturerV2(contractId: String, body: Option[Any] = None)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.PUT, uri"$baseUrl/api/2/m/contracts/${contractId}/settings/monitoring")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .body(body)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param body This is a generated entry and needs to be described.
   */
  def putMonitoringSettingsManufacturerV3(contractId: String, body: Option[Any] = None)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.PUT, uri"$baseUrl/api/v3/manufacturer/contracts/${contractId}/settings/monitoring")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .body(body)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param body This is a generated entry and needs to be described.
   */
  def putMonitoringSettingsVendorV2(contractId: String, body: Option[Any] = None)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.PUT, uri"$baseUrl/api/2/v/contracts/${contractId}/settings/monitoring")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .body(body)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param body This is a generated entry and needs to be described.
   */
  def putMonitoringSettingsVendorV3(contractId: String, body: Option[Any] = None)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.PUT, uri"$baseUrl/api/v3/vendor/contracts/${contractId}/settings/monitoring")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .body(body)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param contractType 
   * @param body This is a generated entry and needs to be described.
   */
  def putOfferRetentionSettingsManufacturerV3(contractId: String, contractType: String, body: Option[Any] = None)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.PUT, uri"$baseUrl/api/v3/manufacturer/contracts/${contractId}/settings/offerretention?contractType=$contractType")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .body(body)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param contractType 
   * @param body This is a generated entry and needs to be described.
   */
  def putOfferRetentionSettingsVendorV3(contractId: String, contractType: String, body: Option[Any] = None)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.PUT, uri"$baseUrl/api/v3/vendor/contracts/${contractId}/settings/offerretention?contractType=$contractType")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .body(body)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : PutAdminContractSettingsBody (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param putAdminContractSettingsBody This is a generated entry and needs to be described.
   */
  def putSettings(contractId: String, putAdminContractSettingsBody: Option[PutAdminContractSettingsBody] = None)(implicit basicAuth: BasicCredentials): ApiRequestT[PutAdminContractSettingsBody] =
    basicRequest
      .method(Method.PUT, uri"$baseUrl/api/1/${contractId}/settings")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .body(putAdminContractSettingsBody)
      .response(asJson[PutAdminContractSettingsBody])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param body This is a generated entry and needs to be described.
   */
  def putVendorSettingsVendorV2(contractId: String, body: Option[Any] = None)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.PUT, uri"$baseUrl/api/2/v/contracts/${contractId}/settings/repricing")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .body(body)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param body This is a generated entry and needs to be described.
   */
  def saveIncludeDeliveryCosts(contractId: String, body: Option[Any] = None)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/api/1/${contractId}/settings/include_delivery_costs")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .body(body)
      .response(asJson[Any])

  /**
   * Expected answers:
   *   code 200 : Any (This is a generated entry and needs to be described.)
   * 
   * Available security schemes:
   *   BasicAuth (http)
   * 
   * @param contractId ID of the contract
   * @param alertId 
   * @param body This is a generated entry and needs to be described.
   */
  def updateAlertSettings(contractId: String, alertId: String, body: Option[Any] = None)(implicit basicAuth: BasicCredentials): ApiRequestT[Any] =
    basicRequest
      .method(Method.PUT, uri"$baseUrl/api/1/${contractId}/settings/alerts/${alertId}")
      .contentType("application/json")
      .auth.basic(basicAuth.user, basicAuth.password)
      .body(body)
      .response(asJson[Any])

}

