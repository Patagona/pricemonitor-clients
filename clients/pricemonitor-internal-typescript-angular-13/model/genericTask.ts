/**
 * Omnia 2.0 API The Omnia 2.0 API is RESTful and provides access to the backend of Omnia 2.0 and Pricemonitor. It is used to manage products, offers, contracts, and more.  This API supports both public endpoints for customer integration and internal endpoints for platform management. All endpoints are authenticated using either Basic Authentication or JWT Bearer tokens.
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.7243
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


/**
 * A basic task type. Additional fields can be contained depending on specific task type.
 */
export interface GenericTask { 
    /**
     * The creation date of this task
     */
    creationDate: string;
    /**
     * The timestamp of when processing of this task was started
     */
    startDate?: string;
    /**
     * The timestamp of when processing of this task finished
     */
    finishDate?: string;
    /**
     * The current processing state of this task
     */
    state: GenericTask.StateEnum;
    /**
     * Schemaless. If any errors occured during processing, these will be contained here.
     */
    failures?: Array<object>;
    /**
     * The unique ID of this task
     */
    taskId: string;
    /**
     * The parents unique taskId, if any parent exists
     */
    parentId?: string;
    /**
     * The identifier string for the type of task
     */
    taskType: string;
    /**
     * Schemaless. Contains the payload of the task given during task creation.
     */
    data?: object;
    /**
     * Schemaless. Contains the processing result for this task. Type is dependent on task type.
     */
    result?: object;
    /**
     * If any error occured the error code for this error will be contained here.
     */
    failureCode?: string;
}
export namespace GenericTask {
    export type StateEnum = 'pending' | 'executing' | 'succeeded' | 'failed';
    export const StateEnum = {
        Pending: 'pending' as StateEnum,
        Executing: 'executing' as StateEnum,
        Succeeded: 'succeeded' as StateEnum,
        Failed: 'failed' as StateEnum
    };
}


