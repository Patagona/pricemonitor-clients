# coding: utf-8

"""
    Omnia 2.0 API The Omnia 2.0 API is RESTful and provides access to the backend of Omnia 2.0 and Pricemonitor. It is used to manage products, offers, contracts and more.

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.0.7097
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from pricemonitor_api_client.configuration import Configuration


class ComPatagonaPricemonitorShareApiQuery(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'regex': 'ComPatagonaPricemonitorShareApiQueryRegex',
        '_in': 'ComPatagonaPricemonitorShareApiQueryIn',
        '_or': 'list[ComPatagonaPricemonitorShareApiQuery]',
        'const': 'bool',
        '_not': 'ComPatagonaPricemonitorShareApiQuery',
        'one_of': 'ComPatagonaPricemonitorShareApiQueryOneOf',
        'lt': 'ComPatagonaPricemonitorShareApiQueryLt',
        'gt': 'ComPatagonaPricemonitorShareApiQueryLt',
        'eq': 'ComPatagonaPricemonitorShareApiQueryLt',
        '_and': 'list[ComPatagonaPricemonitorShareApiQuery]'
    }

    attribute_map = {
        'regex': 'regex',
        '_in': 'in',
        '_or': 'or',
        'const': 'const',
        '_not': 'not',
        'one_of': 'oneOf',
        'lt': 'lt',
        'gt': 'gt',
        'eq': 'eq',
        '_and': 'and'
    }

    def __init__(self, regex=None, _in=None, _or=None, const=None, _not=None, one_of=None, lt=None, gt=None, eq=None, _and=None, local_vars_configuration=None):  # noqa: E501
        """ComPatagonaPricemonitorShareApiQuery - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._regex = None
        self.__in = None
        self.__or = None
        self._const = None
        self.__not = None
        self._one_of = None
        self._lt = None
        self._gt = None
        self._eq = None
        self.__and = None
        self.discriminator = None

        if regex is not None:
            self.regex = regex
        if _in is not None:
            self._in = _in
        if _or is not None:
            self._or = _or
        if const is not None:
            self.const = const
        if _not is not None:
            self._not = _not
        if one_of is not None:
            self.one_of = one_of
        if lt is not None:
            self.lt = lt
        if gt is not None:
            self.gt = gt
        if eq is not None:
            self.eq = eq
        if _and is not None:
            self._and = _and

    @property
    def regex(self):
        """Gets the regex of this ComPatagonaPricemonitorShareApiQuery.  # noqa: E501


        :return: The regex of this ComPatagonaPricemonitorShareApiQuery.  # noqa: E501
        :rtype: ComPatagonaPricemonitorShareApiQueryRegex
        """
        return self._regex

    @regex.setter
    def regex(self, regex):
        """Sets the regex of this ComPatagonaPricemonitorShareApiQuery.


        :param regex: The regex of this ComPatagonaPricemonitorShareApiQuery.  # noqa: E501
        :type: ComPatagonaPricemonitorShareApiQueryRegex
        """

        self._regex = regex

    @property
    def _in(self):
        """Gets the _in of this ComPatagonaPricemonitorShareApiQuery.  # noqa: E501


        :return: The _in of this ComPatagonaPricemonitorShareApiQuery.  # noqa: E501
        :rtype: ComPatagonaPricemonitorShareApiQueryIn
        """
        return self.__in

    @_in.setter
    def _in(self, _in):
        """Sets the _in of this ComPatagonaPricemonitorShareApiQuery.


        :param _in: The _in of this ComPatagonaPricemonitorShareApiQuery.  # noqa: E501
        :type: ComPatagonaPricemonitorShareApiQueryIn
        """

        self.__in = _in

    @property
    def _or(self):
        """Gets the _or of this ComPatagonaPricemonitorShareApiQuery.  # noqa: E501


        :return: The _or of this ComPatagonaPricemonitorShareApiQuery.  # noqa: E501
        :rtype: list[ComPatagonaPricemonitorShareApiQuery]
        """
        return self.__or

    @_or.setter
    def _or(self, _or):
        """Sets the _or of this ComPatagonaPricemonitorShareApiQuery.


        :param _or: The _or of this ComPatagonaPricemonitorShareApiQuery.  # noqa: E501
        :type: list[ComPatagonaPricemonitorShareApiQuery]
        """

        self.__or = _or

    @property
    def const(self):
        """Gets the const of this ComPatagonaPricemonitorShareApiQuery.  # noqa: E501


        :return: The const of this ComPatagonaPricemonitorShareApiQuery.  # noqa: E501
        :rtype: bool
        """
        return self._const

    @const.setter
    def const(self, const):
        """Sets the const of this ComPatagonaPricemonitorShareApiQuery.


        :param const: The const of this ComPatagonaPricemonitorShareApiQuery.  # noqa: E501
        :type: bool
        """

        self._const = const

    @property
    def _not(self):
        """Gets the _not of this ComPatagonaPricemonitorShareApiQuery.  # noqa: E501


        :return: The _not of this ComPatagonaPricemonitorShareApiQuery.  # noqa: E501
        :rtype: ComPatagonaPricemonitorShareApiQuery
        """
        return self.__not

    @_not.setter
    def _not(self, _not):
        """Sets the _not of this ComPatagonaPricemonitorShareApiQuery.


        :param _not: The _not of this ComPatagonaPricemonitorShareApiQuery.  # noqa: E501
        :type: ComPatagonaPricemonitorShareApiQuery
        """

        self.__not = _not

    @property
    def one_of(self):
        """Gets the one_of of this ComPatagonaPricemonitorShareApiQuery.  # noqa: E501


        :return: The one_of of this ComPatagonaPricemonitorShareApiQuery.  # noqa: E501
        :rtype: ComPatagonaPricemonitorShareApiQueryOneOf
        """
        return self._one_of

    @one_of.setter
    def one_of(self, one_of):
        """Sets the one_of of this ComPatagonaPricemonitorShareApiQuery.


        :param one_of: The one_of of this ComPatagonaPricemonitorShareApiQuery.  # noqa: E501
        :type: ComPatagonaPricemonitorShareApiQueryOneOf
        """

        self._one_of = one_of

    @property
    def lt(self):
        """Gets the lt of this ComPatagonaPricemonitorShareApiQuery.  # noqa: E501


        :return: The lt of this ComPatagonaPricemonitorShareApiQuery.  # noqa: E501
        :rtype: ComPatagonaPricemonitorShareApiQueryLt
        """
        return self._lt

    @lt.setter
    def lt(self, lt):
        """Sets the lt of this ComPatagonaPricemonitorShareApiQuery.


        :param lt: The lt of this ComPatagonaPricemonitorShareApiQuery.  # noqa: E501
        :type: ComPatagonaPricemonitorShareApiQueryLt
        """

        self._lt = lt

    @property
    def gt(self):
        """Gets the gt of this ComPatagonaPricemonitorShareApiQuery.  # noqa: E501


        :return: The gt of this ComPatagonaPricemonitorShareApiQuery.  # noqa: E501
        :rtype: ComPatagonaPricemonitorShareApiQueryLt
        """
        return self._gt

    @gt.setter
    def gt(self, gt):
        """Sets the gt of this ComPatagonaPricemonitorShareApiQuery.


        :param gt: The gt of this ComPatagonaPricemonitorShareApiQuery.  # noqa: E501
        :type: ComPatagonaPricemonitorShareApiQueryLt
        """

        self._gt = gt

    @property
    def eq(self):
        """Gets the eq of this ComPatagonaPricemonitorShareApiQuery.  # noqa: E501


        :return: The eq of this ComPatagonaPricemonitorShareApiQuery.  # noqa: E501
        :rtype: ComPatagonaPricemonitorShareApiQueryLt
        """
        return self._eq

    @eq.setter
    def eq(self, eq):
        """Sets the eq of this ComPatagonaPricemonitorShareApiQuery.


        :param eq: The eq of this ComPatagonaPricemonitorShareApiQuery.  # noqa: E501
        :type: ComPatagonaPricemonitorShareApiQueryLt
        """

        self._eq = eq

    @property
    def _and(self):
        """Gets the _and of this ComPatagonaPricemonitorShareApiQuery.  # noqa: E501


        :return: The _and of this ComPatagonaPricemonitorShareApiQuery.  # noqa: E501
        :rtype: list[ComPatagonaPricemonitorShareApiQuery]
        """
        return self.__and

    @_and.setter
    def _and(self, _and):
        """Sets the _and of this ComPatagonaPricemonitorShareApiQuery.


        :param _and: The _and of this ComPatagonaPricemonitorShareApiQuery.  # noqa: E501
        :type: list[ComPatagonaPricemonitorShareApiQuery]
        """

        self.__and = _and

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ComPatagonaPricemonitorShareApiQuery):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ComPatagonaPricemonitorShareApiQuery):
            return True

        return self.to_dict() != other.to_dict()
