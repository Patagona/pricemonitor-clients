# coding: utf-8

"""
    Omnia 2.0 API The Omnia 2.0 API is RESTful and provides access to the backend of Omnia 2.0 and Pricemonitor. It is used to manage products, offers, contracts, and more.  This API supports both public endpoints for customer integration and internal endpoints for platform management. All endpoints are authenticated using either Basic Authentication or JWT Bearer tokens.

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.0.7258
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from pricemonitor_api_client.configuration import Configuration


class ComPatagonaPricemonitorShareApiPriceApprovalDecisionV3(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'user_email': 'str',
        'decision': 'str',
        'comment': 'str',
        'created_at': 'datetime',
        'user_id': 'int',
        'superseded': 'bool',
        'overwrite_price': 'float'
    }

    attribute_map = {
        'user_email': 'userEmail',
        'decision': 'decision',
        'comment': 'comment',
        'created_at': 'createdAt',
        'user_id': 'userId',
        'superseded': 'superseded',
        'overwrite_price': 'overwritePrice'
    }

    def __init__(self, user_email=None, decision=None, comment=None, created_at=None, user_id=None, superseded=None, overwrite_price=None, local_vars_configuration=None):  # noqa: E501
        """ComPatagonaPricemonitorShareApiPriceApprovalDecisionV3 - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._user_email = None
        self._decision = None
        self._comment = None
        self._created_at = None
        self._user_id = None
        self._superseded = None
        self._overwrite_price = None
        self.discriminator = None

        self.user_email = user_email
        self.decision = decision
        if comment is not None:
            self.comment = comment
        self.created_at = created_at
        self.user_id = user_id
        self.superseded = superseded
        if overwrite_price is not None:
            self.overwrite_price = overwrite_price

    @property
    def user_email(self):
        """Gets the user_email of this ComPatagonaPricemonitorShareApiPriceApprovalDecisionV3.  # noqa: E501

        The email address of the user who made the decision.  # noqa: E501

        :return: The user_email of this ComPatagonaPricemonitorShareApiPriceApprovalDecisionV3.  # noqa: E501
        :rtype: str
        """
        return self._user_email

    @user_email.setter
    def user_email(self, user_email):
        """Sets the user_email of this ComPatagonaPricemonitorShareApiPriceApprovalDecisionV3.

        The email address of the user who made the decision.  # noqa: E501

        :param user_email: The user_email of this ComPatagonaPricemonitorShareApiPriceApprovalDecisionV3.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and user_email is None:  # noqa: E501
            raise ValueError("Invalid value for `user_email`, must not be `None`")  # noqa: E501

        self._user_email = user_email

    @property
    def decision(self):
        """Gets the decision of this ComPatagonaPricemonitorShareApiPriceApprovalDecisionV3.  # noqa: E501

        The decision made by the user. <br> Allowed values: \"approved\", \"rejected\", or \"overwritten\".  # noqa: E501

        :return: The decision of this ComPatagonaPricemonitorShareApiPriceApprovalDecisionV3.  # noqa: E501
        :rtype: str
        """
        return self._decision

    @decision.setter
    def decision(self, decision):
        """Sets the decision of this ComPatagonaPricemonitorShareApiPriceApprovalDecisionV3.

        The decision made by the user. <br> Allowed values: \"approved\", \"rejected\", or \"overwritten\".  # noqa: E501

        :param decision: The decision of this ComPatagonaPricemonitorShareApiPriceApprovalDecisionV3.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and decision is None:  # noqa: E501
            raise ValueError("Invalid value for `decision`, must not be `None`")  # noqa: E501

        self._decision = decision

    @property
    def comment(self):
        """Gets the comment of this ComPatagonaPricemonitorShareApiPriceApprovalDecisionV3.  # noqa: E501

        An optional comment provided by the user.  # noqa: E501

        :return: The comment of this ComPatagonaPricemonitorShareApiPriceApprovalDecisionV3.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this ComPatagonaPricemonitorShareApiPriceApprovalDecisionV3.

        An optional comment provided by the user.  # noqa: E501

        :param comment: The comment of this ComPatagonaPricemonitorShareApiPriceApprovalDecisionV3.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def created_at(self):
        """Gets the created_at of this ComPatagonaPricemonitorShareApiPriceApprovalDecisionV3.  # noqa: E501

        The timestamp when the decision was made.  # noqa: E501

        :return: The created_at of this ComPatagonaPricemonitorShareApiPriceApprovalDecisionV3.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this ComPatagonaPricemonitorShareApiPriceApprovalDecisionV3.

        The timestamp when the decision was made.  # noqa: E501

        :param created_at: The created_at of this ComPatagonaPricemonitorShareApiPriceApprovalDecisionV3.  # noqa: E501
        :type: datetime
        """
        if self.local_vars_configuration.client_side_validation and created_at is None:  # noqa: E501
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def user_id(self):
        """Gets the user_id of this ComPatagonaPricemonitorShareApiPriceApprovalDecisionV3.  # noqa: E501

        The unique identifier of the user who made the decision.  # noqa: E501

        :return: The user_id of this ComPatagonaPricemonitorShareApiPriceApprovalDecisionV3.  # noqa: E501
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this ComPatagonaPricemonitorShareApiPriceApprovalDecisionV3.

        The unique identifier of the user who made the decision.  # noqa: E501

        :param user_id: The user_id of this ComPatagonaPricemonitorShareApiPriceApprovalDecisionV3.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and user_id is None:  # noqa: E501
            raise ValueError("Invalid value for `user_id`, must not be `None`")  # noqa: E501

        self._user_id = user_id

    @property
    def superseded(self):
        """Gets the superseded of this ComPatagonaPricemonitorShareApiPriceApprovalDecisionV3.  # noqa: E501

        Indicates if this decision was superseded by a later decision.  # noqa: E501

        :return: The superseded of this ComPatagonaPricemonitorShareApiPriceApprovalDecisionV3.  # noqa: E501
        :rtype: bool
        """
        return self._superseded

    @superseded.setter
    def superseded(self, superseded):
        """Sets the superseded of this ComPatagonaPricemonitorShareApiPriceApprovalDecisionV3.

        Indicates if this decision was superseded by a later decision.  # noqa: E501

        :param superseded: The superseded of this ComPatagonaPricemonitorShareApiPriceApprovalDecisionV3.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and superseded is None:  # noqa: E501
            raise ValueError("Invalid value for `superseded`, must not be `None`")  # noqa: E501

        self._superseded = superseded

    @property
    def overwrite_price(self):
        """Gets the overwrite_price of this ComPatagonaPricemonitorShareApiPriceApprovalDecisionV3.  # noqa: E501

        The manual price set by the user when the recommendation was overwritten, if applicable.  # noqa: E501

        :return: The overwrite_price of this ComPatagonaPricemonitorShareApiPriceApprovalDecisionV3.  # noqa: E501
        :rtype: float
        """
        return self._overwrite_price

    @overwrite_price.setter
    def overwrite_price(self, overwrite_price):
        """Sets the overwrite_price of this ComPatagonaPricemonitorShareApiPriceApprovalDecisionV3.

        The manual price set by the user when the recommendation was overwritten, if applicable.  # noqa: E501

        :param overwrite_price: The overwrite_price of this ComPatagonaPricemonitorShareApiPriceApprovalDecisionV3.  # noqa: E501
        :type: float
        """

        self._overwrite_price = overwrite_price

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ComPatagonaPricemonitorShareApiPriceApprovalDecisionV3):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ComPatagonaPricemonitorShareApiPriceApprovalDecisionV3):
            return True

        return self.to_dict() != other.to_dict()
