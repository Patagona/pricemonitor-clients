# coding: utf-8

"""
    Omnia 2.0 API The Omnia 2.0 API is RESTful and provides access to the backend of Omnia 2.0 and Pricemonitor. It is used to manage products, offers, contracts, and more.  This API supports both public endpoints for customer integration and internal endpoints for platform management. All endpoints are authenticated using either Basic Authentication or JWT Bearer tokens.

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.0.7214
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from pricemonitor_api_client.configuration import Configuration


class GetOffersResponseOffers(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'approved': 'bool',
        'attributes': 'list[GetOffersResponseAttributes]',
        'availability': 'object',
        'creation_date': 'datetime',
        'delivery_costs': 'float',
        'domain': 'str',
        'max_delivery_time': 'object',
        'min_delivery_time': 'object',
        'price': 'float',
        'product_name': 'str',
        'url': 'str',
        'vendor': 'str',
        'vendor_id_on_domain': 'str'
    }

    attribute_map = {
        'approved': 'approved',
        'attributes': 'attributes',
        'availability': 'availability',
        'creation_date': 'creationDate',
        'delivery_costs': 'deliveryCosts',
        'domain': 'domain',
        'max_delivery_time': 'maxDeliveryTime',
        'min_delivery_time': 'minDeliveryTime',
        'price': 'price',
        'product_name': 'productName',
        'url': 'url',
        'vendor': 'vendor',
        'vendor_id_on_domain': 'vendorIdOnDomain'
    }

    def __init__(self, approved=None, attributes=None, availability=None, creation_date=None, delivery_costs=None, domain=None, max_delivery_time=None, min_delivery_time=None, price=None, product_name=None, url=None, vendor=None, vendor_id_on_domain=None, local_vars_configuration=None):  # noqa: E501
        """GetOffersResponseOffers - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._approved = None
        self._attributes = None
        self._availability = None
        self._creation_date = None
        self._delivery_costs = None
        self._domain = None
        self._max_delivery_time = None
        self._min_delivery_time = None
        self._price = None
        self._product_name = None
        self._url = None
        self._vendor = None
        self._vendor_id_on_domain = None
        self.discriminator = None

        if approved is not None:
            self.approved = approved
        if attributes is not None:
            self.attributes = attributes
        if availability is not None:
            self.availability = availability
        if creation_date is not None:
            self.creation_date = creation_date
        if delivery_costs is not None:
            self.delivery_costs = delivery_costs
        if domain is not None:
            self.domain = domain
        if max_delivery_time is not None:
            self.max_delivery_time = max_delivery_time
        if min_delivery_time is not None:
            self.min_delivery_time = min_delivery_time
        if price is not None:
            self.price = price
        if product_name is not None:
            self.product_name = product_name
        if url is not None:
            self.url = url
        if vendor is not None:
            self.vendor = vendor
        if vendor_id_on_domain is not None:
            self.vendor_id_on_domain = vendor_id_on_domain

    @property
    def approved(self):
        """Gets the approved of this GetOffersResponseOffers.  # noqa: E501


        :return: The approved of this GetOffersResponseOffers.  # noqa: E501
        :rtype: bool
        """
        return self._approved

    @approved.setter
    def approved(self, approved):
        """Sets the approved of this GetOffersResponseOffers.


        :param approved: The approved of this GetOffersResponseOffers.  # noqa: E501
        :type: bool
        """

        self._approved = approved

    @property
    def attributes(self):
        """Gets the attributes of this GetOffersResponseOffers.  # noqa: E501


        :return: The attributes of this GetOffersResponseOffers.  # noqa: E501
        :rtype: list[GetOffersResponseAttributes]
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this GetOffersResponseOffers.


        :param attributes: The attributes of this GetOffersResponseOffers.  # noqa: E501
        :type: list[GetOffersResponseAttributes]
        """

        self._attributes = attributes

    @property
    def availability(self):
        """Gets the availability of this GetOffersResponseOffers.  # noqa: E501


        :return: The availability of this GetOffersResponseOffers.  # noqa: E501
        :rtype: object
        """
        return self._availability

    @availability.setter
    def availability(self, availability):
        """Sets the availability of this GetOffersResponseOffers.


        :param availability: The availability of this GetOffersResponseOffers.  # noqa: E501
        :type: object
        """

        self._availability = availability

    @property
    def creation_date(self):
        """Gets the creation_date of this GetOffersResponseOffers.  # noqa: E501


        :return: The creation_date of this GetOffersResponseOffers.  # noqa: E501
        :rtype: datetime
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this GetOffersResponseOffers.


        :param creation_date: The creation_date of this GetOffersResponseOffers.  # noqa: E501
        :type: datetime
        """

        self._creation_date = creation_date

    @property
    def delivery_costs(self):
        """Gets the delivery_costs of this GetOffersResponseOffers.  # noqa: E501


        :return: The delivery_costs of this GetOffersResponseOffers.  # noqa: E501
        :rtype: float
        """
        return self._delivery_costs

    @delivery_costs.setter
    def delivery_costs(self, delivery_costs):
        """Sets the delivery_costs of this GetOffersResponseOffers.


        :param delivery_costs: The delivery_costs of this GetOffersResponseOffers.  # noqa: E501
        :type: float
        """

        self._delivery_costs = delivery_costs

    @property
    def domain(self):
        """Gets the domain of this GetOffersResponseOffers.  # noqa: E501


        :return: The domain of this GetOffersResponseOffers.  # noqa: E501
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this GetOffersResponseOffers.


        :param domain: The domain of this GetOffersResponseOffers.  # noqa: E501
        :type: str
        """

        self._domain = domain

    @property
    def max_delivery_time(self):
        """Gets the max_delivery_time of this GetOffersResponseOffers.  # noqa: E501


        :return: The max_delivery_time of this GetOffersResponseOffers.  # noqa: E501
        :rtype: object
        """
        return self._max_delivery_time

    @max_delivery_time.setter
    def max_delivery_time(self, max_delivery_time):
        """Sets the max_delivery_time of this GetOffersResponseOffers.


        :param max_delivery_time: The max_delivery_time of this GetOffersResponseOffers.  # noqa: E501
        :type: object
        """

        self._max_delivery_time = max_delivery_time

    @property
    def min_delivery_time(self):
        """Gets the min_delivery_time of this GetOffersResponseOffers.  # noqa: E501


        :return: The min_delivery_time of this GetOffersResponseOffers.  # noqa: E501
        :rtype: object
        """
        return self._min_delivery_time

    @min_delivery_time.setter
    def min_delivery_time(self, min_delivery_time):
        """Sets the min_delivery_time of this GetOffersResponseOffers.


        :param min_delivery_time: The min_delivery_time of this GetOffersResponseOffers.  # noqa: E501
        :type: object
        """

        self._min_delivery_time = min_delivery_time

    @property
    def price(self):
        """Gets the price of this GetOffersResponseOffers.  # noqa: E501


        :return: The price of this GetOffersResponseOffers.  # noqa: E501
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this GetOffersResponseOffers.


        :param price: The price of this GetOffersResponseOffers.  # noqa: E501
        :type: float
        """

        self._price = price

    @property
    def product_name(self):
        """Gets the product_name of this GetOffersResponseOffers.  # noqa: E501


        :return: The product_name of this GetOffersResponseOffers.  # noqa: E501
        :rtype: str
        """
        return self._product_name

    @product_name.setter
    def product_name(self, product_name):
        """Sets the product_name of this GetOffersResponseOffers.


        :param product_name: The product_name of this GetOffersResponseOffers.  # noqa: E501
        :type: str
        """

        self._product_name = product_name

    @property
    def url(self):
        """Gets the url of this GetOffersResponseOffers.  # noqa: E501


        :return: The url of this GetOffersResponseOffers.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this GetOffersResponseOffers.


        :param url: The url of this GetOffersResponseOffers.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def vendor(self):
        """Gets the vendor of this GetOffersResponseOffers.  # noqa: E501


        :return: The vendor of this GetOffersResponseOffers.  # noqa: E501
        :rtype: str
        """
        return self._vendor

    @vendor.setter
    def vendor(self, vendor):
        """Sets the vendor of this GetOffersResponseOffers.


        :param vendor: The vendor of this GetOffersResponseOffers.  # noqa: E501
        :type: str
        """

        self._vendor = vendor

    @property
    def vendor_id_on_domain(self):
        """Gets the vendor_id_on_domain of this GetOffersResponseOffers.  # noqa: E501


        :return: The vendor_id_on_domain of this GetOffersResponseOffers.  # noqa: E501
        :rtype: str
        """
        return self._vendor_id_on_domain

    @vendor_id_on_domain.setter
    def vendor_id_on_domain(self, vendor_id_on_domain):
        """Sets the vendor_id_on_domain of this GetOffersResponseOffers.


        :param vendor_id_on_domain: The vendor_id_on_domain of this GetOffersResponseOffers.  # noqa: E501
        :type: str
        """

        self._vendor_id_on_domain = vendor_id_on_domain

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetOffersResponseOffers):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GetOffersResponseOffers):
            return True

        return self.to_dict() != other.to_dict()
