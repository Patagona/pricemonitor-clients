# coding: utf-8

"""
    Pricemonitor API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.0.5978
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from pricemonitor_api_client.configuration import Configuration


class ComPatagonaPricemonitorShareApiPostAccessTokenResponseV3(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'refresh_token_id': 'float',
        'token_type': 'str',
        'expires_in_seconds': 'int',
        'refresh_token': 'str',
        'access_token': 'str'
    }

    attribute_map = {
        'refresh_token_id': 'refreshTokenId',
        'token_type': 'tokenType',
        'expires_in_seconds': 'expiresInSeconds',
        'refresh_token': 'refreshToken',
        'access_token': 'accessToken'
    }

    def __init__(self, refresh_token_id=None, token_type=None, expires_in_seconds=None, refresh_token=None, access_token=None, local_vars_configuration=None):  # noqa: E501
        """ComPatagonaPricemonitorShareApiPostAccessTokenResponseV3 - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._refresh_token_id = None
        self._token_type = None
        self._expires_in_seconds = None
        self._refresh_token = None
        self._access_token = None
        self.discriminator = None

        self.refresh_token_id = refresh_token_id
        self.token_type = token_type
        self.expires_in_seconds = expires_in_seconds
        self.refresh_token = refresh_token
        self.access_token = access_token

    @property
    def refresh_token_id(self):
        """Gets the refresh_token_id of this ComPatagonaPricemonitorShareApiPostAccessTokenResponseV3.  # noqa: E501

        Refresh token id. This id would be required, in addition to {{refreshToken}}, to obtain new access token.  # noqa: E501

        :return: The refresh_token_id of this ComPatagonaPricemonitorShareApiPostAccessTokenResponseV3.  # noqa: E501
        :rtype: float
        """
        return self._refresh_token_id

    @refresh_token_id.setter
    def refresh_token_id(self, refresh_token_id):
        """Sets the refresh_token_id of this ComPatagonaPricemonitorShareApiPostAccessTokenResponseV3.

        Refresh token id. This id would be required, in addition to {{refreshToken}}, to obtain new access token.  # noqa: E501

        :param refresh_token_id: The refresh_token_id of this ComPatagonaPricemonitorShareApiPostAccessTokenResponseV3.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and refresh_token_id is None:  # noqa: E501
            raise ValueError("Invalid value for `refresh_token_id`, must not be `None`")  # noqa: E501

        self._refresh_token_id = refresh_token_id

    @property
    def token_type(self):
        """Gets the token_type of this ComPatagonaPricemonitorShareApiPostAccessTokenResponseV3.  # noqa: E501

        Currently only one token type is supported: \"bearer\".  # noqa: E501

        :return: The token_type of this ComPatagonaPricemonitorShareApiPostAccessTokenResponseV3.  # noqa: E501
        :rtype: str
        """
        return self._token_type

    @token_type.setter
    def token_type(self, token_type):
        """Sets the token_type of this ComPatagonaPricemonitorShareApiPostAccessTokenResponseV3.

        Currently only one token type is supported: \"bearer\".  # noqa: E501

        :param token_type: The token_type of this ComPatagonaPricemonitorShareApiPostAccessTokenResponseV3.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and token_type is None:  # noqa: E501
            raise ValueError("Invalid value for `token_type`, must not be `None`")  # noqa: E501

        self._token_type = token_type

    @property
    def expires_in_seconds(self):
        """Gets the expires_in_seconds of this ComPatagonaPricemonitorShareApiPostAccessTokenResponseV3.  # noqa: E501

        This specifies the time in seconds how long a token is valid. (Default: 900s)  # noqa: E501

        :return: The expires_in_seconds of this ComPatagonaPricemonitorShareApiPostAccessTokenResponseV3.  # noqa: E501
        :rtype: int
        """
        return self._expires_in_seconds

    @expires_in_seconds.setter
    def expires_in_seconds(self, expires_in_seconds):
        """Sets the expires_in_seconds of this ComPatagonaPricemonitorShareApiPostAccessTokenResponseV3.

        This specifies the time in seconds how long a token is valid. (Default: 900s)  # noqa: E501

        :param expires_in_seconds: The expires_in_seconds of this ComPatagonaPricemonitorShareApiPostAccessTokenResponseV3.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and expires_in_seconds is None:  # noqa: E501
            raise ValueError("Invalid value for `expires_in_seconds`, must not be `None`")  # noqa: E501

        self._expires_in_seconds = expires_in_seconds

    @property
    def refresh_token(self):
        """Gets the refresh_token of this ComPatagonaPricemonitorShareApiPostAccessTokenResponseV3.  # noqa: E501

        If the access token will expire, then a refresh token is used to obtain new access token. Please note that refresh token has an expiration period of 1w. This means that after this period, one could not obtain new access token with expired refresh token.  # noqa: E501

        :return: The refresh_token of this ComPatagonaPricemonitorShareApiPostAccessTokenResponseV3.  # noqa: E501
        :rtype: str
        """
        return self._refresh_token

    @refresh_token.setter
    def refresh_token(self, refresh_token):
        """Sets the refresh_token of this ComPatagonaPricemonitorShareApiPostAccessTokenResponseV3.

        If the access token will expire, then a refresh token is used to obtain new access token. Please note that refresh token has an expiration period of 1w. This means that after this period, one could not obtain new access token with expired refresh token.  # noqa: E501

        :param refresh_token: The refresh_token of this ComPatagonaPricemonitorShareApiPostAccessTokenResponseV3.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and refresh_token is None:  # noqa: E501
            raise ValueError("Invalid value for `refresh_token`, must not be `None`")  # noqa: E501

        self._refresh_token = refresh_token

    @property
    def access_token(self):
        """Gets the access_token of this ComPatagonaPricemonitorShareApiPostAccessTokenResponseV3.  # noqa: E501

        Access token in JSON Web Token (JWT) format. It ensures that a customer application is authorized to access the protected resources.  # noqa: E501

        :return: The access_token of this ComPatagonaPricemonitorShareApiPostAccessTokenResponseV3.  # noqa: E501
        :rtype: str
        """
        return self._access_token

    @access_token.setter
    def access_token(self, access_token):
        """Sets the access_token of this ComPatagonaPricemonitorShareApiPostAccessTokenResponseV3.

        Access token in JSON Web Token (JWT) format. It ensures that a customer application is authorized to access the protected resources.  # noqa: E501

        :param access_token: The access_token of this ComPatagonaPricemonitorShareApiPostAccessTokenResponseV3.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and access_token is None:  # noqa: E501
            raise ValueError("Invalid value for `access_token`, must not be `None`")  # noqa: E501

        self._access_token = access_token

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ComPatagonaPricemonitorShareApiPostAccessTokenResponseV3):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ComPatagonaPricemonitorShareApiPostAccessTokenResponseV3):
            return True

        return self.to_dict() != other.to_dict()
