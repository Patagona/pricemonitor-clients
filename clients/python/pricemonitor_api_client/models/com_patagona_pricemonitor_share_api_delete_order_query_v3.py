# coding: utf-8

"""
    Omnia 2.0 API The Omnia 2.0 API is RESTful and provides access to the backend of Omnia 2.0 and Pricemonitor. It is used to manage products, offers, contracts and more.

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.0.6991
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from pricemonitor_api_client.configuration import Configuration


class ComPatagonaPricemonitorShareApiDeleteOrderQueryV3(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'order_id': 'str',
        'creation_date': 'datetime'
    }

    attribute_map = {
        'order_id': 'orderId',
        'creation_date': 'creationDate'
    }

    def __init__(self, order_id=None, creation_date=None, local_vars_configuration=None):  # noqa: E501
        """ComPatagonaPricemonitorShareApiDeleteOrderQueryV3 - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._order_id = None
        self._creation_date = None
        self.discriminator = None

        self.order_id = order_id
        self.creation_date = creation_date

    @property
    def order_id(self):
        """Gets the order_id of this ComPatagonaPricemonitorShareApiDeleteOrderQueryV3.  # noqa: E501

        Unique identifier of the order  # noqa: E501

        :return: The order_id of this ComPatagonaPricemonitorShareApiDeleteOrderQueryV3.  # noqa: E501
        :rtype: str
        """
        return self._order_id

    @order_id.setter
    def order_id(self, order_id):
        """Sets the order_id of this ComPatagonaPricemonitorShareApiDeleteOrderQueryV3.

        Unique identifier of the order  # noqa: E501

        :param order_id: The order_id of this ComPatagonaPricemonitorShareApiDeleteOrderQueryV3.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and order_id is None:  # noqa: E501
            raise ValueError("Invalid value for `order_id`, must not be `None`")  # noqa: E501

        self._order_id = order_id

    @property
    def creation_date(self):
        """Gets the creation_date of this ComPatagonaPricemonitorShareApiDeleteOrderQueryV3.  # noqa: E501

        Creation date of the corresponding order. It is a Timestamp in UTC time zone  # noqa: E501

        :return: The creation_date of this ComPatagonaPricemonitorShareApiDeleteOrderQueryV3.  # noqa: E501
        :rtype: datetime
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this ComPatagonaPricemonitorShareApiDeleteOrderQueryV3.

        Creation date of the corresponding order. It is a Timestamp in UTC time zone  # noqa: E501

        :param creation_date: The creation_date of this ComPatagonaPricemonitorShareApiDeleteOrderQueryV3.  # noqa: E501
        :type: datetime
        """
        if self.local_vars_configuration.client_side_validation and creation_date is None:  # noqa: E501
            raise ValueError("Invalid value for `creation_date`, must not be `None`")  # noqa: E501

        self._creation_date = creation_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ComPatagonaPricemonitorShareApiDeleteOrderQueryV3):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ComPatagonaPricemonitorShareApiDeleteOrderQueryV3):
            return True

        return self.to_dict() != other.to_dict()
