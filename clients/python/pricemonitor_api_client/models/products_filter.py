# coding: utf-8

"""
    Omnia 2.0 API The Omnia 2.0 API is RESTful and provides access to the backend of Omnia 2.0 and Pricemonitor. It is used to manage products, offers, contracts and more.

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.0.6952
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from pricemonitor_api_client.configuration import Configuration


class ProductsFilter(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'type': 'str',
        'left': 'object',
        'right': 'object',
        'comparison': 'str'
    }

    attribute_map = {
        'type': 'type',
        'left': 'left',
        'right': 'right',
        'comparison': 'comparison'
    }

    def __init__(self, type=None, left=None, right=None, comparison=None, local_vars_configuration=None):  # noqa: E501
        """ProductsFilter - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._type = None
        self._left = None
        self._right = None
        self._comparison = None
        self.discriminator = None

        if type is not None:
            self.type = type
        if left is not None:
            self.left = left
        if right is not None:
            self.right = right
        if comparison is not None:
            self.comparison = comparison

    @property
    def type(self):
        """Gets the type of this ProductsFilter.  # noqa: E501


        :return: The type of this ProductsFilter.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ProductsFilter.


        :param type: The type of this ProductsFilter.  # noqa: E501
        :type: str
        """
        allowed_values = ["ComparisonFilter"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def left(self):
        """Gets the left of this ProductsFilter.  # noqa: E501


        :return: The left of this ProductsFilter.  # noqa: E501
        :rtype: object
        """
        return self._left

    @left.setter
    def left(self, left):
        """Sets the left of this ProductsFilter.


        :param left: The left of this ProductsFilter.  # noqa: E501
        :type: object
        """

        self._left = left

    @property
    def right(self):
        """Gets the right of this ProductsFilter.  # noqa: E501


        :return: The right of this ProductsFilter.  # noqa: E501
        :rtype: object
        """
        return self._right

    @right.setter
    def right(self, right):
        """Sets the right of this ProductsFilter.


        :param right: The right of this ProductsFilter.  # noqa: E501
        :type: object
        """

        self._right = right

    @property
    def comparison(self):
        """Gets the comparison of this ProductsFilter.  # noqa: E501


        :return: The comparison of this ProductsFilter.  # noqa: E501
        :rtype: str
        """
        return self._comparison

    @comparison.setter
    def comparison(self, comparison):
        """Sets the comparison of this ProductsFilter.


        :param comparison: The comparison of this ProductsFilter.  # noqa: E501
        :type: str
        """
        allowed_values = ["StringInSequence"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and comparison not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `comparison` ({0}), must be one of {1}"  # noqa: E501
                .format(comparison, allowed_values)
            )

        self._comparison = comparison

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProductsFilter):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ProductsFilter):
            return True

        return self.to_dict() != other.to_dict()
