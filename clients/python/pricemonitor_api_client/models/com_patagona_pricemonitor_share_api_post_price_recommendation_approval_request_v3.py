# coding: utf-8

"""
    Omnia 2.0 API The Omnia 2.0 API is RESTful and provides access to the backend of Omnia 2.0 and Pricemonitor. It is used to manage products, offers, contracts, and more.  This API supports both public endpoints for customer integration and internal endpoints for platform management. All endpoints are authenticated using either Basic Authentication or JWT Bearer tokens.

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.0.7270
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from pricemonitor_api_client.configuration import Configuration


class ComPatagonaPricemonitorShareApiPostPriceRecommendationApprovalRequestV3(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'decision': 'str',
        'approval_created_at': 'datetime',
        'comment': 'str',
        'product_id': 'str',
        'overwrite_price': 'float'
    }

    attribute_map = {
        'decision': 'decision',
        'approval_created_at': 'approvalCreatedAt',
        'comment': 'comment',
        'product_id': 'productId',
        'overwrite_price': 'overwritePrice'
    }

    def __init__(self, decision=None, approval_created_at=None, comment=None, product_id=None, overwrite_price=None, local_vars_configuration=None):  # noqa: E501
        """ComPatagonaPricemonitorShareApiPostPriceRecommendationApprovalRequestV3 - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._decision = None
        self._approval_created_at = None
        self._comment = None
        self._product_id = None
        self._overwrite_price = None
        self.discriminator = None

        self.decision = decision
        self.approval_created_at = approval_created_at
        if comment is not None:
            self.comment = comment
        self.product_id = product_id
        if overwrite_price is not None:
            self.overwrite_price = overwrite_price

    @property
    def decision(self):
        """Gets the decision of this ComPatagonaPricemonitorShareApiPostPriceRecommendationApprovalRequestV3.  # noqa: E501

        The decision made on the approval.<br> Allowed values: \"approved\", \"rejected\", or \"overwritten\".  # noqa: E501

        :return: The decision of this ComPatagonaPricemonitorShareApiPostPriceRecommendationApprovalRequestV3.  # noqa: E501
        :rtype: str
        """
        return self._decision

    @decision.setter
    def decision(self, decision):
        """Sets the decision of this ComPatagonaPricemonitorShareApiPostPriceRecommendationApprovalRequestV3.

        The decision made on the approval.<br> Allowed values: \"approved\", \"rejected\", or \"overwritten\".  # noqa: E501

        :param decision: The decision of this ComPatagonaPricemonitorShareApiPostPriceRecommendationApprovalRequestV3.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and decision is None:  # noqa: E501
            raise ValueError("Invalid value for `decision`, must not be `None`")  # noqa: E501

        self._decision = decision

    @property
    def approval_created_at(self):
        """Gets the approval_created_at of this ComPatagonaPricemonitorShareApiPostPriceRecommendationApprovalRequestV3.  # noqa: E501

        The timestamp when the approval was created, in ISO 8601 format.  # noqa: E501

        :return: The approval_created_at of this ComPatagonaPricemonitorShareApiPostPriceRecommendationApprovalRequestV3.  # noqa: E501
        :rtype: datetime
        """
        return self._approval_created_at

    @approval_created_at.setter
    def approval_created_at(self, approval_created_at):
        """Sets the approval_created_at of this ComPatagonaPricemonitorShareApiPostPriceRecommendationApprovalRequestV3.

        The timestamp when the approval was created, in ISO 8601 format.  # noqa: E501

        :param approval_created_at: The approval_created_at of this ComPatagonaPricemonitorShareApiPostPriceRecommendationApprovalRequestV3.  # noqa: E501
        :type: datetime
        """
        if self.local_vars_configuration.client_side_validation and approval_created_at is None:  # noqa: E501
            raise ValueError("Invalid value for `approval_created_at`, must not be `None`")  # noqa: E501

        self._approval_created_at = approval_created_at

    @property
    def comment(self):
        """Gets the comment of this ComPatagonaPricemonitorShareApiPostPriceRecommendationApprovalRequestV3.  # noqa: E501

        An optional comment regarding the decision.  # noqa: E501

        :return: The comment of this ComPatagonaPricemonitorShareApiPostPriceRecommendationApprovalRequestV3.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this ComPatagonaPricemonitorShareApiPostPriceRecommendationApprovalRequestV3.

        An optional comment regarding the decision.  # noqa: E501

        :param comment: The comment of this ComPatagonaPricemonitorShareApiPostPriceRecommendationApprovalRequestV3.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def product_id(self):
        """Gets the product_id of this ComPatagonaPricemonitorShareApiPostPriceRecommendationApprovalRequestV3.  # noqa: E501

        The internal unique product identifier of Omnia 2.0.  # noqa: E501

        :return: The product_id of this ComPatagonaPricemonitorShareApiPostPriceRecommendationApprovalRequestV3.  # noqa: E501
        :rtype: str
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """Sets the product_id of this ComPatagonaPricemonitorShareApiPostPriceRecommendationApprovalRequestV3.

        The internal unique product identifier of Omnia 2.0.  # noqa: E501

        :param product_id: The product_id of this ComPatagonaPricemonitorShareApiPostPriceRecommendationApprovalRequestV3.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and product_id is None:  # noqa: E501
            raise ValueError("Invalid value for `product_id`, must not be `None`")  # noqa: E501

        self._product_id = product_id

    @property
    def overwrite_price(self):
        """Gets the overwrite_price of this ComPatagonaPricemonitorShareApiPostPriceRecommendationApprovalRequestV3.  # noqa: E501

        The manual price set by the user when the decision is \"overwritten\", if applicable.<br> Must be provided and be ≥ 0.01 when decision is \"overwritten\".<br> Must **not** be set for other decision values.  # noqa: E501

        :return: The overwrite_price of this ComPatagonaPricemonitorShareApiPostPriceRecommendationApprovalRequestV3.  # noqa: E501
        :rtype: float
        """
        return self._overwrite_price

    @overwrite_price.setter
    def overwrite_price(self, overwrite_price):
        """Sets the overwrite_price of this ComPatagonaPricemonitorShareApiPostPriceRecommendationApprovalRequestV3.

        The manual price set by the user when the decision is \"overwritten\", if applicable.<br> Must be provided and be ≥ 0.01 when decision is \"overwritten\".<br> Must **not** be set for other decision values.  # noqa: E501

        :param overwrite_price: The overwrite_price of this ComPatagonaPricemonitorShareApiPostPriceRecommendationApprovalRequestV3.  # noqa: E501
        :type: float
        """

        self._overwrite_price = overwrite_price

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ComPatagonaPricemonitorShareApiPostPriceRecommendationApprovalRequestV3):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ComPatagonaPricemonitorShareApiPostPriceRecommendationApprovalRequestV3):
            return True

        return self.to_dict() != other.to_dict()
