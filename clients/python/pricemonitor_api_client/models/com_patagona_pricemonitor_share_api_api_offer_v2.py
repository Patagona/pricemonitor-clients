# coding: utf-8

"""
    Omnia 2.0 API The Omnia 2.0 API is RESTful and provides access to the backend of Omnia 2.0 and Pricemonitor. It is used to manage products, offers, contracts and more.

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.0.6872
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from pricemonitor_api_client.configuration import Configuration


class ComPatagonaPricemonitorShareApiApiOfferV2(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'delivery_costs': 'float',
        'url': 'str',
        'vendor_domain_id': 'str',
        'price': 'float',
        'availability': 'bool',
        'attributes': 'list[ComPatagonaPricemonitorShareApiApiOfferAttributeV2]',
        'vendor_name': 'str',
        'retrieval_date': 'datetime',
        'id': 'str',
        'product_name': 'str',
        'currency': 'str',
        'min_delivery_hours': 'int',
        'max_delivery_hours': 'int'
    }

    attribute_map = {
        'delivery_costs': 'deliveryCosts',
        'url': 'url',
        'vendor_domain_id': 'vendorDomainId',
        'price': 'price',
        'availability': 'availability',
        'attributes': 'attributes',
        'vendor_name': 'vendorName',
        'retrieval_date': 'retrievalDate',
        'id': 'id',
        'product_name': 'productName',
        'currency': 'currency',
        'min_delivery_hours': 'minDeliveryHours',
        'max_delivery_hours': 'maxDeliveryHours'
    }

    def __init__(self, delivery_costs=None, url=None, vendor_domain_id=None, price=None, availability=None, attributes=None, vendor_name=None, retrieval_date=None, id=None, product_name=None, currency=None, min_delivery_hours=None, max_delivery_hours=None, local_vars_configuration=None):  # noqa: E501
        """ComPatagonaPricemonitorShareApiApiOfferV2 - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._delivery_costs = None
        self._url = None
        self._vendor_domain_id = None
        self._price = None
        self._availability = None
        self._attributes = None
        self._vendor_name = None
        self._retrieval_date = None
        self._id = None
        self._product_name = None
        self._currency = None
        self._min_delivery_hours = None
        self._max_delivery_hours = None
        self.discriminator = None

        self.delivery_costs = delivery_costs
        self.url = url
        if vendor_domain_id is not None:
            self.vendor_domain_id = vendor_domain_id
        self.price = price
        if availability is not None:
            self.availability = availability
        self.attributes = attributes
        self.vendor_name = vendor_name
        if retrieval_date is not None:
            self.retrieval_date = retrieval_date
        self.id = id
        self.product_name = product_name
        self.currency = currency
        if min_delivery_hours is not None:
            self.min_delivery_hours = min_delivery_hours
        if max_delivery_hours is not None:
            self.max_delivery_hours = max_delivery_hours

    @property
    def delivery_costs(self):
        """Gets the delivery_costs of this ComPatagonaPricemonitorShareApiApiOfferV2.  # noqa: E501

        The additional charges for delivering the product to the customer's location.  # noqa: E501

        :return: The delivery_costs of this ComPatagonaPricemonitorShareApiApiOfferV2.  # noqa: E501
        :rtype: float
        """
        return self._delivery_costs

    @delivery_costs.setter
    def delivery_costs(self, delivery_costs):
        """Sets the delivery_costs of this ComPatagonaPricemonitorShareApiApiOfferV2.

        The additional charges for delivering the product to the customer's location.  # noqa: E501

        :param delivery_costs: The delivery_costs of this ComPatagonaPricemonitorShareApiApiOfferV2.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and delivery_costs is None:  # noqa: E501
            raise ValueError("Invalid value for `delivery_costs`, must not be `None`")  # noqa: E501

        self._delivery_costs = delivery_costs

    @property
    def url(self):
        """Gets the url of this ComPatagonaPricemonitorShareApiApiOfferV2.  # noqa: E501

        The direct link to the product page on the domain where this offer can be found.  # noqa: E501

        :return: The url of this ComPatagonaPricemonitorShareApiApiOfferV2.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this ComPatagonaPricemonitorShareApiApiOfferV2.

        The direct link to the product page on the domain where this offer can be found.  # noqa: E501

        :param url: The url of this ComPatagonaPricemonitorShareApiApiOfferV2.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and url is None:  # noqa: E501
            raise ValueError("Invalid value for `url`, must not be `None`")  # noqa: E501

        self._url = url

    @property
    def vendor_domain_id(self):
        """Gets the vendor_domain_id of this ComPatagonaPricemonitorShareApiApiOfferV2.  # noqa: E501

        Optional identifier representing the vendor on a certain domain.  # noqa: E501

        :return: The vendor_domain_id of this ComPatagonaPricemonitorShareApiApiOfferV2.  # noqa: E501
        :rtype: str
        """
        return self._vendor_domain_id

    @vendor_domain_id.setter
    def vendor_domain_id(self, vendor_domain_id):
        """Sets the vendor_domain_id of this ComPatagonaPricemonitorShareApiApiOfferV2.

        Optional identifier representing the vendor on a certain domain.  # noqa: E501

        :param vendor_domain_id: The vendor_domain_id of this ComPatagonaPricemonitorShareApiApiOfferV2.  # noqa: E501
        :type: str
        """

        self._vendor_domain_id = vendor_domain_id

    @property
    def price(self):
        """Gets the price of this ComPatagonaPricemonitorShareApiApiOfferV2.  # noqa: E501

        The current listed unit price of the product.  # noqa: E501

        :return: The price of this ComPatagonaPricemonitorShareApiApiOfferV2.  # noqa: E501
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this ComPatagonaPricemonitorShareApiApiOfferV2.

        The current listed unit price of the product.  # noqa: E501

        :param price: The price of this ComPatagonaPricemonitorShareApiApiOfferV2.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and price is None:  # noqa: E501
            raise ValueError("Invalid value for `price`, must not be `None`")  # noqa: E501

        self._price = price

    @property
    def availability(self):
        """Gets the availability of this ComPatagonaPricemonitorShareApiApiOfferV2.  # noqa: E501

        An optional flag indicating whether the product is currently in stock and available for purchase.  # noqa: E501

        :return: The availability of this ComPatagonaPricemonitorShareApiApiOfferV2.  # noqa: E501
        :rtype: bool
        """
        return self._availability

    @availability.setter
    def availability(self, availability):
        """Sets the availability of this ComPatagonaPricemonitorShareApiApiOfferV2.

        An optional flag indicating whether the product is currently in stock and available for purchase.  # noqa: E501

        :param availability: The availability of this ComPatagonaPricemonitorShareApiApiOfferV2.  # noqa: E501
        :type: bool
        """

        self._availability = availability

    @property
    def attributes(self):
        """Gets the attributes of this ComPatagonaPricemonitorShareApiApiOfferV2.  # noqa: E501

        A list of additional offer details.  # noqa: E501

        :return: The attributes of this ComPatagonaPricemonitorShareApiApiOfferV2.  # noqa: E501
        :rtype: list[ComPatagonaPricemonitorShareApiApiOfferAttributeV2]
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this ComPatagonaPricemonitorShareApiApiOfferV2.

        A list of additional offer details.  # noqa: E501

        :param attributes: The attributes of this ComPatagonaPricemonitorShareApiApiOfferV2.  # noqa: E501
        :type: list[ComPatagonaPricemonitorShareApiApiOfferAttributeV2]
        """
        if self.local_vars_configuration.client_side_validation and attributes is None:  # noqa: E501
            raise ValueError("Invalid value for `attributes`, must not be `None`")  # noqa: E501

        self._attributes = attributes

    @property
    def vendor_name(self):
        """Gets the vendor_name of this ComPatagonaPricemonitorShareApiApiOfferV2.  # noqa: E501

        The display name of the shop which sells the product.  # noqa: E501

        :return: The vendor_name of this ComPatagonaPricemonitorShareApiApiOfferV2.  # noqa: E501
        :rtype: str
        """
        return self._vendor_name

    @vendor_name.setter
    def vendor_name(self, vendor_name):
        """Sets the vendor_name of this ComPatagonaPricemonitorShareApiApiOfferV2.

        The display name of the shop which sells the product.  # noqa: E501

        :param vendor_name: The vendor_name of this ComPatagonaPricemonitorShareApiApiOfferV2.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and vendor_name is None:  # noqa: E501
            raise ValueError("Invalid value for `vendor_name`, must not be `None`")  # noqa: E501

        self._vendor_name = vendor_name

    @property
    def retrieval_date(self):
        """Gets the retrieval_date of this ComPatagonaPricemonitorShareApiApiOfferV2.  # noqa: E501

        Optional timestamp based on ISO 8601 when this offer information was last fetched from the domain.  # noqa: E501

        :return: The retrieval_date of this ComPatagonaPricemonitorShareApiApiOfferV2.  # noqa: E501
        :rtype: datetime
        """
        return self._retrieval_date

    @retrieval_date.setter
    def retrieval_date(self, retrieval_date):
        """Sets the retrieval_date of this ComPatagonaPricemonitorShareApiApiOfferV2.

        Optional timestamp based on ISO 8601 when this offer information was last fetched from the domain.  # noqa: E501

        :param retrieval_date: The retrieval_date of this ComPatagonaPricemonitorShareApiApiOfferV2.  # noqa: E501
        :type: datetime
        """

        self._retrieval_date = retrieval_date

    @property
    def id(self):
        """Gets the id of this ComPatagonaPricemonitorShareApiApiOfferV2.  # noqa: E501

        A unique identifier for the offer. It's crucial that it's unique across all offers independent of the timestamp. If you don't have a unique identifier then please use a UUID.  # noqa: E501

        :return: The id of this ComPatagonaPricemonitorShareApiApiOfferV2.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ComPatagonaPricemonitorShareApiApiOfferV2.

        A unique identifier for the offer. It's crucial that it's unique across all offers independent of the timestamp. If you don't have a unique identifier then please use a UUID.  # noqa: E501

        :param id: The id of this ComPatagonaPricemonitorShareApiApiOfferV2.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def product_name(self):
        """Gets the product_name of this ComPatagonaPricemonitorShareApiApiOfferV2.  # noqa: E501

        The name of the product as listed on the domain.  # noqa: E501

        :return: The product_name of this ComPatagonaPricemonitorShareApiApiOfferV2.  # noqa: E501
        :rtype: str
        """
        return self._product_name

    @product_name.setter
    def product_name(self, product_name):
        """Sets the product_name of this ComPatagonaPricemonitorShareApiApiOfferV2.

        The name of the product as listed on the domain.  # noqa: E501

        :param product_name: The product_name of this ComPatagonaPricemonitorShareApiApiOfferV2.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and product_name is None:  # noqa: E501
            raise ValueError("Invalid value for `product_name`, must not be `None`")  # noqa: E501

        self._product_name = product_name

    @property
    def currency(self):
        """Gets the currency of this ComPatagonaPricemonitorShareApiApiOfferV2.  # noqa: E501

        The currency in which the price and delivery costs are expressed. Allowed values are ISO 4217 currency codes like \"EUR\".  # noqa: E501

        :return: The currency of this ComPatagonaPricemonitorShareApiApiOfferV2.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this ComPatagonaPricemonitorShareApiApiOfferV2.

        The currency in which the price and delivery costs are expressed. Allowed values are ISO 4217 currency codes like \"EUR\".  # noqa: E501

        :param currency: The currency of this ComPatagonaPricemonitorShareApiApiOfferV2.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and currency is None:  # noqa: E501
            raise ValueError("Invalid value for `currency`, must not be `None`")  # noqa: E501

        self._currency = currency

    @property
    def min_delivery_hours(self):
        """Gets the min_delivery_hours of this ComPatagonaPricemonitorShareApiApiOfferV2.  # noqa: E501

        Optional minimum time, in hours, it takes for the product to be delivered to the customer.  # noqa: E501

        :return: The min_delivery_hours of this ComPatagonaPricemonitorShareApiApiOfferV2.  # noqa: E501
        :rtype: int
        """
        return self._min_delivery_hours

    @min_delivery_hours.setter
    def min_delivery_hours(self, min_delivery_hours):
        """Sets the min_delivery_hours of this ComPatagonaPricemonitorShareApiApiOfferV2.

        Optional minimum time, in hours, it takes for the product to be delivered to the customer.  # noqa: E501

        :param min_delivery_hours: The min_delivery_hours of this ComPatagonaPricemonitorShareApiApiOfferV2.  # noqa: E501
        :type: int
        """

        self._min_delivery_hours = min_delivery_hours

    @property
    def max_delivery_hours(self):
        """Gets the max_delivery_hours of this ComPatagonaPricemonitorShareApiApiOfferV2.  # noqa: E501

        Optional maximum time, in hours, it takes for the product to be delivered to the customer.  # noqa: E501

        :return: The max_delivery_hours of this ComPatagonaPricemonitorShareApiApiOfferV2.  # noqa: E501
        :rtype: int
        """
        return self._max_delivery_hours

    @max_delivery_hours.setter
    def max_delivery_hours(self, max_delivery_hours):
        """Sets the max_delivery_hours of this ComPatagonaPricemonitorShareApiApiOfferV2.

        Optional maximum time, in hours, it takes for the product to be delivered to the customer.  # noqa: E501

        :param max_delivery_hours: The max_delivery_hours of this ComPatagonaPricemonitorShareApiApiOfferV2.  # noqa: E501
        :type: int
        """

        self._max_delivery_hours = max_delivery_hours

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ComPatagonaPricemonitorShareApiApiOfferV2):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ComPatagonaPricemonitorShareApiApiOfferV2):
            return True

        return self.to_dict() != other.to_dict()
