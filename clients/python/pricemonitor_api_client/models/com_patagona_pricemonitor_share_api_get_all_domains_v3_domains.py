# coding: utf-8

"""
    Omnia 2.0 API The Omnia 2.0 API is RESTful and provides access to the backend of Omnia 2.0 and Pricemonitor. It is used to manage products, offers, contracts and more.

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.0.7062
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from pricemonitor_api_client.configuration import Configuration


class ComPatagonaPricemonitorShareApiGetAllDomainsV3Domains(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'domain': 'str',
        'domain_id': 'float',
        'offer_sources': 'list[str]',
        'name': 'str'
    }

    attribute_map = {
        'domain': 'domain',
        'domain_id': 'domainId',
        'offer_sources': 'offerSources',
        'name': 'name'
    }

    def __init__(self, domain=None, domain_id=None, offer_sources=None, name=None, local_vars_configuration=None):  # noqa: E501
        """ComPatagonaPricemonitorShareApiGetAllDomainsV3Domains - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._domain = None
        self._domain_id = None
        self._offer_sources = None
        self._name = None
        self.discriminator = None

        self.domain = domain
        self.domain_id = domain_id
        self.offer_sources = offer_sources
        self.name = name

    @property
    def domain(self):
        """Gets the domain of this ComPatagonaPricemonitorShareApiGetAllDomainsV3Domains.  # noqa: E501

        domain url  # noqa: E501

        :return: The domain of this ComPatagonaPricemonitorShareApiGetAllDomainsV3Domains.  # noqa: E501
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this ComPatagonaPricemonitorShareApiGetAllDomainsV3Domains.

        domain url  # noqa: E501

        :param domain: The domain of this ComPatagonaPricemonitorShareApiGetAllDomainsV3Domains.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and domain is None:  # noqa: E501
            raise ValueError("Invalid value for `domain`, must not be `None`")  # noqa: E501

        self._domain = domain

    @property
    def domain_id(self):
        """Gets the domain_id of this ComPatagonaPricemonitorShareApiGetAllDomainsV3Domains.  # noqa: E501

        internal domain id  # noqa: E501

        :return: The domain_id of this ComPatagonaPricemonitorShareApiGetAllDomainsV3Domains.  # noqa: E501
        :rtype: float
        """
        return self._domain_id

    @domain_id.setter
    def domain_id(self, domain_id):
        """Sets the domain_id of this ComPatagonaPricemonitorShareApiGetAllDomainsV3Domains.

        internal domain id  # noqa: E501

        :param domain_id: The domain_id of this ComPatagonaPricemonitorShareApiGetAllDomainsV3Domains.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and domain_id is None:  # noqa: E501
            raise ValueError("Invalid value for `domain_id`, must not be `None`")  # noqa: E501

        self._domain_id = domain_id

    @property
    def offer_sources(self):
        """Gets the offer_sources of this ComPatagonaPricemonitorShareApiGetAllDomainsV3Domains.  # noqa: E501

        list of offerSources for the domain OfferSource:  Describes the origin of the offers. Domain may have more than one offer sources. Here are the possible offer sources: DEFAULT_MONITORING Offers - which are gathered via the monitoring-pipeline by a standard product search. This is typically done via GTIN. CUSTOM_MONITORING Offers - which are gathered via the monitoring-pipeline by a customized search. For instance via tags. OMNIA_CUSTOM_SPIDERING Offers - which originate from omnia custom spidering sources. The domain needs to be prefixed with \"omnia.custom.spidering.\". PUSH_API Offers - which originate from services where we have a direct API connection and get informed about offer changes. Example: Offers from Amazon-Repricer OTHER Offers - which originate from other sources e.g. Scripts which publish offers  # noqa: E501

        :return: The offer_sources of this ComPatagonaPricemonitorShareApiGetAllDomainsV3Domains.  # noqa: E501
        :rtype: list[str]
        """
        return self._offer_sources

    @offer_sources.setter
    def offer_sources(self, offer_sources):
        """Sets the offer_sources of this ComPatagonaPricemonitorShareApiGetAllDomainsV3Domains.

        list of offerSources for the domain OfferSource:  Describes the origin of the offers. Domain may have more than one offer sources. Here are the possible offer sources: DEFAULT_MONITORING Offers - which are gathered via the monitoring-pipeline by a standard product search. This is typically done via GTIN. CUSTOM_MONITORING Offers - which are gathered via the monitoring-pipeline by a customized search. For instance via tags. OMNIA_CUSTOM_SPIDERING Offers - which originate from omnia custom spidering sources. The domain needs to be prefixed with \"omnia.custom.spidering.\". PUSH_API Offers - which originate from services where we have a direct API connection and get informed about offer changes. Example: Offers from Amazon-Repricer OTHER Offers - which originate from other sources e.g. Scripts which publish offers  # noqa: E501

        :param offer_sources: The offer_sources of this ComPatagonaPricemonitorShareApiGetAllDomainsV3Domains.  # noqa: E501
        :type: list[str]
        """
        if self.local_vars_configuration.client_side_validation and offer_sources is None:  # noqa: E501
            raise ValueError("Invalid value for `offer_sources`, must not be `None`")  # noqa: E501

        self._offer_sources = offer_sources

    @property
    def name(self):
        """Gets the name of this ComPatagonaPricemonitorShareApiGetAllDomainsV3Domains.  # noqa: E501

        display name for the domain  # noqa: E501

        :return: The name of this ComPatagonaPricemonitorShareApiGetAllDomainsV3Domains.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ComPatagonaPricemonitorShareApiGetAllDomainsV3Domains.

        display name for the domain  # noqa: E501

        :param name: The name of this ComPatagonaPricemonitorShareApiGetAllDomainsV3Domains.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ComPatagonaPricemonitorShareApiGetAllDomainsV3Domains):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ComPatagonaPricemonitorShareApiGetAllDomainsV3Domains):
            return True

        return self.to_dict() != other.to_dict()
