# coding: utf-8

"""
    Omnia 2.0 API The Omnia 2.0 API is RESTful and provides access to the backend of Omnia 2.0 and Pricemonitor. It is used to manage products, offers, contracts, and more.  This API supports both public endpoints for customer integration and internal endpoints for platform management. All endpoints are authenticated using either Basic Authentication or JWT Bearer tokens.

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.0.7286
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from pricemonitor_api_client.configuration import Configuration


class ComPatagonaPricemonitorShareApiPaginationResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'next_url': 'str',
        'total_size': 'int',
        'start': 'int',
        'limit': 'int'
    }

    attribute_map = {
        'next_url': 'nextUrl',
        'total_size': 'totalSize',
        'start': 'start',
        'limit': 'limit'
    }

    def __init__(self, next_url=None, total_size=None, start=None, limit=None, local_vars_configuration=None):  # noqa: E501
        """ComPatagonaPricemonitorShareApiPaginationResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._next_url = None
        self._total_size = None
        self._start = None
        self._limit = None
        self.discriminator = None

        if next_url is not None:
            self.next_url = next_url
        self.total_size = total_size
        self.start = start
        self.limit = limit

    @property
    def next_url(self):
        """Gets the next_url of this ComPatagonaPricemonitorShareApiPaginationResponse.  # noqa: E501

        the url that can be called to retrieve the next page, None if th last page has been requested  # noqa: E501

        :return: The next_url of this ComPatagonaPricemonitorShareApiPaginationResponse.  # noqa: E501
        :rtype: str
        """
        return self._next_url

    @next_url.setter
    def next_url(self, next_url):
        """Sets the next_url of this ComPatagonaPricemonitorShareApiPaginationResponse.

        the url that can be called to retrieve the next page, None if th last page has been requested  # noqa: E501

        :param next_url: The next_url of this ComPatagonaPricemonitorShareApiPaginationResponse.  # noqa: E501
        :type: str
        """

        self._next_url = next_url

    @property
    def total_size(self):
        """Gets the total_size of this ComPatagonaPricemonitorShareApiPaginationResponse.  # noqa: E501

        the total number of elements that is paginated over  # noqa: E501

        :return: The total_size of this ComPatagonaPricemonitorShareApiPaginationResponse.  # noqa: E501
        :rtype: int
        """
        return self._total_size

    @total_size.setter
    def total_size(self, total_size):
        """Sets the total_size of this ComPatagonaPricemonitorShareApiPaginationResponse.

        the total number of elements that is paginated over  # noqa: E501

        :param total_size: The total_size of this ComPatagonaPricemonitorShareApiPaginationResponse.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and total_size is None:  # noqa: E501
            raise ValueError("Invalid value for `total_size`, must not be `None`")  # noqa: E501

        self._total_size = total_size

    @property
    def start(self):
        """Gets the start of this ComPatagonaPricemonitorShareApiPaginationResponse.  # noqa: E501

        the start index of the currently requested page  # noqa: E501

        :return: The start of this ComPatagonaPricemonitorShareApiPaginationResponse.  # noqa: E501
        :rtype: int
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this ComPatagonaPricemonitorShareApiPaginationResponse.

        the start index of the currently requested page  # noqa: E501

        :param start: The start of this ComPatagonaPricemonitorShareApiPaginationResponse.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and start is None:  # noqa: E501
            raise ValueError("Invalid value for `start`, must not be `None`")  # noqa: E501

        self._start = start

    @property
    def limit(self):
        """Gets the limit of this ComPatagonaPricemonitorShareApiPaginationResponse.  # noqa: E501

        the number of elements in a full page  # noqa: E501

        :return: The limit of this ComPatagonaPricemonitorShareApiPaginationResponse.  # noqa: E501
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this ComPatagonaPricemonitorShareApiPaginationResponse.

        the number of elements in a full page  # noqa: E501

        :param limit: The limit of this ComPatagonaPricemonitorShareApiPaginationResponse.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and limit is None:  # noqa: E501
            raise ValueError("Invalid value for `limit`, must not be `None`")  # noqa: E501

        self._limit = limit

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ComPatagonaPricemonitorShareApiPaginationResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ComPatagonaPricemonitorShareApiPaginationResponse):
            return True

        return self.to_dict() != other.to_dict()
