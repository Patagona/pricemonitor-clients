# coding: utf-8

"""
    Omnia 2.0 API The Omnia 2.0 API is RESTful and provides access to the backend of Omnia 2.0 and Pricemonitor. It is used to manage products, offers, contracts and more.

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.0.7064
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from pricemonitor_api_client.configuration import Configuration


class ComPatagonaPricemonitorShareApiRoundingPriceRecommendationResult(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'own_offers': 'ComPatagonaPricemonitorShareApiApiOffer',
        'competitor_offers': 'ComPatagonaPricemonitorShareApiApiOffer',
        'min_price_boundary': 'ComPatagonaPricemonitorShareApiPriceBoundaryDetails',
        'original_price_recommendation': 'ComPatagonaPricemonitorShareApiPriceCalculationResult',
        'unit_price_recommendation': 'float',
        'max_price_boundary': 'ComPatagonaPricemonitorShareApiPriceBoundaryDetails',
        'node_id': 'float'
    }

    attribute_map = {
        'own_offers': 'ownOffers',
        'competitor_offers': 'competitorOffers',
        'min_price_boundary': 'minPriceBoundary',
        'original_price_recommendation': 'originalPriceRecommendation',
        'unit_price_recommendation': 'unitPriceRecommendation',
        'max_price_boundary': 'maxPriceBoundary',
        'node_id': 'nodeId'
    }

    def __init__(self, own_offers=None, competitor_offers=None, min_price_boundary=None, original_price_recommendation=None, unit_price_recommendation=None, max_price_boundary=None, node_id=None, local_vars_configuration=None):  # noqa: E501
        """ComPatagonaPricemonitorShareApiRoundingPriceRecommendationResult - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._own_offers = None
        self._competitor_offers = None
        self._min_price_boundary = None
        self._original_price_recommendation = None
        self._unit_price_recommendation = None
        self._max_price_boundary = None
        self._node_id = None
        self.discriminator = None

        if own_offers is not None:
            self.own_offers = own_offers
        if competitor_offers is not None:
            self.competitor_offers = competitor_offers
        self.min_price_boundary = min_price_boundary
        self.original_price_recommendation = original_price_recommendation
        self.unit_price_recommendation = unit_price_recommendation
        self.max_price_boundary = max_price_boundary
        self.node_id = node_id

    @property
    def own_offers(self):
        """Gets the own_offers of this ComPatagonaPricemonitorShareApiRoundingPriceRecommendationResult.  # noqa: E501


        :return: The own_offers of this ComPatagonaPricemonitorShareApiRoundingPriceRecommendationResult.  # noqa: E501
        :rtype: ComPatagonaPricemonitorShareApiApiOffer
        """
        return self._own_offers

    @own_offers.setter
    def own_offers(self, own_offers):
        """Sets the own_offers of this ComPatagonaPricemonitorShareApiRoundingPriceRecommendationResult.


        :param own_offers: The own_offers of this ComPatagonaPricemonitorShareApiRoundingPriceRecommendationResult.  # noqa: E501
        :type: ComPatagonaPricemonitorShareApiApiOffer
        """

        self._own_offers = own_offers

    @property
    def competitor_offers(self):
        """Gets the competitor_offers of this ComPatagonaPricemonitorShareApiRoundingPriceRecommendationResult.  # noqa: E501


        :return: The competitor_offers of this ComPatagonaPricemonitorShareApiRoundingPriceRecommendationResult.  # noqa: E501
        :rtype: ComPatagonaPricemonitorShareApiApiOffer
        """
        return self._competitor_offers

    @competitor_offers.setter
    def competitor_offers(self, competitor_offers):
        """Sets the competitor_offers of this ComPatagonaPricemonitorShareApiRoundingPriceRecommendationResult.


        :param competitor_offers: The competitor_offers of this ComPatagonaPricemonitorShareApiRoundingPriceRecommendationResult.  # noqa: E501
        :type: ComPatagonaPricemonitorShareApiApiOffer
        """

        self._competitor_offers = competitor_offers

    @property
    def min_price_boundary(self):
        """Gets the min_price_boundary of this ComPatagonaPricemonitorShareApiRoundingPriceRecommendationResult.  # noqa: E501


        :return: The min_price_boundary of this ComPatagonaPricemonitorShareApiRoundingPriceRecommendationResult.  # noqa: E501
        :rtype: ComPatagonaPricemonitorShareApiPriceBoundaryDetails
        """
        return self._min_price_boundary

    @min_price_boundary.setter
    def min_price_boundary(self, min_price_boundary):
        """Sets the min_price_boundary of this ComPatagonaPricemonitorShareApiRoundingPriceRecommendationResult.


        :param min_price_boundary: The min_price_boundary of this ComPatagonaPricemonitorShareApiRoundingPriceRecommendationResult.  # noqa: E501
        :type: ComPatagonaPricemonitorShareApiPriceBoundaryDetails
        """
        if self.local_vars_configuration.client_side_validation and min_price_boundary is None:  # noqa: E501
            raise ValueError("Invalid value for `min_price_boundary`, must not be `None`")  # noqa: E501

        self._min_price_boundary = min_price_boundary

    @property
    def original_price_recommendation(self):
        """Gets the original_price_recommendation of this ComPatagonaPricemonitorShareApiRoundingPriceRecommendationResult.  # noqa: E501


        :return: The original_price_recommendation of this ComPatagonaPricemonitorShareApiRoundingPriceRecommendationResult.  # noqa: E501
        :rtype: ComPatagonaPricemonitorShareApiPriceCalculationResult
        """
        return self._original_price_recommendation

    @original_price_recommendation.setter
    def original_price_recommendation(self, original_price_recommendation):
        """Sets the original_price_recommendation of this ComPatagonaPricemonitorShareApiRoundingPriceRecommendationResult.


        :param original_price_recommendation: The original_price_recommendation of this ComPatagonaPricemonitorShareApiRoundingPriceRecommendationResult.  # noqa: E501
        :type: ComPatagonaPricemonitorShareApiPriceCalculationResult
        """
        if self.local_vars_configuration.client_side_validation and original_price_recommendation is None:  # noqa: E501
            raise ValueError("Invalid value for `original_price_recommendation`, must not be `None`")  # noqa: E501

        self._original_price_recommendation = original_price_recommendation

    @property
    def unit_price_recommendation(self):
        """Gets the unit_price_recommendation of this ComPatagonaPricemonitorShareApiRoundingPriceRecommendationResult.  # noqa: E501

        The calculated price recommendation.  # noqa: E501

        :return: The unit_price_recommendation of this ComPatagonaPricemonitorShareApiRoundingPriceRecommendationResult.  # noqa: E501
        :rtype: float
        """
        return self._unit_price_recommendation

    @unit_price_recommendation.setter
    def unit_price_recommendation(self, unit_price_recommendation):
        """Sets the unit_price_recommendation of this ComPatagonaPricemonitorShareApiRoundingPriceRecommendationResult.

        The calculated price recommendation.  # noqa: E501

        :param unit_price_recommendation: The unit_price_recommendation of this ComPatagonaPricemonitorShareApiRoundingPriceRecommendationResult.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and unit_price_recommendation is None:  # noqa: E501
            raise ValueError("Invalid value for `unit_price_recommendation`, must not be `None`")  # noqa: E501

        self._unit_price_recommendation = unit_price_recommendation

    @property
    def max_price_boundary(self):
        """Gets the max_price_boundary of this ComPatagonaPricemonitorShareApiRoundingPriceRecommendationResult.  # noqa: E501


        :return: The max_price_boundary of this ComPatagonaPricemonitorShareApiRoundingPriceRecommendationResult.  # noqa: E501
        :rtype: ComPatagonaPricemonitorShareApiPriceBoundaryDetails
        """
        return self._max_price_boundary

    @max_price_boundary.setter
    def max_price_boundary(self, max_price_boundary):
        """Sets the max_price_boundary of this ComPatagonaPricemonitorShareApiRoundingPriceRecommendationResult.


        :param max_price_boundary: The max_price_boundary of this ComPatagonaPricemonitorShareApiRoundingPriceRecommendationResult.  # noqa: E501
        :type: ComPatagonaPricemonitorShareApiPriceBoundaryDetails
        """
        if self.local_vars_configuration.client_side_validation and max_price_boundary is None:  # noqa: E501
            raise ValueError("Invalid value for `max_price_boundary`, must not be `None`")  # noqa: E501

        self._max_price_boundary = max_price_boundary

    @property
    def node_id(self):
        """Gets the node_id of this ComPatagonaPricemonitorShareApiRoundingPriceRecommendationResult.  # noqa: E501

        The ID of the node which calculated the price.  # noqa: E501

        :return: The node_id of this ComPatagonaPricemonitorShareApiRoundingPriceRecommendationResult.  # noqa: E501
        :rtype: float
        """
        return self._node_id

    @node_id.setter
    def node_id(self, node_id):
        """Sets the node_id of this ComPatagonaPricemonitorShareApiRoundingPriceRecommendationResult.

        The ID of the node which calculated the price.  # noqa: E501

        :param node_id: The node_id of this ComPatagonaPricemonitorShareApiRoundingPriceRecommendationResult.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and node_id is None:  # noqa: E501
            raise ValueError("Invalid value for `node_id`, must not be `None`")  # noqa: E501

        self._node_id = node_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ComPatagonaPricemonitorShareApiRoundingPriceRecommendationResult):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ComPatagonaPricemonitorShareApiRoundingPriceRecommendationResult):
            return True

        return self.to_dict() != other.to_dict()
