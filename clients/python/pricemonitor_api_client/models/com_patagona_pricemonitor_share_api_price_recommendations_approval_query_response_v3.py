# coding: utf-8

"""
    Omnia 2.0 API The Omnia 2.0 API is RESTful and provides access to the backend of Omnia 2.0 and Pricemonitor. It is used to manage products, offers, contracts, and more.  This API supports both public endpoints for customer integration and internal endpoints for platform management. All endpoints are authenticated using either Basic Authentication or JWT Bearer tokens.

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.0.7270
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from pricemonitor_api_client.configuration import Configuration


class ComPatagonaPricemonitorShareApiPriceRecommendationsApprovalQueryResponseV3(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'decisions': 'list[ComPatagonaPricemonitorShareApiPriceApprovalDecisionV3]',
        'updated_at': 'datetime',
        'required_approvals': 'int',
        'price_recommendation': 'ComPatagonaPricemonitorShareApiSqlApiPriceRecommendation',
        'status': 'str',
        'created_at': 'datetime',
        'product_id': 'str'
    }

    attribute_map = {
        'decisions': 'decisions',
        'updated_at': 'updatedAt',
        'required_approvals': 'requiredApprovals',
        'price_recommendation': 'priceRecommendation',
        'status': 'status',
        'created_at': 'createdAt',
        'product_id': 'productId'
    }

    def __init__(self, decisions=None, updated_at=None, required_approvals=None, price_recommendation=None, status=None, created_at=None, product_id=None, local_vars_configuration=None):  # noqa: E501
        """ComPatagonaPricemonitorShareApiPriceRecommendationsApprovalQueryResponseV3 - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._decisions = None
        self._updated_at = None
        self._required_approvals = None
        self._price_recommendation = None
        self._status = None
        self._created_at = None
        self._product_id = None
        self.discriminator = None

        self.decisions = decisions
        self.updated_at = updated_at
        self.required_approvals = required_approvals
        self.price_recommendation = price_recommendation
        self.status = status
        self.created_at = created_at
        self.product_id = product_id

    @property
    def decisions(self):
        """Gets the decisions of this ComPatagonaPricemonitorShareApiPriceRecommendationsApprovalQueryResponseV3.  # noqa: E501

        The sequence of decisions made regarding this approval.  # noqa: E501

        :return: The decisions of this ComPatagonaPricemonitorShareApiPriceRecommendationsApprovalQueryResponseV3.  # noqa: E501
        :rtype: list[ComPatagonaPricemonitorShareApiPriceApprovalDecisionV3]
        """
        return self._decisions

    @decisions.setter
    def decisions(self, decisions):
        """Sets the decisions of this ComPatagonaPricemonitorShareApiPriceRecommendationsApprovalQueryResponseV3.

        The sequence of decisions made regarding this approval.  # noqa: E501

        :param decisions: The decisions of this ComPatagonaPricemonitorShareApiPriceRecommendationsApprovalQueryResponseV3.  # noqa: E501
        :type: list[ComPatagonaPricemonitorShareApiPriceApprovalDecisionV3]
        """
        if self.local_vars_configuration.client_side_validation and decisions is None:  # noqa: E501
            raise ValueError("Invalid value for `decisions`, must not be `None`")  # noqa: E501

        self._decisions = decisions

    @property
    def updated_at(self):
        """Gets the updated_at of this ComPatagonaPricemonitorShareApiPriceRecommendationsApprovalQueryResponseV3.  # noqa: E501

        The timestamp when the approval was last updated, in ISO 8601 format,.  # noqa: E501

        :return: The updated_at of this ComPatagonaPricemonitorShareApiPriceRecommendationsApprovalQueryResponseV3.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this ComPatagonaPricemonitorShareApiPriceRecommendationsApprovalQueryResponseV3.

        The timestamp when the approval was last updated, in ISO 8601 format,.  # noqa: E501

        :param updated_at: The updated_at of this ComPatagonaPricemonitorShareApiPriceRecommendationsApprovalQueryResponseV3.  # noqa: E501
        :type: datetime
        """
        if self.local_vars_configuration.client_side_validation and updated_at is None:  # noqa: E501
            raise ValueError("Invalid value for `updated_at`, must not be `None`")  # noqa: E501

        self._updated_at = updated_at

    @property
    def required_approvals(self):
        """Gets the required_approvals of this ComPatagonaPricemonitorShareApiPriceRecommendationsApprovalQueryResponseV3.  # noqa: E501

        The number of approvals required for a pricing decision (must be ≥ 1).  # noqa: E501

        :return: The required_approvals of this ComPatagonaPricemonitorShareApiPriceRecommendationsApprovalQueryResponseV3.  # noqa: E501
        :rtype: int
        """
        return self._required_approvals

    @required_approvals.setter
    def required_approvals(self, required_approvals):
        """Sets the required_approvals of this ComPatagonaPricemonitorShareApiPriceRecommendationsApprovalQueryResponseV3.

        The number of approvals required for a pricing decision (must be ≥ 1).  # noqa: E501

        :param required_approvals: The required_approvals of this ComPatagonaPricemonitorShareApiPriceRecommendationsApprovalQueryResponseV3.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and required_approvals is None:  # noqa: E501
            raise ValueError("Invalid value for `required_approvals`, must not be `None`")  # noqa: E501

        self._required_approvals = required_approvals

    @property
    def price_recommendation(self):
        """Gets the price_recommendation of this ComPatagonaPricemonitorShareApiPriceRecommendationsApprovalQueryResponseV3.  # noqa: E501


        :return: The price_recommendation of this ComPatagonaPricemonitorShareApiPriceRecommendationsApprovalQueryResponseV3.  # noqa: E501
        :rtype: ComPatagonaPricemonitorShareApiSqlApiPriceRecommendation
        """
        return self._price_recommendation

    @price_recommendation.setter
    def price_recommendation(self, price_recommendation):
        """Sets the price_recommendation of this ComPatagonaPricemonitorShareApiPriceRecommendationsApprovalQueryResponseV3.


        :param price_recommendation: The price_recommendation of this ComPatagonaPricemonitorShareApiPriceRecommendationsApprovalQueryResponseV3.  # noqa: E501
        :type: ComPatagonaPricemonitorShareApiSqlApiPriceRecommendation
        """
        if self.local_vars_configuration.client_side_validation and price_recommendation is None:  # noqa: E501
            raise ValueError("Invalid value for `price_recommendation`, must not be `None`")  # noqa: E501

        self._price_recommendation = price_recommendation

    @property
    def status(self):
        """Gets the status of this ComPatagonaPricemonitorShareApiPriceRecommendationsApprovalQueryResponseV3.  # noqa: E501

        The current approval status. <br> Allowed values: \"pending\", \"approved\", \"rejected\", \"outdated\", or \"overwritten\".  # noqa: E501

        :return: The status of this ComPatagonaPricemonitorShareApiPriceRecommendationsApprovalQueryResponseV3.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ComPatagonaPricemonitorShareApiPriceRecommendationsApprovalQueryResponseV3.

        The current approval status. <br> Allowed values: \"pending\", \"approved\", \"rejected\", \"outdated\", or \"overwritten\".  # noqa: E501

        :param status: The status of this ComPatagonaPricemonitorShareApiPriceRecommendationsApprovalQueryResponseV3.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and status is None:  # noqa: E501
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def created_at(self):
        """Gets the created_at of this ComPatagonaPricemonitorShareApiPriceRecommendationsApprovalQueryResponseV3.  # noqa: E501

        The timestamp when the approval was created, in ISO 8601 format,.  # noqa: E501

        :return: The created_at of this ComPatagonaPricemonitorShareApiPriceRecommendationsApprovalQueryResponseV3.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this ComPatagonaPricemonitorShareApiPriceRecommendationsApprovalQueryResponseV3.

        The timestamp when the approval was created, in ISO 8601 format,.  # noqa: E501

        :param created_at: The created_at of this ComPatagonaPricemonitorShareApiPriceRecommendationsApprovalQueryResponseV3.  # noqa: E501
        :type: datetime
        """
        if self.local_vars_configuration.client_side_validation and created_at is None:  # noqa: E501
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def product_id(self):
        """Gets the product_id of this ComPatagonaPricemonitorShareApiPriceRecommendationsApprovalQueryResponseV3.  # noqa: E501

        The internal unique product identifier of Omnia 2.0.  # noqa: E501

        :return: The product_id of this ComPatagonaPricemonitorShareApiPriceRecommendationsApprovalQueryResponseV3.  # noqa: E501
        :rtype: str
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """Sets the product_id of this ComPatagonaPricemonitorShareApiPriceRecommendationsApprovalQueryResponseV3.

        The internal unique product identifier of Omnia 2.0.  # noqa: E501

        :param product_id: The product_id of this ComPatagonaPricemonitorShareApiPriceRecommendationsApprovalQueryResponseV3.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and product_id is None:  # noqa: E501
            raise ValueError("Invalid value for `product_id`, must not be `None`")  # noqa: E501

        self._product_id = product_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ComPatagonaPricemonitorShareApiPriceRecommendationsApprovalQueryResponseV3):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ComPatagonaPricemonitorShareApiPriceRecommendationsApprovalQueryResponseV3):
            return True

        return self.to_dict() != other.to_dict()
