# coding: utf-8

"""
    Pricemonitor API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.0.6240
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from pricemonitor_api_client.configuration import Configuration


class ComPatagonaPricemonitorShareApiCustomerOrderItemV2(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'item_id': 'str',
        'unit_price': 'float',
        'quantity': 'int',
        'tax_percentage': 'float'
    }

    attribute_map = {
        'item_id': 'itemId',
        'unit_price': 'unitPrice',
        'quantity': 'quantity',
        'tax_percentage': 'taxPercentage'
    }

    def __init__(self, item_id=None, unit_price=None, quantity=None, tax_percentage=None, local_vars_configuration=None):  # noqa: E501
        """ComPatagonaPricemonitorShareApiCustomerOrderItemV2 - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._item_id = None
        self._unit_price = None
        self._quantity = None
        self._tax_percentage = None
        self.discriminator = None

        self.item_id = item_id
        self.unit_price = unit_price
        self.quantity = quantity
        self.tax_percentage = tax_percentage

    @property
    def item_id(self):
        """Gets the item_id of this ComPatagonaPricemonitorShareApiCustomerOrderItemV2.  # noqa: E501

        Id of the item in the customer's system. It is expected to be the customerProductId. It should be guaranteed that the itemId can be always assigned to only one product or variant.  # noqa: E501

        :return: The item_id of this ComPatagonaPricemonitorShareApiCustomerOrderItemV2.  # noqa: E501
        :rtype: str
        """
        return self._item_id

    @item_id.setter
    def item_id(self, item_id):
        """Sets the item_id of this ComPatagonaPricemonitorShareApiCustomerOrderItemV2.

        Id of the item in the customer's system. It is expected to be the customerProductId. It should be guaranteed that the itemId can be always assigned to only one product or variant.  # noqa: E501

        :param item_id: The item_id of this ComPatagonaPricemonitorShareApiCustomerOrderItemV2.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and item_id is None:  # noqa: E501
            raise ValueError("Invalid value for `item_id`, must not be `None`")  # noqa: E501

        self._item_id = item_id

    @property
    def unit_price(self):
        """Gets the unit_price of this ComPatagonaPricemonitorShareApiCustomerOrderItemV2.  # noqa: E501

        Unit price of an item  # noqa: E501

        :return: The unit_price of this ComPatagonaPricemonitorShareApiCustomerOrderItemV2.  # noqa: E501
        :rtype: float
        """
        return self._unit_price

    @unit_price.setter
    def unit_price(self, unit_price):
        """Sets the unit_price of this ComPatagonaPricemonitorShareApiCustomerOrderItemV2.

        Unit price of an item  # noqa: E501

        :param unit_price: The unit_price of this ComPatagonaPricemonitorShareApiCustomerOrderItemV2.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and unit_price is None:  # noqa: E501
            raise ValueError("Invalid value for `unit_price`, must not be `None`")  # noqa: E501

        self._unit_price = unit_price

    @property
    def quantity(self):
        """Gets the quantity of this ComPatagonaPricemonitorShareApiCustomerOrderItemV2.  # noqa: E501

        How often the item was purchased  # noqa: E501

        :return: The quantity of this ComPatagonaPricemonitorShareApiCustomerOrderItemV2.  # noqa: E501
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this ComPatagonaPricemonitorShareApiCustomerOrderItemV2.

        How often the item was purchased  # noqa: E501

        :param quantity: The quantity of this ComPatagonaPricemonitorShareApiCustomerOrderItemV2.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and quantity is None:  # noqa: E501
            raise ValueError("Invalid value for `quantity`, must not be `None`")  # noqa: E501

        self._quantity = quantity

    @property
    def tax_percentage(self):
        """Gets the tax_percentage of this ComPatagonaPricemonitorShareApiCustomerOrderItemV2.  # noqa: E501

        Tax percentage applied on unit price, e.g. 20 for 20% tax  # noqa: E501

        :return: The tax_percentage of this ComPatagonaPricemonitorShareApiCustomerOrderItemV2.  # noqa: E501
        :rtype: float
        """
        return self._tax_percentage

    @tax_percentage.setter
    def tax_percentage(self, tax_percentage):
        """Sets the tax_percentage of this ComPatagonaPricemonitorShareApiCustomerOrderItemV2.

        Tax percentage applied on unit price, e.g. 20 for 20% tax  # noqa: E501

        :param tax_percentage: The tax_percentage of this ComPatagonaPricemonitorShareApiCustomerOrderItemV2.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and tax_percentage is None:  # noqa: E501
            raise ValueError("Invalid value for `tax_percentage`, must not be `None`")  # noqa: E501

        self._tax_percentage = tax_percentage

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ComPatagonaPricemonitorShareApiCustomerOrderItemV2):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ComPatagonaPricemonitorShareApiCustomerOrderItemV2):
            return True

        return self.to_dict() != other.to_dict()
