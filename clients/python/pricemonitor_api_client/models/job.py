# coding: utf-8

"""
    Omnia 2.0 API The Omnia 2.0 API is RESTful and provides access to the backend of Omnia 2.0 and Pricemonitor. It is used to manage products, offers, contracts and more.

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.0.7093
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from pricemonitor_api_client.configuration import Configuration


class Job(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'type': 'JobType',
        'id': 'str',
        'timezone': 'str',
        'contract_id': 'str',
        'schedule': 'str'
    }

    attribute_map = {
        'type': 'type',
        'id': '_id',
        'timezone': 'timezone',
        'contract_id': 'contractId',
        'schedule': 'schedule'
    }

    discriminator_value_class_map = {
        'ShopIntegrationUpdateProductsJob': 'ShopIntegrationUpdateProductsJob',
        'PricewatchJob': 'PricewatchJob',
        'ShopIntegrationStartShopSyncJob': 'ShopIntegrationStartShopSyncJob',
        'ProductImportJob': 'ProductImportJob',
        'MonitoringJob': 'MonitoringJob',
        'ReportJob': 'ReportJob',
        'PreprocessingJob': 'PreprocessingJob'
    }

    def __init__(self, type=None, id=None, timezone=None, contract_id=None, schedule=None, local_vars_configuration=None):  # noqa: E501
        """Job - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._type = None
        self._id = None
        self._timezone = None
        self._contract_id = None
        self._schedule = None
        self.discriminator = 'type'

        self.type = type
        if id is not None:
            self.id = id
        self.timezone = timezone
        if contract_id is not None:
            self.contract_id = contract_id
        self.schedule = schedule

    @property
    def type(self):
        """Gets the type of this Job.  # noqa: E501


        :return: The type of this Job.  # noqa: E501
        :rtype: JobType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Job.


        :param type: The type of this Job.  # noqa: E501
        :type: JobType
        """
        if self.local_vars_configuration.client_side_validation and type is None:  # noqa: E501
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def id(self):
        """Gets the id of this Job.  # noqa: E501

        The internal job id. **Not** needed when creating a job.   # noqa: E501

        :return: The id of this Job.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Job.

        The internal job id. **Not** needed when creating a job.   # noqa: E501

        :param id: The id of this Job.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def timezone(self):
        """Gets the timezone of this Job.  # noqa: E501

        See [tz database time zones](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones).   # noqa: E501

        :return: The timezone of this Job.  # noqa: E501
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this Job.

        See [tz database time zones](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones).   # noqa: E501

        :param timezone: The timezone of this Job.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and timezone is None:  # noqa: E501
            raise ValueError("Invalid value for `timezone`, must not be `None`")  # noqa: E501

        self._timezone = timezone

    @property
    def contract_id(self):
        """Gets the contract_id of this Job.  # noqa: E501

        Each job **must** be attached to a specific contract SID.   # noqa: E501

        :return: The contract_id of this Job.  # noqa: E501
        :rtype: str
        """
        return self._contract_id

    @contract_id.setter
    def contract_id(self, contract_id):
        """Sets the contract_id of this Job.

        Each job **must** be attached to a specific contract SID.   # noqa: E501

        :param contract_id: The contract_id of this Job.  # noqa: E501
        :type: str
        """

        self._contract_id = contract_id

    @property
    def schedule(self):
        """Gets the schedule of this Job.  # noqa: E501

        Only valid CRON expressions are allowed. Extra expressions from Dkron, e.g. \"@every 5s\", are not allowed. Cron expressions that go from seconds to day of week in the following order: - Seconds (Allowed value: 0-59) - Minutes (Allowed value: 0-59) - Hour Of Day (Allowed value: 0-23) - Day Of Month (Allowed value: 1-31) - Month (Allowed value: 1-12) - Day Of Week (Allowed value: 0-7). Please note that 0 and 7 represent Sunday and 6 represents Saturday.    # noqa: E501

        :return: The schedule of this Job.  # noqa: E501
        :rtype: str
        """
        return self._schedule

    @schedule.setter
    def schedule(self, schedule):
        """Sets the schedule of this Job.

        Only valid CRON expressions are allowed. Extra expressions from Dkron, e.g. \"@every 5s\", are not allowed. Cron expressions that go from seconds to day of week in the following order: - Seconds (Allowed value: 0-59) - Minutes (Allowed value: 0-59) - Hour Of Day (Allowed value: 0-23) - Day Of Month (Allowed value: 1-31) - Month (Allowed value: 1-12) - Day Of Week (Allowed value: 0-7). Please note that 0 and 7 represent Sunday and 6 represents Saturday.    # noqa: E501

        :param schedule: The schedule of this Job.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and schedule is None:  # noqa: E501
            raise ValueError("Invalid value for `schedule`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                schedule is not None and len(schedule) < 1):
            raise ValueError("Invalid value for `schedule`, length must be greater than or equal to `1`")  # noqa: E501

        self._schedule = schedule

    def get_real_child_model(self, data):
        """Returns the real base class specified by the discriminator"""
        discriminator_key = self.attribute_map[self.discriminator]
        discriminator_value = data[discriminator_key]
        return self.discriminator_value_class_map.get(discriminator_value)

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Job):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Job):
            return True

        return self.to_dict() != other.to_dict()
