# coding: utf-8

"""
    Omnia 2.0 API The Omnia 2.0 API is RESTful and provides access to the backend of Omnia 2.0 and Pricemonitor. It is used to manage products, offers, contracts and more.

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.0.6852
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from pricemonitor_api_client.configuration import Configuration


class ScenarioStrategyResponseData(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'title': 'str',
        'description': 'str',
        'schema_version': 'int',
        'strategy': 'object',
        'creation_date': 'datetime',
        'created_by': 'str',
        'update_date': 'datetime',
        'updated_by': 'str'
    }

    attribute_map = {
        'id': 'id',
        'title': 'title',
        'description': 'description',
        'schema_version': 'schemaVersion',
        'strategy': 'strategy',
        'creation_date': 'creationDate',
        'created_by': 'createdBy',
        'update_date': 'updateDate',
        'updated_by': 'updatedBy'
    }

    def __init__(self, id=None, title=None, description=None, schema_version=None, strategy=None, creation_date=None, created_by=None, update_date=None, updated_by=None, local_vars_configuration=None):  # noqa: E501
        """ScenarioStrategyResponseData - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._title = None
        self._description = None
        self._schema_version = None
        self._strategy = None
        self._creation_date = None
        self._created_by = None
        self._update_date = None
        self._updated_by = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if title is not None:
            self.title = title
        if description is not None:
            self.description = description
        if schema_version is not None:
            self.schema_version = schema_version
        if strategy is not None:
            self.strategy = strategy
        if creation_date is not None:
            self.creation_date = creation_date
        if created_by is not None:
            self.created_by = created_by
        if update_date is not None:
            self.update_date = update_date
        if updated_by is not None:
            self.updated_by = updated_by

    @property
    def id(self):
        """Gets the id of this ScenarioStrategyResponseData.  # noqa: E501

        Id of the scenario strategy.  # noqa: E501

        :return: The id of this ScenarioStrategyResponseData.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ScenarioStrategyResponseData.

        Id of the scenario strategy.  # noqa: E501

        :param id: The id of this ScenarioStrategyResponseData.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def title(self):
        """Gets the title of this ScenarioStrategyResponseData.  # noqa: E501

        Title of the scenario strategy. Should not be empty and a maximum of 50 chars is allowed  # noqa: E501

        :return: The title of this ScenarioStrategyResponseData.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this ScenarioStrategyResponseData.

        Title of the scenario strategy. Should not be empty and a maximum of 50 chars is allowed  # noqa: E501

        :param title: The title of this ScenarioStrategyResponseData.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def description(self):
        """Gets the description of this ScenarioStrategyResponseData.  # noqa: E501

        Description of the scenario strategy. Maximum of 1000 chars allowed  # noqa: E501

        :return: The description of this ScenarioStrategyResponseData.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ScenarioStrategyResponseData.

        Description of the scenario strategy. Maximum of 1000 chars allowed  # noqa: E501

        :param description: The description of this ScenarioStrategyResponseData.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def schema_version(self):
        """Gets the schema_version of this ScenarioStrategyResponseData.  # noqa: E501

        Version of the schema the scenario strategy is encoded in  # noqa: E501

        :return: The schema_version of this ScenarioStrategyResponseData.  # noqa: E501
        :rtype: int
        """
        return self._schema_version

    @schema_version.setter
    def schema_version(self, schema_version):
        """Sets the schema_version of this ScenarioStrategyResponseData.

        Version of the schema the scenario strategy is encoded in  # noqa: E501

        :param schema_version: The schema_version of this ScenarioStrategyResponseData.  # noqa: E501
        :type: int
        """

        self._schema_version = schema_version

    @property
    def strategy(self):
        """Gets the strategy of this ScenarioStrategyResponseData.  # noqa: E501

        This is a placeholder for a pricing strategy. These are using advanced features and are not covered by openapi. If you need to work with pricing strategies please contract us.  # noqa: E501

        :return: The strategy of this ScenarioStrategyResponseData.  # noqa: E501
        :rtype: object
        """
        return self._strategy

    @strategy.setter
    def strategy(self, strategy):
        """Sets the strategy of this ScenarioStrategyResponseData.

        This is a placeholder for a pricing strategy. These are using advanced features and are not covered by openapi. If you need to work with pricing strategies please contract us.  # noqa: E501

        :param strategy: The strategy of this ScenarioStrategyResponseData.  # noqa: E501
        :type: object
        """

        self._strategy = strategy

    @property
    def creation_date(self):
        """Gets the creation_date of this ScenarioStrategyResponseData.  # noqa: E501

        Timestamp of creating the strategy scenario  # noqa: E501

        :return: The creation_date of this ScenarioStrategyResponseData.  # noqa: E501
        :rtype: datetime
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this ScenarioStrategyResponseData.

        Timestamp of creating the strategy scenario  # noqa: E501

        :param creation_date: The creation_date of this ScenarioStrategyResponseData.  # noqa: E501
        :type: datetime
        """

        self._creation_date = creation_date

    @property
    def created_by(self):
        """Gets the created_by of this ScenarioStrategyResponseData.  # noqa: E501

        Email address of the user who created the strategy scenario  # noqa: E501

        :return: The created_by of this ScenarioStrategyResponseData.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this ScenarioStrategyResponseData.

        Email address of the user who created the strategy scenario  # noqa: E501

        :param created_by: The created_by of this ScenarioStrategyResponseData.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def update_date(self):
        """Gets the update_date of this ScenarioStrategyResponseData.  # noqa: E501

        Timestamp of the last update operation  # noqa: E501

        :return: The update_date of this ScenarioStrategyResponseData.  # noqa: E501
        :rtype: datetime
        """
        return self._update_date

    @update_date.setter
    def update_date(self, update_date):
        """Sets the update_date of this ScenarioStrategyResponseData.

        Timestamp of the last update operation  # noqa: E501

        :param update_date: The update_date of this ScenarioStrategyResponseData.  # noqa: E501
        :type: datetime
        """

        self._update_date = update_date

    @property
    def updated_by(self):
        """Gets the updated_by of this ScenarioStrategyResponseData.  # noqa: E501

        Email address of the user who last updated the strategy scenario  # noqa: E501

        :return: The updated_by of this ScenarioStrategyResponseData.  # noqa: E501
        :rtype: str
        """
        return self._updated_by

    @updated_by.setter
    def updated_by(self, updated_by):
        """Sets the updated_by of this ScenarioStrategyResponseData.

        Email address of the user who last updated the strategy scenario  # noqa: E501

        :param updated_by: The updated_by of this ScenarioStrategyResponseData.  # noqa: E501
        :type: str
        """

        self._updated_by = updated_by

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ScenarioStrategyResponseData):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ScenarioStrategyResponseData):
            return True

        return self.to_dict() != other.to_dict()
