# coding: utf-8

"""
    Pricemonitor API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.0.6095
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from pricemonitor_api_client.configuration import Configuration


class ComPatagonaPricemonitorShareApiExtendedTag(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'double_value': 'float',
        'integer_value': 'int',
        'label': 'str',
        'string_value': 'str',
        'boolean_value': 'bool'
    }

    attribute_map = {
        'double_value': 'doubleValue',
        'integer_value': 'integerValue',
        'label': 'label',
        'string_value': 'stringValue',
        'boolean_value': 'booleanValue'
    }

    def __init__(self, double_value=None, integer_value=None, label=None, string_value=None, boolean_value=None, local_vars_configuration=None):  # noqa: E501
        """ComPatagonaPricemonitorShareApiExtendedTag - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._double_value = None
        self._integer_value = None
        self._label = None
        self._string_value = None
        self._boolean_value = None
        self.discriminator = None

        if double_value is not None:
            self.double_value = double_value
        if integer_value is not None:
            self.integer_value = integer_value
        self.label = label
        self.string_value = string_value
        if boolean_value is not None:
            self.boolean_value = boolean_value

    @property
    def double_value(self):
        """Gets the double_value of this ComPatagonaPricemonitorShareApiExtendedTag.  # noqa: E501

        The double value depends on the decimal separator which has been provided during product import.  # noqa: E501

        :return: The double_value of this ComPatagonaPricemonitorShareApiExtendedTag.  # noqa: E501
        :rtype: float
        """
        return self._double_value

    @double_value.setter
    def double_value(self, double_value):
        """Sets the double_value of this ComPatagonaPricemonitorShareApiExtendedTag.

        The double value depends on the decimal separator which has been provided during product import.  # noqa: E501

        :param double_value: The double_value of this ComPatagonaPricemonitorShareApiExtendedTag.  # noqa: E501
        :type: float
        """

        self._double_value = double_value

    @property
    def integer_value(self):
        """Gets the integer_value of this ComPatagonaPricemonitorShareApiExtendedTag.  # noqa: E501

        The integer value of the tag. It's only defined when the `stringValue` consists solely of digits.  # noqa: E501

        :return: The integer_value of this ComPatagonaPricemonitorShareApiExtendedTag.  # noqa: E501
        :rtype: int
        """
        return self._integer_value

    @integer_value.setter
    def integer_value(self, integer_value):
        """Sets the integer_value of this ComPatagonaPricemonitorShareApiExtendedTag.

        The integer value of the tag. It's only defined when the `stringValue` consists solely of digits.  # noqa: E501

        :param integer_value: The integer_value of this ComPatagonaPricemonitorShareApiExtendedTag.  # noqa: E501
        :type: int
        """

        self._integer_value = integer_value

    @property
    def label(self):
        """Gets the label of this ComPatagonaPricemonitorShareApiExtendedTag.  # noqa: E501

        The name of the tag. It can't be empty.  # noqa: E501

        :return: The label of this ComPatagonaPricemonitorShareApiExtendedTag.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this ComPatagonaPricemonitorShareApiExtendedTag.

        The name of the tag. It can't be empty.  # noqa: E501

        :param label: The label of this ComPatagonaPricemonitorShareApiExtendedTag.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and label is None:  # noqa: E501
            raise ValueError("Invalid value for `label`, must not be `None`")  # noqa: E501

        self._label = label

    @property
    def string_value(self):
        """Gets the string_value of this ComPatagonaPricemonitorShareApiExtendedTag.  # noqa: E501

        The text value of the tag.  # noqa: E501

        :return: The string_value of this ComPatagonaPricemonitorShareApiExtendedTag.  # noqa: E501
        :rtype: str
        """
        return self._string_value

    @string_value.setter
    def string_value(self, string_value):
        """Sets the string_value of this ComPatagonaPricemonitorShareApiExtendedTag.

        The text value of the tag.  # noqa: E501

        :param string_value: The string_value of this ComPatagonaPricemonitorShareApiExtendedTag.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and string_value is None:  # noqa: E501
            raise ValueError("Invalid value for `string_value`, must not be `None`")  # noqa: E501

        self._string_value = string_value

    @property
    def boolean_value(self):
        """Gets the boolean_value of this ComPatagonaPricemonitorShareApiExtendedTag.  # noqa: E501

        The boolean value of the tag. It's only set to true when the `stringValue` is \"1\" or \"true\".  # noqa: E501

        :return: The boolean_value of this ComPatagonaPricemonitorShareApiExtendedTag.  # noqa: E501
        :rtype: bool
        """
        return self._boolean_value

    @boolean_value.setter
    def boolean_value(self, boolean_value):
        """Sets the boolean_value of this ComPatagonaPricemonitorShareApiExtendedTag.

        The boolean value of the tag. It's only set to true when the `stringValue` is \"1\" or \"true\".  # noqa: E501

        :param boolean_value: The boolean_value of this ComPatagonaPricemonitorShareApiExtendedTag.  # noqa: E501
        :type: bool
        """

        self._boolean_value = boolean_value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ComPatagonaPricemonitorShareApiExtendedTag):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ComPatagonaPricemonitorShareApiExtendedTag):
            return True

        return self.to_dict() != other.to_dict()
