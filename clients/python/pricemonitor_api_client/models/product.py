# coding: utf-8

"""
    Omnia 2.0 API The Omnia 2.0 API is RESTful and provides access to the backend of Omnia 2.0 and Pricemonitor. It is used to manage products, offers, contracts, and more.  This API supports both public endpoints for customer integration and internal endpoints for platform management. All endpoints are authenticated using either Basic Authentication or JWT Bearer tokens.

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.0.7234
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from pricemonitor_api_client.configuration import Configuration


class Product(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'tags': 'list[Tag]',
        'gtin': 'int',
        'max_price_boundary': 'float',
        'min_price_boundary': 'float',
        'name': 'str',
        'product_id': 'str',
        'reference_price': 'float'
    }

    attribute_map = {
        'tags': 'tags',
        'gtin': 'gtin',
        'max_price_boundary': 'maxPriceBoundary',
        'min_price_boundary': 'minPriceBoundary',
        'name': 'name',
        'product_id': 'productId',
        'reference_price': 'referencePrice'
    }

    def __init__(self, tags=None, gtin=None, max_price_boundary=None, min_price_boundary=None, name=None, product_id=None, reference_price=None, local_vars_configuration=None):  # noqa: E501
        """Product - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._tags = None
        self._gtin = None
        self._max_price_boundary = None
        self._min_price_boundary = None
        self._name = None
        self._product_id = None
        self._reference_price = None
        self.discriminator = None

        if tags is not None:
            self.tags = tags
        if gtin is not None:
            self.gtin = gtin
        if max_price_boundary is not None:
            self.max_price_boundary = max_price_boundary
        if min_price_boundary is not None:
            self.min_price_boundary = min_price_boundary
        if name is not None:
            self.name = name
        if product_id is not None:
            self.product_id = product_id
        if reference_price is not None:
            self.reference_price = reference_price

    @property
    def tags(self):
        """Gets the tags of this Product.  # noqa: E501


        :return: The tags of this Product.  # noqa: E501
        :rtype: list[Tag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this Product.


        :param tags: The tags of this Product.  # noqa: E501
        :type: list[Tag]
        """

        self._tags = tags

    @property
    def gtin(self):
        """Gets the gtin of this Product.  # noqa: E501


        :return: The gtin of this Product.  # noqa: E501
        :rtype: int
        """
        return self._gtin

    @gtin.setter
    def gtin(self, gtin):
        """Sets the gtin of this Product.


        :param gtin: The gtin of this Product.  # noqa: E501
        :type: int
        """

        self._gtin = gtin

    @property
    def max_price_boundary(self):
        """Gets the max_price_boundary of this Product.  # noqa: E501


        :return: The max_price_boundary of this Product.  # noqa: E501
        :rtype: float
        """
        return self._max_price_boundary

    @max_price_boundary.setter
    def max_price_boundary(self, max_price_boundary):
        """Sets the max_price_boundary of this Product.


        :param max_price_boundary: The max_price_boundary of this Product.  # noqa: E501
        :type: float
        """

        self._max_price_boundary = max_price_boundary

    @property
    def min_price_boundary(self):
        """Gets the min_price_boundary of this Product.  # noqa: E501


        :return: The min_price_boundary of this Product.  # noqa: E501
        :rtype: float
        """
        return self._min_price_boundary

    @min_price_boundary.setter
    def min_price_boundary(self, min_price_boundary):
        """Sets the min_price_boundary of this Product.


        :param min_price_boundary: The min_price_boundary of this Product.  # noqa: E501
        :type: float
        """

        self._min_price_boundary = min_price_boundary

    @property
    def name(self):
        """Gets the name of this Product.  # noqa: E501


        :return: The name of this Product.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Product.


        :param name: The name of this Product.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def product_id(self):
        """Gets the product_id of this Product.  # noqa: E501


        :return: The product_id of this Product.  # noqa: E501
        :rtype: str
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """Sets the product_id of this Product.


        :param product_id: The product_id of this Product.  # noqa: E501
        :type: str
        """

        self._product_id = product_id

    @property
    def reference_price(self):
        """Gets the reference_price of this Product.  # noqa: E501


        :return: The reference_price of this Product.  # noqa: E501
        :rtype: float
        """
        return self._reference_price

    @reference_price.setter
    def reference_price(self, reference_price):
        """Sets the reference_price of this Product.


        :param reference_price: The reference_price of this Product.  # noqa: E501
        :type: float
        """

        self._reference_price = reference_price

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Product):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Product):
            return True

        return self.to_dict() != other.to_dict()
