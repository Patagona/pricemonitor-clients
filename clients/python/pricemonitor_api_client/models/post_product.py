# coding: utf-8

"""
    Omnia 2.0 API The Omnia 2.0 API is RESTful and provides access to the backend of Omnia 2.0 and Pricemonitor. It is used to manage products, offers, contracts, and more.  This API supports both public endpoints for customer integration and internal endpoints for platform management. All endpoints are authenticated using either Basic Authentication or JWT Bearer tokens.

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.0.7195
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from pricemonitor_api_client.configuration import Configuration


class PostProduct(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'customer_product_id': 'str',
        'gtin': 'int',
        'reference_price': 'float',
        'min_price_boundary': 'float',
        'max_price_boundary': 'float',
        'tags': 'list[TagInput]'
    }

    attribute_map = {
        'name': 'name',
        'customer_product_id': 'customerProductId',
        'gtin': 'gtin',
        'reference_price': 'referencePrice',
        'min_price_boundary': 'minPriceBoundary',
        'max_price_boundary': 'maxPriceBoundary',
        'tags': 'tags'
    }

    def __init__(self, name=None, customer_product_id=None, gtin=None, reference_price=None, min_price_boundary=None, max_price_boundary=None, tags=None, local_vars_configuration=None):  # noqa: E501
        """PostProduct - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._customer_product_id = None
        self._gtin = None
        self._reference_price = None
        self._min_price_boundary = None
        self._max_price_boundary = None
        self._tags = None
        self.discriminator = None

        self.name = name
        if customer_product_id is not None:
            self.customer_product_id = customer_product_id
        if gtin is not None:
            self.gtin = gtin
        self.reference_price = reference_price
        self.min_price_boundary = min_price_boundary
        self.max_price_boundary = max_price_boundary
        self.tags = tags

    @property
    def name(self):
        """Gets the name of this PostProduct.  # noqa: E501

        Product name or title as displayed to customers  # noqa: E501

        :return: The name of this PostProduct.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PostProduct.

        Product name or title as displayed to customers  # noqa: E501

        :param name: The name of this PostProduct.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) > 999):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `999`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) < 1):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def customer_product_id(self):
        """Gets the customer_product_id of this PostProduct.  # noqa: E501

        Customer-specific product identifier. This can be your internal SKU or product ID. Used for mapping products between your system and the pricemonitor.   # noqa: E501

        :return: The customer_product_id of this PostProduct.  # noqa: E501
        :rtype: str
        """
        return self._customer_product_id

    @customer_product_id.setter
    def customer_product_id(self, customer_product_id):
        """Sets the customer_product_id of this PostProduct.

        Customer-specific product identifier. This can be your internal SKU or product ID. Used for mapping products between your system and the pricemonitor.   # noqa: E501

        :param customer_product_id: The customer_product_id of this PostProduct.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                customer_product_id is not None and len(customer_product_id) > 255):
            raise ValueError("Invalid value for `customer_product_id`, length must be less than or equal to `255`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                customer_product_id is not None and len(customer_product_id) < 1):
            raise ValueError("Invalid value for `customer_product_id`, length must be greater than or equal to `1`")  # noqa: E501

        self._customer_product_id = customer_product_id

    @property
    def gtin(self):
        """Gets the gtin of this PostProduct.  # noqa: E501

        Global Trade Item Number (GTIN) - typically EAN-13, UPC-A, or GTIN-14. Must be a valid positive number representing the product's global identifier.   # noqa: E501

        :return: The gtin of this PostProduct.  # noqa: E501
        :rtype: int
        """
        return self._gtin

    @gtin.setter
    def gtin(self, gtin):
        """Sets the gtin of this PostProduct.

        Global Trade Item Number (GTIN) - typically EAN-13, UPC-A, or GTIN-14. Must be a valid positive number representing the product's global identifier.   # noqa: E501

        :param gtin: The gtin of this PostProduct.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                gtin is not None and gtin > 99999999999999):  # noqa: E501
            raise ValueError("Invalid value for `gtin`, must be a value less than or equal to `99999999999999`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                gtin is not None and gtin < 1):  # noqa: E501
            raise ValueError("Invalid value for `gtin`, must be a value greater than or equal to `1`")  # noqa: E501

        self._gtin = gtin

    @property
    def reference_price(self):
        """Gets the reference_price of this PostProduct.  # noqa: E501

        Reference price for the product.  **For Omnia 2.0:** This represents the selling price - the actual price at which you sell the product. **For Pricemonitor:** One of the use cases is to treat this as MSRP (Manufacturer's Suggested Retail Price).  Used as a baseline for pricing strategies and recommendations. Will be rounded to two decimal places using half-up rounding.   # noqa: E501

        :return: The reference_price of this PostProduct.  # noqa: E501
        :rtype: float
        """
        return self._reference_price

    @reference_price.setter
    def reference_price(self, reference_price):
        """Sets the reference_price of this PostProduct.

        Reference price for the product.  **For Omnia 2.0:** This represents the selling price - the actual price at which you sell the product. **For Pricemonitor:** One of the use cases is to treat this as MSRP (Manufacturer's Suggested Retail Price).  Used as a baseline for pricing strategies and recommendations. Will be rounded to two decimal places using half-up rounding.   # noqa: E501

        :param reference_price: The reference_price of this PostProduct.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and reference_price is None:  # noqa: E501
            raise ValueError("Invalid value for `reference_price`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                reference_price is not None and reference_price > 9999999999999.99):  # noqa: E501
            raise ValueError("Invalid value for `reference_price`, must be a value less than or equal to `9999999999999.99`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                reference_price is not None and reference_price < 0.01):  # noqa: E501
            raise ValueError("Invalid value for `reference_price`, must be a value greater than or equal to `0.01`")  # noqa: E501

        self._reference_price = reference_price

    @property
    def min_price_boundary(self):
        """Gets the min_price_boundary of this PostProduct.  # noqa: E501

        Minimum allowed price boundary for automated pricing. Must be less than or equal to maxPriceBoundary. Will be rounded to two decimal places using half-up rounding.   # noqa: E501

        :return: The min_price_boundary of this PostProduct.  # noqa: E501
        :rtype: float
        """
        return self._min_price_boundary

    @min_price_boundary.setter
    def min_price_boundary(self, min_price_boundary):
        """Sets the min_price_boundary of this PostProduct.

        Minimum allowed price boundary for automated pricing. Must be less than or equal to maxPriceBoundary. Will be rounded to two decimal places using half-up rounding.   # noqa: E501

        :param min_price_boundary: The min_price_boundary of this PostProduct.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and min_price_boundary is None:  # noqa: E501
            raise ValueError("Invalid value for `min_price_boundary`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                min_price_boundary is not None and min_price_boundary < 0.01):  # noqa: E501
            raise ValueError("Invalid value for `min_price_boundary`, must be a value greater than or equal to `0.01`")  # noqa: E501

        self._min_price_boundary = min_price_boundary

    @property
    def max_price_boundary(self):
        """Gets the max_price_boundary of this PostProduct.  # noqa: E501

        Maximum allowed price boundary for automated pricing. Must be greater than or equal to minPriceBoundary. Will be rounded to two decimal places using half-up rounding.   # noqa: E501

        :return: The max_price_boundary of this PostProduct.  # noqa: E501
        :rtype: float
        """
        return self._max_price_boundary

    @max_price_boundary.setter
    def max_price_boundary(self, max_price_boundary):
        """Sets the max_price_boundary of this PostProduct.

        Maximum allowed price boundary for automated pricing. Must be greater than or equal to minPriceBoundary. Will be rounded to two decimal places using half-up rounding.   # noqa: E501

        :param max_price_boundary: The max_price_boundary of this PostProduct.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and max_price_boundary is None:  # noqa: E501
            raise ValueError("Invalid value for `max_price_boundary`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                max_price_boundary is not None and max_price_boundary > 9999999999999.99):  # noqa: E501
            raise ValueError("Invalid value for `max_price_boundary`, must be a value less than or equal to `9999999999999.99`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                max_price_boundary is not None and max_price_boundary < 0.01):  # noqa: E501
            raise ValueError("Invalid value for `max_price_boundary`, must be a value greater than or equal to `0.01`")  # noqa: E501

        self._max_price_boundary = max_price_boundary

    @property
    def tags(self):
        """Gets the tags of this PostProduct.  # noqa: E501

        Product tags for categorization and strategy application. Used by pricing strategies to group and target specific products.   # noqa: E501

        :return: The tags of this PostProduct.  # noqa: E501
        :rtype: list[TagInput]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this PostProduct.

        Product tags for categorization and strategy application. Used by pricing strategies to group and target specific products.   # noqa: E501

        :param tags: The tags of this PostProduct.  # noqa: E501
        :type: list[TagInput]
        """
        if self.local_vars_configuration.client_side_validation and tags is None:  # noqa: E501
            raise ValueError("Invalid value for `tags`, must not be `None`")  # noqa: E501

        self._tags = tags

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PostProduct):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PostProduct):
            return True

        return self.to_dict() != other.to_dict()
