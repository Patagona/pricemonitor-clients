# coding: utf-8

"""
    Omnia 2.0 API The Omnia 2.0 API is RESTful and provides access to the backend of Omnia 2.0 and Pricemonitor. It is used to manage products, offers, contracts and more.

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.0.6904
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from pricemonitor_api_client.configuration import Configuration


class ComPatagonaPricemonitorShareApiPostAuthorizeSellerRequestV3(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'selling_partner_id': 'str',
        'spapi_oauth_code': 'str'
    }

    attribute_map = {
        'selling_partner_id': 'sellingPartnerId',
        'spapi_oauth_code': 'spapiOauthCode'
    }

    def __init__(self, selling_partner_id=None, spapi_oauth_code=None, local_vars_configuration=None):  # noqa: E501
        """ComPatagonaPricemonitorShareApiPostAuthorizeSellerRequestV3 - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._selling_partner_id = None
        self._spapi_oauth_code = None
        self.discriminator = None

        self.selling_partner_id = selling_partner_id
        self.spapi_oauth_code = spapi_oauth_code

    @property
    def selling_partner_id(self):
        """Gets the selling_partner_id of this ComPatagonaPricemonitorShareApiPostAuthorizeSellerRequestV3.  # noqa: E501

        The identifier for the selling partner seller on Amazon.  # noqa: E501

        :return: The selling_partner_id of this ComPatagonaPricemonitorShareApiPostAuthorizeSellerRequestV3.  # noqa: E501
        :rtype: str
        """
        return self._selling_partner_id

    @selling_partner_id.setter
    def selling_partner_id(self, selling_partner_id):
        """Sets the selling_partner_id of this ComPatagonaPricemonitorShareApiPostAuthorizeSellerRequestV3.

        The identifier for the selling partner seller on Amazon.  # noqa: E501

        :param selling_partner_id: The selling_partner_id of this ComPatagonaPricemonitorShareApiPostAuthorizeSellerRequestV3.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and selling_partner_id is None:  # noqa: E501
            raise ValueError("Invalid value for `selling_partner_id`, must not be `None`")  # noqa: E501

        self._selling_partner_id = selling_partner_id

    @property
    def spapi_oauth_code(self):
        """Gets the spapi_oauth_code of this ComPatagonaPricemonitorShareApiPostAuthorizeSellerRequestV3.  # noqa: E501

        The Login with Amazon (LWA) authorization code that you exchange for an LWA refresh token.  # noqa: E501

        :return: The spapi_oauth_code of this ComPatagonaPricemonitorShareApiPostAuthorizeSellerRequestV3.  # noqa: E501
        :rtype: str
        """
        return self._spapi_oauth_code

    @spapi_oauth_code.setter
    def spapi_oauth_code(self, spapi_oauth_code):
        """Sets the spapi_oauth_code of this ComPatagonaPricemonitorShareApiPostAuthorizeSellerRequestV3.

        The Login with Amazon (LWA) authorization code that you exchange for an LWA refresh token.  # noqa: E501

        :param spapi_oauth_code: The spapi_oauth_code of this ComPatagonaPricemonitorShareApiPostAuthorizeSellerRequestV3.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and spapi_oauth_code is None:  # noqa: E501
            raise ValueError("Invalid value for `spapi_oauth_code`, must not be `None`")  # noqa: E501

        self._spapi_oauth_code = spapi_oauth_code

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ComPatagonaPricemonitorShareApiPostAuthorizeSellerRequestV3):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ComPatagonaPricemonitorShareApiPostAuthorizeSellerRequestV3):
            return True

        return self.to_dict() != other.to_dict()
