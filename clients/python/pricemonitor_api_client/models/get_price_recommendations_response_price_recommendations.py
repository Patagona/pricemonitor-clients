# coding: utf-8

"""
    Pricemonitor API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.0.6526
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from pricemonitor_api_client.configuration import Configuration


class GetPriceRecommendationsResponsePriceRecommendations(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'currency': 'str',
        'current_price': 'float',
        'gtin': 'int',
        'identifier': 'str',
        'recommended_price': 'float'
    }

    attribute_map = {
        'currency': 'currency',
        'current_price': 'currentPrice',
        'gtin': 'gtin',
        'identifier': 'identifier',
        'recommended_price': 'recommendedPrice'
    }

    def __init__(self, currency=None, current_price=None, gtin=None, identifier=None, recommended_price=None, local_vars_configuration=None):  # noqa: E501
        """GetPriceRecommendationsResponsePriceRecommendations - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._currency = None
        self._current_price = None
        self._gtin = None
        self._identifier = None
        self._recommended_price = None
        self.discriminator = None

        if currency is not None:
            self.currency = currency
        if current_price is not None:
            self.current_price = current_price
        if gtin is not None:
            self.gtin = gtin
        if identifier is not None:
            self.identifier = identifier
        if recommended_price is not None:
            self.recommended_price = recommended_price

    @property
    def currency(self):
        """Gets the currency of this GetPriceRecommendationsResponsePriceRecommendations.  # noqa: E501


        :return: The currency of this GetPriceRecommendationsResponsePriceRecommendations.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this GetPriceRecommendationsResponsePriceRecommendations.


        :param currency: The currency of this GetPriceRecommendationsResponsePriceRecommendations.  # noqa: E501
        :type: str
        """

        self._currency = currency

    @property
    def current_price(self):
        """Gets the current_price of this GetPriceRecommendationsResponsePriceRecommendations.  # noqa: E501


        :return: The current_price of this GetPriceRecommendationsResponsePriceRecommendations.  # noqa: E501
        :rtype: float
        """
        return self._current_price

    @current_price.setter
    def current_price(self, current_price):
        """Sets the current_price of this GetPriceRecommendationsResponsePriceRecommendations.


        :param current_price: The current_price of this GetPriceRecommendationsResponsePriceRecommendations.  # noqa: E501
        :type: float
        """

        self._current_price = current_price

    @property
    def gtin(self):
        """Gets the gtin of this GetPriceRecommendationsResponsePriceRecommendations.  # noqa: E501


        :return: The gtin of this GetPriceRecommendationsResponsePriceRecommendations.  # noqa: E501
        :rtype: int
        """
        return self._gtin

    @gtin.setter
    def gtin(self, gtin):
        """Sets the gtin of this GetPriceRecommendationsResponsePriceRecommendations.


        :param gtin: The gtin of this GetPriceRecommendationsResponsePriceRecommendations.  # noqa: E501
        :type: int
        """

        self._gtin = gtin

    @property
    def identifier(self):
        """Gets the identifier of this GetPriceRecommendationsResponsePriceRecommendations.  # noqa: E501


        :return: The identifier of this GetPriceRecommendationsResponsePriceRecommendations.  # noqa: E501
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this GetPriceRecommendationsResponsePriceRecommendations.


        :param identifier: The identifier of this GetPriceRecommendationsResponsePriceRecommendations.  # noqa: E501
        :type: str
        """

        self._identifier = identifier

    @property
    def recommended_price(self):
        """Gets the recommended_price of this GetPriceRecommendationsResponsePriceRecommendations.  # noqa: E501


        :return: The recommended_price of this GetPriceRecommendationsResponsePriceRecommendations.  # noqa: E501
        :rtype: float
        """
        return self._recommended_price

    @recommended_price.setter
    def recommended_price(self, recommended_price):
        """Sets the recommended_price of this GetPriceRecommendationsResponsePriceRecommendations.


        :param recommended_price: The recommended_price of this GetPriceRecommendationsResponsePriceRecommendations.  # noqa: E501
        :type: float
        """

        self._recommended_price = recommended_price

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetPriceRecommendationsResponsePriceRecommendations):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GetPriceRecommendationsResponsePriceRecommendations):
            return True

        return self.to_dict() != other.to_dict()
