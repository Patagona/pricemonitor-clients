# coding: utf-8

"""
    Omnia 2.0 API The Omnia 2.0 API is RESTful and provides access to the backend of Omnia 2.0 and Pricemonitor. It is used to manage products, offers, contracts and more.

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.0.7070
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from pricemonitor_api_client.configuration import Configuration


class ComPatagonaPricemonitorShareApiApiQuery(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'pagination': 'ComPatagonaPricemonitorShareApiPagination',
        'filter': 'ComPatagonaPricemonitorShareApiQuery',
        'include_tags': 'bool'
    }

    attribute_map = {
        'pagination': 'pagination',
        'filter': 'filter',
        'include_tags': 'includeTags'
    }

    def __init__(self, pagination=None, filter=None, include_tags=None, local_vars_configuration=None):  # noqa: E501
        """ComPatagonaPricemonitorShareApiApiQuery - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._pagination = None
        self._filter = None
        self._include_tags = None
        self.discriminator = None

        self.pagination = pagination
        if filter is not None:
            self.filter = filter
        if include_tags is not None:
            self.include_tags = include_tags

    @property
    def pagination(self):
        """Gets the pagination of this ComPatagonaPricemonitorShareApiApiQuery.  # noqa: E501


        :return: The pagination of this ComPatagonaPricemonitorShareApiApiQuery.  # noqa: E501
        :rtype: ComPatagonaPricemonitorShareApiPagination
        """
        return self._pagination

    @pagination.setter
    def pagination(self, pagination):
        """Sets the pagination of this ComPatagonaPricemonitorShareApiApiQuery.


        :param pagination: The pagination of this ComPatagonaPricemonitorShareApiApiQuery.  # noqa: E501
        :type: ComPatagonaPricemonitorShareApiPagination
        """
        if self.local_vars_configuration.client_side_validation and pagination is None:  # noqa: E501
            raise ValueError("Invalid value for `pagination`, must not be `None`")  # noqa: E501

        self._pagination = pagination

    @property
    def filter(self):
        """Gets the filter of this ComPatagonaPricemonitorShareApiApiQuery.  # noqa: E501


        :return: The filter of this ComPatagonaPricemonitorShareApiApiQuery.  # noqa: E501
        :rtype: ComPatagonaPricemonitorShareApiQuery
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this ComPatagonaPricemonitorShareApiApiQuery.


        :param filter: The filter of this ComPatagonaPricemonitorShareApiApiQuery.  # noqa: E501
        :type: ComPatagonaPricemonitorShareApiQuery
        """

        self._filter = filter

    @property
    def include_tags(self):
        """Gets the include_tags of this ComPatagonaPricemonitorShareApiApiQuery.  # noqa: E501

        Whether to include tags in the response or not  # noqa: E501

        :return: The include_tags of this ComPatagonaPricemonitorShareApiApiQuery.  # noqa: E501
        :rtype: bool
        """
        return self._include_tags

    @include_tags.setter
    def include_tags(self, include_tags):
        """Sets the include_tags of this ComPatagonaPricemonitorShareApiApiQuery.

        Whether to include tags in the response or not  # noqa: E501

        :param include_tags: The include_tags of this ComPatagonaPricemonitorShareApiApiQuery.  # noqa: E501
        :type: bool
        """

        self._include_tags = include_tags

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ComPatagonaPricemonitorShareApiApiQuery):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ComPatagonaPricemonitorShareApiApiQuery):
            return True

        return self.to_dict() != other.to_dict()
