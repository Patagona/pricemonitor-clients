# coding: utf-8

"""
    Omnia 2.0 API The Omnia 2.0 API is RESTful and provides access to the backend of Omnia 2.0 and Pricemonitor. It is used to manage products, offers, contracts, and more.  This API supports both public endpoints for customer integration and internal endpoints for platform management. All endpoints are authenticated using either Basic Authentication or JWT Bearer tokens.

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.0.7239
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from pricemonitor_api_client.configuration import Configuration


class ComPatagonaPricemonitorShareApiPriceRecommendationsApprovalQueryRequestV3(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'product_filter': 'ComPatagonaPricemonitorShareApiOneOfProductsQuery',
        'latest_only': 'bool',
        'range': 'ComPatagonaPricemonitorShareApiOffsetTimeRange',
        'status': 'list[str]',
        'pagination': 'ComPatagonaPricemonitorShareApiPagination'
    }

    attribute_map = {
        'product_filter': 'productFilter',
        'latest_only': 'latestOnly',
        'range': 'range',
        'status': 'status',
        'pagination': 'pagination'
    }

    def __init__(self, product_filter=None, latest_only=None, range=None, status=None, pagination=None, local_vars_configuration=None):  # noqa: E501
        """ComPatagonaPricemonitorShareApiPriceRecommendationsApprovalQueryRequestV3 - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._product_filter = None
        self._latest_only = None
        self._range = None
        self._status = None
        self._pagination = None
        self.discriminator = None

        if product_filter is not None:
            self.product_filter = product_filter
        self.latest_only = latest_only
        self.range = range
        if status is not None:
            self.status = status
        self.pagination = pagination

    @property
    def product_filter(self):
        """Gets the product_filter of this ComPatagonaPricemonitorShareApiPriceRecommendationsApprovalQueryRequestV3.  # noqa: E501


        :return: The product_filter of this ComPatagonaPricemonitorShareApiPriceRecommendationsApprovalQueryRequestV3.  # noqa: E501
        :rtype: ComPatagonaPricemonitorShareApiOneOfProductsQuery
        """
        return self._product_filter

    @product_filter.setter
    def product_filter(self, product_filter):
        """Sets the product_filter of this ComPatagonaPricemonitorShareApiPriceRecommendationsApprovalQueryRequestV3.


        :param product_filter: The product_filter of this ComPatagonaPricemonitorShareApiPriceRecommendationsApprovalQueryRequestV3.  # noqa: E501
        :type: ComPatagonaPricemonitorShareApiOneOfProductsQuery
        """

        self._product_filter = product_filter

    @property
    def latest_only(self):
        """Gets the latest_only of this ComPatagonaPricemonitorShareApiPriceRecommendationsApprovalQueryRequestV3.  # noqa: E501

        Boolean indicating whether to return only the most recent approval per product. <br> If true, only the most recent record per product within the time range is returned. <br> If false, all records within the time range are returned.  # noqa: E501

        :return: The latest_only of this ComPatagonaPricemonitorShareApiPriceRecommendationsApprovalQueryRequestV3.  # noqa: E501
        :rtype: bool
        """
        return self._latest_only

    @latest_only.setter
    def latest_only(self, latest_only):
        """Sets the latest_only of this ComPatagonaPricemonitorShareApiPriceRecommendationsApprovalQueryRequestV3.

        Boolean indicating whether to return only the most recent approval per product. <br> If true, only the most recent record per product within the time range is returned. <br> If false, all records within the time range are returned.  # noqa: E501

        :param latest_only: The latest_only of this ComPatagonaPricemonitorShareApiPriceRecommendationsApprovalQueryRequestV3.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and latest_only is None:  # noqa: E501
            raise ValueError("Invalid value for `latest_only`, must not be `None`")  # noqa: E501

        self._latest_only = latest_only

    @property
    def range(self):
        """Gets the range of this ComPatagonaPricemonitorShareApiPriceRecommendationsApprovalQueryRequestV3.  # noqa: E501


        :return: The range of this ComPatagonaPricemonitorShareApiPriceRecommendationsApprovalQueryRequestV3.  # noqa: E501
        :rtype: ComPatagonaPricemonitorShareApiOffsetTimeRange
        """
        return self._range

    @range.setter
    def range(self, range):
        """Sets the range of this ComPatagonaPricemonitorShareApiPriceRecommendationsApprovalQueryRequestV3.


        :param range: The range of this ComPatagonaPricemonitorShareApiPriceRecommendationsApprovalQueryRequestV3.  # noqa: E501
        :type: ComPatagonaPricemonitorShareApiOffsetTimeRange
        """
        if self.local_vars_configuration.client_side_validation and range is None:  # noqa: E501
            raise ValueError("Invalid value for `range`, must not be `None`")  # noqa: E501

        self._range = range

    @property
    def status(self):
        """Gets the status of this ComPatagonaPricemonitorShareApiPriceRecommendationsApprovalQueryRequestV3.  # noqa: E501

        Optional set of statuses to filter the approvals by their current status. <br> If omitted, all statuses are included.  # noqa: E501

        :return: The status of this ComPatagonaPricemonitorShareApiPriceRecommendationsApprovalQueryRequestV3.  # noqa: E501
        :rtype: list[str]
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ComPatagonaPricemonitorShareApiPriceRecommendationsApprovalQueryRequestV3.

        Optional set of statuses to filter the approvals by their current status. <br> If omitted, all statuses are included.  # noqa: E501

        :param status: The status of this ComPatagonaPricemonitorShareApiPriceRecommendationsApprovalQueryRequestV3.  # noqa: E501
        :type: list[str]
        """

        self._status = status

    @property
    def pagination(self):
        """Gets the pagination of this ComPatagonaPricemonitorShareApiPriceRecommendationsApprovalQueryRequestV3.  # noqa: E501


        :return: The pagination of this ComPatagonaPricemonitorShareApiPriceRecommendationsApprovalQueryRequestV3.  # noqa: E501
        :rtype: ComPatagonaPricemonitorShareApiPagination
        """
        return self._pagination

    @pagination.setter
    def pagination(self, pagination):
        """Sets the pagination of this ComPatagonaPricemonitorShareApiPriceRecommendationsApprovalQueryRequestV3.


        :param pagination: The pagination of this ComPatagonaPricemonitorShareApiPriceRecommendationsApprovalQueryRequestV3.  # noqa: E501
        :type: ComPatagonaPricemonitorShareApiPagination
        """
        if self.local_vars_configuration.client_side_validation and pagination is None:  # noqa: E501
            raise ValueError("Invalid value for `pagination`, must not be `None`")  # noqa: E501

        self._pagination = pagination

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ComPatagonaPricemonitorShareApiPriceRecommendationsApprovalQueryRequestV3):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ComPatagonaPricemonitorShareApiPriceRecommendationsApprovalQueryRequestV3):
            return True

        return self.to_dict() != other.to_dict()
