# coding: utf-8

"""
    Pricemonitor API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.0.5912
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from pricemonitor_api_client.configuration import Configuration


class ComPatagonaPricemonitorShareApiResellerSummaryByDomain(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'average_discount': 'float',
        'average_position': 'float',
        'products_under_reference_price': 'float',
        'portal_name': 'str',
        'products_count': 'float',
        'reseller_name': 'str',
        'min_price_count': 'float'
    }

    attribute_map = {
        'average_discount': 'averageDiscount',
        'average_position': 'averagePosition',
        'products_under_reference_price': 'productsUnderReferencePrice',
        'portal_name': 'portalName',
        'products_count': 'productsCount',
        'reseller_name': 'resellerName',
        'min_price_count': 'minPriceCount'
    }

    def __init__(self, average_discount=None, average_position=None, products_under_reference_price=None, portal_name=None, products_count=None, reseller_name=None, min_price_count=None, local_vars_configuration=None):  # noqa: E501
        """ComPatagonaPricemonitorShareApiResellerSummaryByDomain - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._average_discount = None
        self._average_position = None
        self._products_under_reference_price = None
        self._portal_name = None
        self._products_count = None
        self._reseller_name = None
        self._min_price_count = None
        self.discriminator = None

        self.average_discount = average_discount
        self.average_position = average_position
        self.products_under_reference_price = products_under_reference_price
        self.portal_name = portal_name
        self.products_count = products_count
        self.reseller_name = reseller_name
        self.min_price_count = min_price_count

    @property
    def average_discount(self):
        """Gets the average_discount of this ComPatagonaPricemonitorShareApiResellerSummaryByDomain.  # noqa: E501


        :return: The average_discount of this ComPatagonaPricemonitorShareApiResellerSummaryByDomain.  # noqa: E501
        :rtype: float
        """
        return self._average_discount

    @average_discount.setter
    def average_discount(self, average_discount):
        """Sets the average_discount of this ComPatagonaPricemonitorShareApiResellerSummaryByDomain.


        :param average_discount: The average_discount of this ComPatagonaPricemonitorShareApiResellerSummaryByDomain.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and average_discount is None:  # noqa: E501
            raise ValueError("Invalid value for `average_discount`, must not be `None`")  # noqa: E501

        self._average_discount = average_discount

    @property
    def average_position(self):
        """Gets the average_position of this ComPatagonaPricemonitorShareApiResellerSummaryByDomain.  # noqa: E501


        :return: The average_position of this ComPatagonaPricemonitorShareApiResellerSummaryByDomain.  # noqa: E501
        :rtype: float
        """
        return self._average_position

    @average_position.setter
    def average_position(self, average_position):
        """Sets the average_position of this ComPatagonaPricemonitorShareApiResellerSummaryByDomain.


        :param average_position: The average_position of this ComPatagonaPricemonitorShareApiResellerSummaryByDomain.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and average_position is None:  # noqa: E501
            raise ValueError("Invalid value for `average_position`, must not be `None`")  # noqa: E501

        self._average_position = average_position

    @property
    def products_under_reference_price(self):
        """Gets the products_under_reference_price of this ComPatagonaPricemonitorShareApiResellerSummaryByDomain.  # noqa: E501


        :return: The products_under_reference_price of this ComPatagonaPricemonitorShareApiResellerSummaryByDomain.  # noqa: E501
        :rtype: float
        """
        return self._products_under_reference_price

    @products_under_reference_price.setter
    def products_under_reference_price(self, products_under_reference_price):
        """Sets the products_under_reference_price of this ComPatagonaPricemonitorShareApiResellerSummaryByDomain.


        :param products_under_reference_price: The products_under_reference_price of this ComPatagonaPricemonitorShareApiResellerSummaryByDomain.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and products_under_reference_price is None:  # noqa: E501
            raise ValueError("Invalid value for `products_under_reference_price`, must not be `None`")  # noqa: E501

        self._products_under_reference_price = products_under_reference_price

    @property
    def portal_name(self):
        """Gets the portal_name of this ComPatagonaPricemonitorShareApiResellerSummaryByDomain.  # noqa: E501


        :return: The portal_name of this ComPatagonaPricemonitorShareApiResellerSummaryByDomain.  # noqa: E501
        :rtype: str
        """
        return self._portal_name

    @portal_name.setter
    def portal_name(self, portal_name):
        """Sets the portal_name of this ComPatagonaPricemonitorShareApiResellerSummaryByDomain.


        :param portal_name: The portal_name of this ComPatagonaPricemonitorShareApiResellerSummaryByDomain.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and portal_name is None:  # noqa: E501
            raise ValueError("Invalid value for `portal_name`, must not be `None`")  # noqa: E501

        self._portal_name = portal_name

    @property
    def products_count(self):
        """Gets the products_count of this ComPatagonaPricemonitorShareApiResellerSummaryByDomain.  # noqa: E501


        :return: The products_count of this ComPatagonaPricemonitorShareApiResellerSummaryByDomain.  # noqa: E501
        :rtype: float
        """
        return self._products_count

    @products_count.setter
    def products_count(self, products_count):
        """Sets the products_count of this ComPatagonaPricemonitorShareApiResellerSummaryByDomain.


        :param products_count: The products_count of this ComPatagonaPricemonitorShareApiResellerSummaryByDomain.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and products_count is None:  # noqa: E501
            raise ValueError("Invalid value for `products_count`, must not be `None`")  # noqa: E501

        self._products_count = products_count

    @property
    def reseller_name(self):
        """Gets the reseller_name of this ComPatagonaPricemonitorShareApiResellerSummaryByDomain.  # noqa: E501


        :return: The reseller_name of this ComPatagonaPricemonitorShareApiResellerSummaryByDomain.  # noqa: E501
        :rtype: str
        """
        return self._reseller_name

    @reseller_name.setter
    def reseller_name(self, reseller_name):
        """Sets the reseller_name of this ComPatagonaPricemonitorShareApiResellerSummaryByDomain.


        :param reseller_name: The reseller_name of this ComPatagonaPricemonitorShareApiResellerSummaryByDomain.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and reseller_name is None:  # noqa: E501
            raise ValueError("Invalid value for `reseller_name`, must not be `None`")  # noqa: E501

        self._reseller_name = reseller_name

    @property
    def min_price_count(self):
        """Gets the min_price_count of this ComPatagonaPricemonitorShareApiResellerSummaryByDomain.  # noqa: E501


        :return: The min_price_count of this ComPatagonaPricemonitorShareApiResellerSummaryByDomain.  # noqa: E501
        :rtype: float
        """
        return self._min_price_count

    @min_price_count.setter
    def min_price_count(self, min_price_count):
        """Sets the min_price_count of this ComPatagonaPricemonitorShareApiResellerSummaryByDomain.


        :param min_price_count: The min_price_count of this ComPatagonaPricemonitorShareApiResellerSummaryByDomain.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and min_price_count is None:  # noqa: E501
            raise ValueError("Invalid value for `min_price_count`, must not be `None`")  # noqa: E501

        self._min_price_count = min_price_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ComPatagonaPricemonitorShareApiResellerSummaryByDomain):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ComPatagonaPricemonitorShareApiResellerSummaryByDomain):
            return True

        return self.to_dict() != other.to_dict()
