# coding: utf-8

"""
    Omnia 2.0 API The Omnia 2.0 API is RESTful and provides access to the backend of Omnia 2.0 and Pricemonitor. It is used to manage products, offers, contracts and more.

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.0.6819
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from pricemonitor_api_client.configuration import Configuration


class ComPatagonaPricemonitorShareApiPostOrderStatisticsResponseV3(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'product_id': 'str',
        'item_id': 'str',
        'number_of_sold_items': 'int'
    }

    attribute_map = {
        'product_id': 'productId',
        'item_id': 'itemId',
        'number_of_sold_items': 'numberOfSoldItems'
    }

    def __init__(self, product_id=None, item_id=None, number_of_sold_items=None, local_vars_configuration=None):  # noqa: E501
        """ComPatagonaPricemonitorShareApiPostOrderStatisticsResponseV3 - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._product_id = None
        self._item_id = None
        self._number_of_sold_items = None
        self.discriminator = None

        self.product_id = product_id
        self.item_id = item_id
        self.number_of_sold_items = number_of_sold_items

    @property
    def product_id(self):
        """Gets the product_id of this ComPatagonaPricemonitorShareApiPostOrderStatisticsResponseV3.  # noqa: E501

        Pricemonitor's internal unique product identifier.  # noqa: E501

        :return: The product_id of this ComPatagonaPricemonitorShareApiPostOrderStatisticsResponseV3.  # noqa: E501
        :rtype: str
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """Sets the product_id of this ComPatagonaPricemonitorShareApiPostOrderStatisticsResponseV3.

        Pricemonitor's internal unique product identifier.  # noqa: E501

        :param product_id: The product_id of this ComPatagonaPricemonitorShareApiPostOrderStatisticsResponseV3.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and product_id is None:  # noqa: E501
            raise ValueError("Invalid value for `product_id`, must not be `None`")  # noqa: E501

        self._product_id = product_id

    @property
    def item_id(self):
        """Gets the item_id of this ComPatagonaPricemonitorShareApiPostOrderStatisticsResponseV3.  # noqa: E501

        The unique identifier of the sold item, expected to align with the customerProductId.  # noqa: E501

        :return: The item_id of this ComPatagonaPricemonitorShareApiPostOrderStatisticsResponseV3.  # noqa: E501
        :rtype: str
        """
        return self._item_id

    @item_id.setter
    def item_id(self, item_id):
        """Sets the item_id of this ComPatagonaPricemonitorShareApiPostOrderStatisticsResponseV3.

        The unique identifier of the sold item, expected to align with the customerProductId.  # noqa: E501

        :param item_id: The item_id of this ComPatagonaPricemonitorShareApiPostOrderStatisticsResponseV3.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and item_id is None:  # noqa: E501
            raise ValueError("Invalid value for `item_id`, must not be `None`")  # noqa: E501

        self._item_id = item_id

    @property
    def number_of_sold_items(self):
        """Gets the number_of_sold_items of this ComPatagonaPricemonitorShareApiPostOrderStatisticsResponseV3.  # noqa: E501

        The total count of how often the product has been sold.  # noqa: E501

        :return: The number_of_sold_items of this ComPatagonaPricemonitorShareApiPostOrderStatisticsResponseV3.  # noqa: E501
        :rtype: int
        """
        return self._number_of_sold_items

    @number_of_sold_items.setter
    def number_of_sold_items(self, number_of_sold_items):
        """Sets the number_of_sold_items of this ComPatagonaPricemonitorShareApiPostOrderStatisticsResponseV3.

        The total count of how often the product has been sold.  # noqa: E501

        :param number_of_sold_items: The number_of_sold_items of this ComPatagonaPricemonitorShareApiPostOrderStatisticsResponseV3.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and number_of_sold_items is None:  # noqa: E501
            raise ValueError("Invalid value for `number_of_sold_items`, must not be `None`")  # noqa: E501

        self._number_of_sold_items = number_of_sold_items

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ComPatagonaPricemonitorShareApiPostOrderStatisticsResponseV3):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ComPatagonaPricemonitorShareApiPostOrderStatisticsResponseV3):
            return True

        return self.to_dict() != other.to_dict()
