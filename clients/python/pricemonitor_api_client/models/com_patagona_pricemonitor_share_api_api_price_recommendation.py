# coding: utf-8

"""
    Omnia 2.0 API The Omnia 2.0 API is RESTful and provides access to the backend of Omnia 2.0 and Pricemonitor. It is used to manage products, offers, contracts and more.

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.0.7019
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from pricemonitor_api_client.configuration import Configuration


class ComPatagonaPricemonitorShareApiApiPriceRecommendation(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'old_price': 'float',
        'delivery_costs': 'float',
        'timestamp': 'datetime',
        'old_delivery_costs': 'float',
        'tags': 'list[ComPatagonaPricemonitorShareApiExtendedTag]',
        'price': 'float',
        'old_position': 'int',
        'gtin': 'float',
        'relative_price_change_percentage': 'float',
        'new_position': 'int',
        'customer_product_id': 'str',
        'original_max_price_boundary': 'float',
        'relevant_domain': 'str',
        'original_min_price_boundary': 'float',
        'currency': 'str',
        'product_id': 'str',
        'original_tags': 'list[ComPatagonaPricemonitorShareApiExtendedTag]'
    }

    attribute_map = {
        'old_price': 'oldPrice',
        'delivery_costs': 'deliveryCosts',
        'timestamp': 'timestamp',
        'old_delivery_costs': 'oldDeliveryCosts',
        'tags': 'tags',
        'price': 'price',
        'old_position': 'oldPosition',
        'gtin': 'gtin',
        'relative_price_change_percentage': 'relativePriceChangePercentage',
        'new_position': 'newPosition',
        'customer_product_id': 'customerProductId',
        'original_max_price_boundary': 'originalMaxPriceBoundary',
        'relevant_domain': 'relevantDomain',
        'original_min_price_boundary': 'originalMinPriceBoundary',
        'currency': 'currency',
        'product_id': 'productId',
        'original_tags': 'originalTags'
    }

    def __init__(self, old_price=None, delivery_costs=None, timestamp=None, old_delivery_costs=None, tags=None, price=None, old_position=None, gtin=None, relative_price_change_percentage=None, new_position=None, customer_product_id=None, original_max_price_boundary=None, relevant_domain=None, original_min_price_boundary=None, currency=None, product_id=None, original_tags=None, local_vars_configuration=None):  # noqa: E501
        """ComPatagonaPricemonitorShareApiApiPriceRecommendation - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._old_price = None
        self._delivery_costs = None
        self._timestamp = None
        self._old_delivery_costs = None
        self._tags = None
        self._price = None
        self._old_position = None
        self._gtin = None
        self._relative_price_change_percentage = None
        self._new_position = None
        self._customer_product_id = None
        self._original_max_price_boundary = None
        self._relevant_domain = None
        self._original_min_price_boundary = None
        self._currency = None
        self._product_id = None
        self._original_tags = None
        self.discriminator = None

        if old_price is not None:
            self.old_price = old_price
        if delivery_costs is not None:
            self.delivery_costs = delivery_costs
        self.timestamp = timestamp
        if old_delivery_costs is not None:
            self.old_delivery_costs = old_delivery_costs
        self.tags = tags
        self.price = price
        if old_position is not None:
            self.old_position = old_position
        if gtin is not None:
            self.gtin = gtin
        if relative_price_change_percentage is not None:
            self.relative_price_change_percentage = relative_price_change_percentage
        if new_position is not None:
            self.new_position = new_position
        if customer_product_id is not None:
            self.customer_product_id = customer_product_id
        self.original_max_price_boundary = original_max_price_boundary
        if relevant_domain is not None:
            self.relevant_domain = relevant_domain
        self.original_min_price_boundary = original_min_price_boundary
        self.currency = currency
        self.product_id = product_id
        self.original_tags = original_tags

    @property
    def old_price(self):
        """Gets the old_price of this ComPatagonaPricemonitorShareApiApiPriceRecommendation.  # noqa: E501

        The price of the cheapest offer of the own shop(s) on the relevant domain  # noqa: E501

        :return: The old_price of this ComPatagonaPricemonitorShareApiApiPriceRecommendation.  # noqa: E501
        :rtype: float
        """
        return self._old_price

    @old_price.setter
    def old_price(self, old_price):
        """Sets the old_price of this ComPatagonaPricemonitorShareApiApiPriceRecommendation.

        The price of the cheapest offer of the own shop(s) on the relevant domain  # noqa: E501

        :param old_price: The old_price of this ComPatagonaPricemonitorShareApiApiPriceRecommendation.  # noqa: E501
        :type: float
        """

        self._old_price = old_price

    @property
    def delivery_costs(self):
        """Gets the delivery_costs of this ComPatagonaPricemonitorShareApiApiPriceRecommendation.  # noqa: E501

        The delivery costs which were considered for the recommended price  # noqa: E501

        :return: The delivery_costs of this ComPatagonaPricemonitorShareApiApiPriceRecommendation.  # noqa: E501
        :rtype: float
        """
        return self._delivery_costs

    @delivery_costs.setter
    def delivery_costs(self, delivery_costs):
        """Sets the delivery_costs of this ComPatagonaPricemonitorShareApiApiPriceRecommendation.

        The delivery costs which were considered for the recommended price  # noqa: E501

        :param delivery_costs: The delivery_costs of this ComPatagonaPricemonitorShareApiApiPriceRecommendation.  # noqa: E501
        :type: float
        """

        self._delivery_costs = delivery_costs

    @property
    def timestamp(self):
        """Gets the timestamp of this ComPatagonaPricemonitorShareApiApiPriceRecommendation.  # noqa: E501

        The timestamp when the price recommendation has been calculated  # noqa: E501

        :return: The timestamp of this ComPatagonaPricemonitorShareApiApiPriceRecommendation.  # noqa: E501
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this ComPatagonaPricemonitorShareApiApiPriceRecommendation.

        The timestamp when the price recommendation has been calculated  # noqa: E501

        :param timestamp: The timestamp of this ComPatagonaPricemonitorShareApiApiPriceRecommendation.  # noqa: E501
        :type: datetime
        """
        if self.local_vars_configuration.client_side_validation and timestamp is None:  # noqa: E501
            raise ValueError("Invalid value for `timestamp`, must not be `None`")  # noqa: E501

        self._timestamp = timestamp

    @property
    def old_delivery_costs(self):
        """Gets the old_delivery_costs of this ComPatagonaPricemonitorShareApiApiPriceRecommendation.  # noqa: E501

        The delivery costs corresponding to `oldPrice`  # noqa: E501

        :return: The old_delivery_costs of this ComPatagonaPricemonitorShareApiApiPriceRecommendation.  # noqa: E501
        :rtype: float
        """
        return self._old_delivery_costs

    @old_delivery_costs.setter
    def old_delivery_costs(self, old_delivery_costs):
        """Sets the old_delivery_costs of this ComPatagonaPricemonitorShareApiApiPriceRecommendation.

        The delivery costs corresponding to `oldPrice`  # noqa: E501

        :param old_delivery_costs: The old_delivery_costs of this ComPatagonaPricemonitorShareApiApiPriceRecommendation.  # noqa: E501
        :type: float
        """

        self._old_delivery_costs = old_delivery_costs

    @property
    def tags(self):
        """Gets the tags of this ComPatagonaPricemonitorShareApiApiPriceRecommendation.  # noqa: E501

        Additional information on this product  # noqa: E501

        :return: The tags of this ComPatagonaPricemonitorShareApiApiPriceRecommendation.  # noqa: E501
        :rtype: list[ComPatagonaPricemonitorShareApiExtendedTag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this ComPatagonaPricemonitorShareApiApiPriceRecommendation.

        Additional information on this product  # noqa: E501

        :param tags: The tags of this ComPatagonaPricemonitorShareApiApiPriceRecommendation.  # noqa: E501
        :type: list[ComPatagonaPricemonitorShareApiExtendedTag]
        """
        if self.local_vars_configuration.client_side_validation and tags is None:  # noqa: E501
            raise ValueError("Invalid value for `tags`, must not be `None`")  # noqa: E501

        self._tags = tags

    @property
    def price(self):
        """Gets the price of this ComPatagonaPricemonitorShareApiApiPriceRecommendation.  # noqa: E501

        The recommended price of the relevant domain  # noqa: E501

        :return: The price of this ComPatagonaPricemonitorShareApiApiPriceRecommendation.  # noqa: E501
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this ComPatagonaPricemonitorShareApiApiPriceRecommendation.

        The recommended price of the relevant domain  # noqa: E501

        :param price: The price of this ComPatagonaPricemonitorShareApiApiPriceRecommendation.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and price is None:  # noqa: E501
            raise ValueError("Invalid value for `price`, must not be `None`")  # noqa: E501

        self._price = price

    @property
    def old_position(self):
        """Gets the old_position of this ComPatagonaPricemonitorShareApiApiPriceRecommendation.  # noqa: E501

        The old position on the relevant domain  # noqa: E501

        :return: The old_position of this ComPatagonaPricemonitorShareApiApiPriceRecommendation.  # noqa: E501
        :rtype: int
        """
        return self._old_position

    @old_position.setter
    def old_position(self, old_position):
        """Sets the old_position of this ComPatagonaPricemonitorShareApiApiPriceRecommendation.

        The old position on the relevant domain  # noqa: E501

        :param old_position: The old_position of this ComPatagonaPricemonitorShareApiApiPriceRecommendation.  # noqa: E501
        :type: int
        """

        self._old_position = old_position

    @property
    def gtin(self):
        """Gets the gtin of this ComPatagonaPricemonitorShareApiApiPriceRecommendation.  # noqa: E501

        GTIN of the product  # noqa: E501

        :return: The gtin of this ComPatagonaPricemonitorShareApiApiPriceRecommendation.  # noqa: E501
        :rtype: float
        """
        return self._gtin

    @gtin.setter
    def gtin(self, gtin):
        """Sets the gtin of this ComPatagonaPricemonitorShareApiApiPriceRecommendation.

        GTIN of the product  # noqa: E501

        :param gtin: The gtin of this ComPatagonaPricemonitorShareApiApiPriceRecommendation.  # noqa: E501
        :type: float
        """

        self._gtin = gtin

    @property
    def relative_price_change_percentage(self):
        """Gets the relative_price_change_percentage of this ComPatagonaPricemonitorShareApiApiPriceRecommendation.  # noqa: E501

        Absolute percentage how the recommended price changed compared to the `oldPrice` e.g. 200 stands for 200% which means the recommended price has doubled  # noqa: E501

        :return: The relative_price_change_percentage of this ComPatagonaPricemonitorShareApiApiPriceRecommendation.  # noqa: E501
        :rtype: float
        """
        return self._relative_price_change_percentage

    @relative_price_change_percentage.setter
    def relative_price_change_percentage(self, relative_price_change_percentage):
        """Sets the relative_price_change_percentage of this ComPatagonaPricemonitorShareApiApiPriceRecommendation.

        Absolute percentage how the recommended price changed compared to the `oldPrice` e.g. 200 stands for 200% which means the recommended price has doubled  # noqa: E501

        :param relative_price_change_percentage: The relative_price_change_percentage of this ComPatagonaPricemonitorShareApiApiPriceRecommendation.  # noqa: E501
        :type: float
        """

        self._relative_price_change_percentage = relative_price_change_percentage

    @property
    def new_position(self):
        """Gets the new_position of this ComPatagonaPricemonitorShareApiApiPriceRecommendation.  # noqa: E501

        The new position on the relevant domain  # noqa: E501

        :return: The new_position of this ComPatagonaPricemonitorShareApiApiPriceRecommendation.  # noqa: E501
        :rtype: int
        """
        return self._new_position

    @new_position.setter
    def new_position(self, new_position):
        """Sets the new_position of this ComPatagonaPricemonitorShareApiApiPriceRecommendation.

        The new position on the relevant domain  # noqa: E501

        :param new_position: The new_position of this ComPatagonaPricemonitorShareApiApiPriceRecommendation.  # noqa: E501
        :type: int
        """

        self._new_position = new_position

    @property
    def customer_product_id(self):
        """Gets the customer_product_id of this ComPatagonaPricemonitorShareApiApiPriceRecommendation.  # noqa: E501

        The customer's id of the product  # noqa: E501

        :return: The customer_product_id of this ComPatagonaPricemonitorShareApiApiPriceRecommendation.  # noqa: E501
        :rtype: str
        """
        return self._customer_product_id

    @customer_product_id.setter
    def customer_product_id(self, customer_product_id):
        """Sets the customer_product_id of this ComPatagonaPricemonitorShareApiApiPriceRecommendation.

        The customer's id of the product  # noqa: E501

        :param customer_product_id: The customer_product_id of this ComPatagonaPricemonitorShareApiApiPriceRecommendation.  # noqa: E501
        :type: str
        """

        self._customer_product_id = customer_product_id

    @property
    def original_max_price_boundary(self):
        """Gets the original_max_price_boundary of this ComPatagonaPricemonitorShareApiApiPriceRecommendation.  # noqa: E501

        Max price boundary during the time when the price was calculated  # noqa: E501

        :return: The original_max_price_boundary of this ComPatagonaPricemonitorShareApiApiPriceRecommendation.  # noqa: E501
        :rtype: float
        """
        return self._original_max_price_boundary

    @original_max_price_boundary.setter
    def original_max_price_boundary(self, original_max_price_boundary):
        """Sets the original_max_price_boundary of this ComPatagonaPricemonitorShareApiApiPriceRecommendation.

        Max price boundary during the time when the price was calculated  # noqa: E501

        :param original_max_price_boundary: The original_max_price_boundary of this ComPatagonaPricemonitorShareApiApiPriceRecommendation.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and original_max_price_boundary is None:  # noqa: E501
            raise ValueError("Invalid value for `original_max_price_boundary`, must not be `None`")  # noqa: E501

        self._original_max_price_boundary = original_max_price_boundary

    @property
    def relevant_domain(self):
        """Gets the relevant_domain of this ComPatagonaPricemonitorShareApiApiPriceRecommendation.  # noqa: E501

        The decisive domain of the price recommendation. It's been determined by the cheapest price recommendation.  # noqa: E501

        :return: The relevant_domain of this ComPatagonaPricemonitorShareApiApiPriceRecommendation.  # noqa: E501
        :rtype: str
        """
        return self._relevant_domain

    @relevant_domain.setter
    def relevant_domain(self, relevant_domain):
        """Sets the relevant_domain of this ComPatagonaPricemonitorShareApiApiPriceRecommendation.

        The decisive domain of the price recommendation. It's been determined by the cheapest price recommendation.  # noqa: E501

        :param relevant_domain: The relevant_domain of this ComPatagonaPricemonitorShareApiApiPriceRecommendation.  # noqa: E501
        :type: str
        """

        self._relevant_domain = relevant_domain

    @property
    def original_min_price_boundary(self):
        """Gets the original_min_price_boundary of this ComPatagonaPricemonitorShareApiApiPriceRecommendation.  # noqa: E501

        Min price boundary during the time when the price was calculated  # noqa: E501

        :return: The original_min_price_boundary of this ComPatagonaPricemonitorShareApiApiPriceRecommendation.  # noqa: E501
        :rtype: float
        """
        return self._original_min_price_boundary

    @original_min_price_boundary.setter
    def original_min_price_boundary(self, original_min_price_boundary):
        """Sets the original_min_price_boundary of this ComPatagonaPricemonitorShareApiApiPriceRecommendation.

        Min price boundary during the time when the price was calculated  # noqa: E501

        :param original_min_price_boundary: The original_min_price_boundary of this ComPatagonaPricemonitorShareApiApiPriceRecommendation.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and original_min_price_boundary is None:  # noqa: E501
            raise ValueError("Invalid value for `original_min_price_boundary`, must not be `None`")  # noqa: E501

        self._original_min_price_boundary = original_min_price_boundary

    @property
    def currency(self):
        """Gets the currency of this ComPatagonaPricemonitorShareApiApiPriceRecommendation.  # noqa: E501

        The currency of the price recommendation.  # noqa: E501

        :return: The currency of this ComPatagonaPricemonitorShareApiApiPriceRecommendation.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this ComPatagonaPricemonitorShareApiApiPriceRecommendation.

        The currency of the price recommendation.  # noqa: E501

        :param currency: The currency of this ComPatagonaPricemonitorShareApiApiPriceRecommendation.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and currency is None:  # noqa: E501
            raise ValueError("Invalid value for `currency`, must not be `None`")  # noqa: E501

        self._currency = currency

    @property
    def product_id(self):
        """Gets the product_id of this ComPatagonaPricemonitorShareApiApiPriceRecommendation.  # noqa: E501

        The internal product id of the pricemonitor  # noqa: E501

        :return: The product_id of this ComPatagonaPricemonitorShareApiApiPriceRecommendation.  # noqa: E501
        :rtype: str
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """Sets the product_id of this ComPatagonaPricemonitorShareApiApiPriceRecommendation.

        The internal product id of the pricemonitor  # noqa: E501

        :param product_id: The product_id of this ComPatagonaPricemonitorShareApiApiPriceRecommendation.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and product_id is None:  # noqa: E501
            raise ValueError("Invalid value for `product_id`, must not be `None`")  # noqa: E501

        self._product_id = product_id

    @property
    def original_tags(self):
        """Gets the original_tags of this ComPatagonaPricemonitorShareApiApiPriceRecommendation.  # noqa: E501

        List of tags which were set during the time when the price has been calculated. ATTENTION: These are historic tags which are maybe outdated or incomplete.  # noqa: E501

        :return: The original_tags of this ComPatagonaPricemonitorShareApiApiPriceRecommendation.  # noqa: E501
        :rtype: list[ComPatagonaPricemonitorShareApiExtendedTag]
        """
        return self._original_tags

    @original_tags.setter
    def original_tags(self, original_tags):
        """Sets the original_tags of this ComPatagonaPricemonitorShareApiApiPriceRecommendation.

        List of tags which were set during the time when the price has been calculated. ATTENTION: These are historic tags which are maybe outdated or incomplete.  # noqa: E501

        :param original_tags: The original_tags of this ComPatagonaPricemonitorShareApiApiPriceRecommendation.  # noqa: E501
        :type: list[ComPatagonaPricemonitorShareApiExtendedTag]
        """
        if self.local_vars_configuration.client_side_validation and original_tags is None:  # noqa: E501
            raise ValueError("Invalid value for `original_tags`, must not be `None`")  # noqa: E501

        self._original_tags = original_tags

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ComPatagonaPricemonitorShareApiApiPriceRecommendation):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ComPatagonaPricemonitorShareApiApiPriceRecommendation):
            return True

        return self.to_dict() != other.to_dict()
