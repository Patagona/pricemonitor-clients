# coding: utf-8

"""
    Omnia 2.0 API The Omnia 2.0 API is RESTful and provides access to the backend of Omnia 2.0 and Pricemonitor. It is used to manage products, offers, contracts and more.

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.0.6780
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from pricemonitor_api_client.configuration import Configuration


class ComPatagonaPricemonitorShareApiGetShopsByDomainResponseV3(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'domain': 'str',
        'shops': 'list[str]'
    }

    attribute_map = {
        'domain': 'domain',
        'shops': 'shops'
    }

    def __init__(self, domain=None, shops=None, local_vars_configuration=None):  # noqa: E501
        """ComPatagonaPricemonitorShareApiGetShopsByDomainResponseV3 - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._domain = None
        self._shops = None
        self.discriminator = None

        self.domain = domain
        self.shops = shops

    @property
    def domain(self):
        """Gets the domain of this ComPatagonaPricemonitorShareApiGetShopsByDomainResponseV3.  # noqa: E501

        domain name  # noqa: E501

        :return: The domain of this ComPatagonaPricemonitorShareApiGetShopsByDomainResponseV3.  # noqa: E501
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this ComPatagonaPricemonitorShareApiGetShopsByDomainResponseV3.

        domain name  # noqa: E501

        :param domain: The domain of this ComPatagonaPricemonitorShareApiGetShopsByDomainResponseV3.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and domain is None:  # noqa: E501
            raise ValueError("Invalid value for `domain`, must not be `None`")  # noqa: E501

        self._domain = domain

    @property
    def shops(self):
        """Gets the shops of this ComPatagonaPricemonitorShareApiGetShopsByDomainResponseV3.  # noqa: E501

        shop names which have offers in the domain for a given time range  # noqa: E501

        :return: The shops of this ComPatagonaPricemonitorShareApiGetShopsByDomainResponseV3.  # noqa: E501
        :rtype: list[str]
        """
        return self._shops

    @shops.setter
    def shops(self, shops):
        """Sets the shops of this ComPatagonaPricemonitorShareApiGetShopsByDomainResponseV3.

        shop names which have offers in the domain for a given time range  # noqa: E501

        :param shops: The shops of this ComPatagonaPricemonitorShareApiGetShopsByDomainResponseV3.  # noqa: E501
        :type: list[str]
        """
        if self.local_vars_configuration.client_side_validation and shops is None:  # noqa: E501
            raise ValueError("Invalid value for `shops`, must not be `None`")  # noqa: E501

        self._shops = shops

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ComPatagonaPricemonitorShareApiGetShopsByDomainResponseV3):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ComPatagonaPricemonitorShareApiGetShopsByDomainResponseV3):
            return True

        return self.to_dict() != other.to_dict()
