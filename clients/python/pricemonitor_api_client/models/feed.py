# coding: utf-8

"""
    Omnia 2.0 API The Omnia 2.0 API is RESTful and provides access to the backend of Omnia 2.0 and Pricemonitor. It is used to manage products, offers, contracts, and more.  This API supports both public endpoints for customer integration and internal endpoints for platform management. All endpoints are authenticated using either Basic Authentication or JWT Bearer tokens.

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.0.7276
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from pricemonitor_api_client.configuration import Configuration


class Feed(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'contract_id': 'str',
        'csv_decimal_separator': 'str',
        'csv_separator': 'str',
        'delta_url': 'str',
        'fields': 'list[FeedFields]',
        'format': 'str',
        'id': 'str',
        'last_accessed': 'datetime',
        'last_deletion': 'datetime',
        'name': 'str',
        'url': 'str',
        'version': 'int'
    }

    attribute_map = {
        'contract_id': 'contractId',
        'csv_decimal_separator': 'csvDecimalSeparator',
        'csv_separator': 'csvSeparator',
        'delta_url': 'deltaUrl',
        'fields': 'fields',
        'format': 'format',
        'id': 'id',
        'last_accessed': 'lastAccessed',
        'last_deletion': 'lastDeletion',
        'name': 'name',
        'url': 'url',
        'version': 'version'
    }

    def __init__(self, contract_id=None, csv_decimal_separator=None, csv_separator=None, delta_url=None, fields=None, format=None, id=None, last_accessed=None, last_deletion=None, name=None, url=None, version=None, local_vars_configuration=None):  # noqa: E501
        """Feed - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._contract_id = None
        self._csv_decimal_separator = None
        self._csv_separator = None
        self._delta_url = None
        self._fields = None
        self._format = None
        self._id = None
        self._last_accessed = None
        self._last_deletion = None
        self._name = None
        self._url = None
        self._version = None
        self.discriminator = None

        if contract_id is not None:
            self.contract_id = contract_id
        if csv_decimal_separator is not None:
            self.csv_decimal_separator = csv_decimal_separator
        if csv_separator is not None:
            self.csv_separator = csv_separator
        if delta_url is not None:
            self.delta_url = delta_url
        if fields is not None:
            self.fields = fields
        if format is not None:
            self.format = format
        if id is not None:
            self.id = id
        if last_accessed is not None:
            self.last_accessed = last_accessed
        if last_deletion is not None:
            self.last_deletion = last_deletion
        if name is not None:
            self.name = name
        if url is not None:
            self.url = url
        if version is not None:
            self.version = version

    @property
    def contract_id(self):
        """Gets the contract_id of this Feed.  # noqa: E501


        :return: The contract_id of this Feed.  # noqa: E501
        :rtype: str
        """
        return self._contract_id

    @contract_id.setter
    def contract_id(self, contract_id):
        """Sets the contract_id of this Feed.


        :param contract_id: The contract_id of this Feed.  # noqa: E501
        :type: str
        """

        self._contract_id = contract_id

    @property
    def csv_decimal_separator(self):
        """Gets the csv_decimal_separator of this Feed.  # noqa: E501


        :return: The csv_decimal_separator of this Feed.  # noqa: E501
        :rtype: str
        """
        return self._csv_decimal_separator

    @csv_decimal_separator.setter
    def csv_decimal_separator(self, csv_decimal_separator):
        """Sets the csv_decimal_separator of this Feed.


        :param csv_decimal_separator: The csv_decimal_separator of this Feed.  # noqa: E501
        :type: str
        """

        self._csv_decimal_separator = csv_decimal_separator

    @property
    def csv_separator(self):
        """Gets the csv_separator of this Feed.  # noqa: E501


        :return: The csv_separator of this Feed.  # noqa: E501
        :rtype: str
        """
        return self._csv_separator

    @csv_separator.setter
    def csv_separator(self, csv_separator):
        """Sets the csv_separator of this Feed.


        :param csv_separator: The csv_separator of this Feed.  # noqa: E501
        :type: str
        """

        self._csv_separator = csv_separator

    @property
    def delta_url(self):
        """Gets the delta_url of this Feed.  # noqa: E501


        :return: The delta_url of this Feed.  # noqa: E501
        :rtype: str
        """
        return self._delta_url

    @delta_url.setter
    def delta_url(self, delta_url):
        """Sets the delta_url of this Feed.


        :param delta_url: The delta_url of this Feed.  # noqa: E501
        :type: str
        """

        self._delta_url = delta_url

    @property
    def fields(self):
        """Gets the fields of this Feed.  # noqa: E501


        :return: The fields of this Feed.  # noqa: E501
        :rtype: list[FeedFields]
        """
        return self._fields

    @fields.setter
    def fields(self, fields):
        """Sets the fields of this Feed.


        :param fields: The fields of this Feed.  # noqa: E501
        :type: list[FeedFields]
        """

        self._fields = fields

    @property
    def format(self):
        """Gets the format of this Feed.  # noqa: E501


        :return: The format of this Feed.  # noqa: E501
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this Feed.


        :param format: The format of this Feed.  # noqa: E501
        :type: str
        """

        self._format = format

    @property
    def id(self):
        """Gets the id of this Feed.  # noqa: E501


        :return: The id of this Feed.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Feed.


        :param id: The id of this Feed.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def last_accessed(self):
        """Gets the last_accessed of this Feed.  # noqa: E501


        :return: The last_accessed of this Feed.  # noqa: E501
        :rtype: datetime
        """
        return self._last_accessed

    @last_accessed.setter
    def last_accessed(self, last_accessed):
        """Sets the last_accessed of this Feed.


        :param last_accessed: The last_accessed of this Feed.  # noqa: E501
        :type: datetime
        """

        self._last_accessed = last_accessed

    @property
    def last_deletion(self):
        """Gets the last_deletion of this Feed.  # noqa: E501


        :return: The last_deletion of this Feed.  # noqa: E501
        :rtype: datetime
        """
        return self._last_deletion

    @last_deletion.setter
    def last_deletion(self, last_deletion):
        """Sets the last_deletion of this Feed.


        :param last_deletion: The last_deletion of this Feed.  # noqa: E501
        :type: datetime
        """

        self._last_deletion = last_deletion

    @property
    def name(self):
        """Gets the name of this Feed.  # noqa: E501


        :return: The name of this Feed.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Feed.


        :param name: The name of this Feed.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def url(self):
        """Gets the url of this Feed.  # noqa: E501


        :return: The url of this Feed.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Feed.


        :param url: The url of this Feed.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def version(self):
        """Gets the version of this Feed.  # noqa: E501


        :return: The version of this Feed.  # noqa: E501
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Feed.


        :param version: The version of this Feed.  # noqa: E501
        :type: int
        """

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Feed):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Feed):
            return True

        return self.to_dict() != other.to_dict()
