# coding: utf-8

"""
    Omnia 2.0 API The Omnia 2.0 API is RESTful and provides access to the backend of Omnia 2.0 and Pricemonitor. It is used to manage products, offers, contracts, and more.  This API supports both public endpoints for customer integration and internal endpoints for platform management. All endpoints are authenticated using either Basic Authentication or JWT Bearer tokens.

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.0.7281
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from pricemonitor_api_client.configuration import Configuration


class ComPatagonaPricemonitorShareApiPostOfferStatisticsResponseV31(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'product_id': 'str',
        'offer_count': 'int',
        'stats': 'ComPatagonaPricemonitorShareApiProductOfferStatisticsV31'
    }

    attribute_map = {
        'product_id': 'productId',
        'offer_count': 'offerCount',
        'stats': 'stats'
    }

    def __init__(self, product_id=None, offer_count=None, stats=None, local_vars_configuration=None):  # noqa: E501
        """ComPatagonaPricemonitorShareApiPostOfferStatisticsResponseV31 - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._product_id = None
        self._offer_count = None
        self._stats = None
        self.discriminator = None

        self.product_id = product_id
        self.offer_count = offer_count
        self.stats = stats

    @property
    def product_id(self):
        """Gets the product_id of this ComPatagonaPricemonitorShareApiPostOfferStatisticsResponseV31.  # noqa: E501

        Pricemonitor's internal unique product identifier.  # noqa: E501

        :return: The product_id of this ComPatagonaPricemonitorShareApiPostOfferStatisticsResponseV31.  # noqa: E501
        :rtype: str
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """Sets the product_id of this ComPatagonaPricemonitorShareApiPostOfferStatisticsResponseV31.

        Pricemonitor's internal unique product identifier.  # noqa: E501

        :param product_id: The product_id of this ComPatagonaPricemonitorShareApiPostOfferStatisticsResponseV31.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and product_id is None:  # noqa: E501
            raise ValueError("Invalid value for `product_id`, must not be `None`")  # noqa: E501

        self._product_id = product_id

    @property
    def offer_count(self):
        """Gets the offer_count of this ComPatagonaPricemonitorShareApiPostOfferStatisticsResponseV31.  # noqa: E501

        The number of offers found on all domains for the product.  # noqa: E501

        :return: The offer_count of this ComPatagonaPricemonitorShareApiPostOfferStatisticsResponseV31.  # noqa: E501
        :rtype: int
        """
        return self._offer_count

    @offer_count.setter
    def offer_count(self, offer_count):
        """Sets the offer_count of this ComPatagonaPricemonitorShareApiPostOfferStatisticsResponseV31.

        The number of offers found on all domains for the product.  # noqa: E501

        :param offer_count: The offer_count of this ComPatagonaPricemonitorShareApiPostOfferStatisticsResponseV31.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and offer_count is None:  # noqa: E501
            raise ValueError("Invalid value for `offer_count`, must not be `None`")  # noqa: E501

        self._offer_count = offer_count

    @property
    def stats(self):
        """Gets the stats of this ComPatagonaPricemonitorShareApiPostOfferStatisticsResponseV31.  # noqa: E501


        :return: The stats of this ComPatagonaPricemonitorShareApiPostOfferStatisticsResponseV31.  # noqa: E501
        :rtype: ComPatagonaPricemonitorShareApiProductOfferStatisticsV31
        """
        return self._stats

    @stats.setter
    def stats(self, stats):
        """Sets the stats of this ComPatagonaPricemonitorShareApiPostOfferStatisticsResponseV31.


        :param stats: The stats of this ComPatagonaPricemonitorShareApiPostOfferStatisticsResponseV31.  # noqa: E501
        :type: ComPatagonaPricemonitorShareApiProductOfferStatisticsV31
        """
        if self.local_vars_configuration.client_side_validation and stats is None:  # noqa: E501
            raise ValueError("Invalid value for `stats`, must not be `None`")  # noqa: E501

        self._stats = stats

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ComPatagonaPricemonitorShareApiPostOfferStatisticsResponseV31):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ComPatagonaPricemonitorShareApiPostOfferStatisticsResponseV31):
            return True

        return self.to_dict() != other.to_dict()
