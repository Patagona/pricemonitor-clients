# coding: utf-8

"""
    Pricemonitor API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.0.6098
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from pricemonitor_api_client.configuration import Configuration


class ComPatagonaPricemonitorShareApiProductMonitoringStatusStats(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'domain': 'str',
        'started': 'int',
        'completed': 'int',
        'outcomes': 'list[ComPatagonaPricemonitorShareApiProductMonitoringStatusStatsOutcomes]'
    }

    attribute_map = {
        'domain': 'domain',
        'started': 'started',
        'completed': 'completed',
        'outcomes': 'outcomes'
    }

    def __init__(self, domain=None, started=None, completed=None, outcomes=None, local_vars_configuration=None):  # noqa: E501
        """ComPatagonaPricemonitorShareApiProductMonitoringStatusStats - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._domain = None
        self._started = None
        self._completed = None
        self._outcomes = None
        self.discriminator = None

        self.domain = domain
        self.started = started
        self.completed = completed
        self.outcomes = outcomes

    @property
    def domain(self):
        """Gets the domain of this ComPatagonaPricemonitorShareApiProductMonitoringStatusStats.  # noqa: E501


        :return: The domain of this ComPatagonaPricemonitorShareApiProductMonitoringStatusStats.  # noqa: E501
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this ComPatagonaPricemonitorShareApiProductMonitoringStatusStats.


        :param domain: The domain of this ComPatagonaPricemonitorShareApiProductMonitoringStatusStats.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and domain is None:  # noqa: E501
            raise ValueError("Invalid value for `domain`, must not be `None`")  # noqa: E501

        self._domain = domain

    @property
    def started(self):
        """Gets the started of this ComPatagonaPricemonitorShareApiProductMonitoringStatusStats.  # noqa: E501


        :return: The started of this ComPatagonaPricemonitorShareApiProductMonitoringStatusStats.  # noqa: E501
        :rtype: int
        """
        return self._started

    @started.setter
    def started(self, started):
        """Sets the started of this ComPatagonaPricemonitorShareApiProductMonitoringStatusStats.


        :param started: The started of this ComPatagonaPricemonitorShareApiProductMonitoringStatusStats.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and started is None:  # noqa: E501
            raise ValueError("Invalid value for `started`, must not be `None`")  # noqa: E501

        self._started = started

    @property
    def completed(self):
        """Gets the completed of this ComPatagonaPricemonitorShareApiProductMonitoringStatusStats.  # noqa: E501


        :return: The completed of this ComPatagonaPricemonitorShareApiProductMonitoringStatusStats.  # noqa: E501
        :rtype: int
        """
        return self._completed

    @completed.setter
    def completed(self, completed):
        """Sets the completed of this ComPatagonaPricemonitorShareApiProductMonitoringStatusStats.


        :param completed: The completed of this ComPatagonaPricemonitorShareApiProductMonitoringStatusStats.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and completed is None:  # noqa: E501
            raise ValueError("Invalid value for `completed`, must not be `None`")  # noqa: E501

        self._completed = completed

    @property
    def outcomes(self):
        """Gets the outcomes of this ComPatagonaPricemonitorShareApiProductMonitoringStatusStats.  # noqa: E501


        :return: The outcomes of this ComPatagonaPricemonitorShareApiProductMonitoringStatusStats.  # noqa: E501
        :rtype: list[ComPatagonaPricemonitorShareApiProductMonitoringStatusStatsOutcomes]
        """
        return self._outcomes

    @outcomes.setter
    def outcomes(self, outcomes):
        """Sets the outcomes of this ComPatagonaPricemonitorShareApiProductMonitoringStatusStats.


        :param outcomes: The outcomes of this ComPatagonaPricemonitorShareApiProductMonitoringStatusStats.  # noqa: E501
        :type: list[ComPatagonaPricemonitorShareApiProductMonitoringStatusStatsOutcomes]
        """
        if self.local_vars_configuration.client_side_validation and outcomes is None:  # noqa: E501
            raise ValueError("Invalid value for `outcomes`, must not be `None`")  # noqa: E501

        self._outcomes = outcomes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ComPatagonaPricemonitorShareApiProductMonitoringStatusStats):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ComPatagonaPricemonitorShareApiProductMonitoringStatusStats):
            return True

        return self.to_dict() != other.to_dict()
