# coding: utf-8

"""
    Omnia 2.0 API The Omnia 2.0 API is RESTful and provides access to the backend of Omnia 2.0 and Pricemonitor. It is used to manage products, offers, contracts and more.

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.0.7090
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from pricemonitor_api_client.configuration import Configuration


class ComPatagonaPricemonitorShareApiPriceStatisticsV31(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'min': 'float',
        'avg': 'float',
        'max': 'float',
        'cheapest_shops': 'list[str]'
    }

    attribute_map = {
        'min': 'min',
        'avg': 'avg',
        'max': 'max',
        'cheapest_shops': 'cheapestShops'
    }

    def __init__(self, min=None, avg=None, max=None, cheapest_shops=None, local_vars_configuration=None):  # noqa: E501
        """ComPatagonaPricemonitorShareApiPriceStatisticsV31 - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._min = None
        self._avg = None
        self._max = None
        self._cheapest_shops = None
        self.discriminator = None

        self.min = min
        self.avg = avg
        self.max = max
        self.cheapest_shops = cheapest_shops

    @property
    def min(self):
        """Gets the min of this ComPatagonaPricemonitorShareApiPriceStatisticsV31.  # noqa: E501

        The minimum offer price.  # noqa: E501

        :return: The min of this ComPatagonaPricemonitorShareApiPriceStatisticsV31.  # noqa: E501
        :rtype: float
        """
        return self._min

    @min.setter
    def min(self, min):
        """Sets the min of this ComPatagonaPricemonitorShareApiPriceStatisticsV31.

        The minimum offer price.  # noqa: E501

        :param min: The min of this ComPatagonaPricemonitorShareApiPriceStatisticsV31.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and min is None:  # noqa: E501
            raise ValueError("Invalid value for `min`, must not be `None`")  # noqa: E501

        self._min = min

    @property
    def avg(self):
        """Gets the avg of this ComPatagonaPricemonitorShareApiPriceStatisticsV31.  # noqa: E501

        The average offer price.  # noqa: E501

        :return: The avg of this ComPatagonaPricemonitorShareApiPriceStatisticsV31.  # noqa: E501
        :rtype: float
        """
        return self._avg

    @avg.setter
    def avg(self, avg):
        """Sets the avg of this ComPatagonaPricemonitorShareApiPriceStatisticsV31.

        The average offer price.  # noqa: E501

        :param avg: The avg of this ComPatagonaPricemonitorShareApiPriceStatisticsV31.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and avg is None:  # noqa: E501
            raise ValueError("Invalid value for `avg`, must not be `None`")  # noqa: E501

        self._avg = avg

    @property
    def max(self):
        """Gets the max of this ComPatagonaPricemonitorShareApiPriceStatisticsV31.  # noqa: E501

        The maximum offer price.  # noqa: E501

        :return: The max of this ComPatagonaPricemonitorShareApiPriceStatisticsV31.  # noqa: E501
        :rtype: float
        """
        return self._max

    @max.setter
    def max(self, max):
        """Sets the max of this ComPatagonaPricemonitorShareApiPriceStatisticsV31.

        The maximum offer price.  # noqa: E501

        :param max: The max of this ComPatagonaPricemonitorShareApiPriceStatisticsV31.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and max is None:  # noqa: E501
            raise ValueError("Invalid value for `max`, must not be `None`")  # noqa: E501

        self._max = max

    @property
    def cheapest_shops(self):
        """Gets the cheapest_shops of this ComPatagonaPricemonitorShareApiPriceStatisticsV31.  # noqa: E501

        The shop names that offer for minimum price.  # noqa: E501

        :return: The cheapest_shops of this ComPatagonaPricemonitorShareApiPriceStatisticsV31.  # noqa: E501
        :rtype: list[str]
        """
        return self._cheapest_shops

    @cheapest_shops.setter
    def cheapest_shops(self, cheapest_shops):
        """Sets the cheapest_shops of this ComPatagonaPricemonitorShareApiPriceStatisticsV31.

        The shop names that offer for minimum price.  # noqa: E501

        :param cheapest_shops: The cheapest_shops of this ComPatagonaPricemonitorShareApiPriceStatisticsV31.  # noqa: E501
        :type: list[str]
        """
        if self.local_vars_configuration.client_side_validation and cheapest_shops is None:  # noqa: E501
            raise ValueError("Invalid value for `cheapest_shops`, must not be `None`")  # noqa: E501

        self._cheapest_shops = cheapest_shops

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ComPatagonaPricemonitorShareApiPriceStatisticsV31):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ComPatagonaPricemonitorShareApiPriceStatisticsV31):
            return True

        return self.to_dict() != other.to_dict()
