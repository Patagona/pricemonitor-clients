# coding: utf-8

"""
    Omnia 2.0 API The Omnia 2.0 API is RESTful and provides access to the backend of Omnia 2.0 and Pricemonitor. It is used to manage products, offers, contracts and more.

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.0.6963
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from pricemonitor_api_client.configuration import Configuration


class ComPatagonaPricemonitorShareApiPostAccountRequestV3(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'email': 'str',
        'password': 'str'
    }

    attribute_map = {
        'name': 'name',
        'email': 'email',
        'password': 'password'
    }

    def __init__(self, name=None, email=None, password=None, local_vars_configuration=None):  # noqa: E501
        """ComPatagonaPricemonitorShareApiPostAccountRequestV3 - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._email = None
        self._password = None
        self.discriminator = None

        self.name = name
        self.email = email
        self.password = password

    @property
    def name(self):
        """Gets the name of this ComPatagonaPricemonitorShareApiPostAccountRequestV3.  # noqa: E501

        Defines the name of the new user account.  # noqa: E501

        :return: The name of this ComPatagonaPricemonitorShareApiPostAccountRequestV3.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ComPatagonaPricemonitorShareApiPostAccountRequestV3.

        Defines the name of the new user account.  # noqa: E501

        :param name: The name of this ComPatagonaPricemonitorShareApiPostAccountRequestV3.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def email(self):
        """Gets the email of this ComPatagonaPricemonitorShareApiPostAccountRequestV3.  # noqa: E501

        Defines the email of the new user account.  # noqa: E501

        :return: The email of this ComPatagonaPricemonitorShareApiPostAccountRequestV3.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this ComPatagonaPricemonitorShareApiPostAccountRequestV3.

        Defines the email of the new user account.  # noqa: E501

        :param email: The email of this ComPatagonaPricemonitorShareApiPostAccountRequestV3.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and email is None:  # noqa: E501
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501

        self._email = email

    @property
    def password(self):
        """Gets the password of this ComPatagonaPricemonitorShareApiPostAccountRequestV3.  # noqa: E501

        Defines the password for the new user account.  # noqa: E501

        :return: The password of this ComPatagonaPricemonitorShareApiPostAccountRequestV3.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this ComPatagonaPricemonitorShareApiPostAccountRequestV3.

        Defines the password for the new user account.  # noqa: E501

        :param password: The password of this ComPatagonaPricemonitorShareApiPostAccountRequestV3.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and password is None:  # noqa: E501
            raise ValueError("Invalid value for `password`, must not be `None`")  # noqa: E501

        self._password = password

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ComPatagonaPricemonitorShareApiPostAccountRequestV3):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ComPatagonaPricemonitorShareApiPostAccountRequestV3):
            return True

        return self.to_dict() != other.to_dict()
