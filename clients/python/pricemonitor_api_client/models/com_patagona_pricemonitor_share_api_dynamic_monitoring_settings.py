# coding: utf-8

"""
    Omnia 2.0 API The Omnia 2.0 API is RESTful and provides access to the backend of Omnia 2.0 and Pricemonitor. It is used to manage products, offers, contracts and more.

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.0.7150
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from pricemonitor_api_client.configuration import Configuration


class ComPatagonaPricemonitorShareApiDynamicMonitoringSettings(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'analysis_range': 'int',
        'threshold': 'float',
        'adjusted_interval': 'int'
    }

    attribute_map = {
        'analysis_range': 'analysisRange',
        'threshold': 'threshold',
        'adjusted_interval': 'adjustedInterval'
    }

    def __init__(self, analysis_range=None, threshold=None, adjusted_interval=None, local_vars_configuration=None):  # noqa: E501
        """ComPatagonaPricemonitorShareApiDynamicMonitoringSettings - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._analysis_range = None
        self._threshold = None
        self._adjusted_interval = None
        self.discriminator = None

        self.analysis_range = analysis_range
        self.threshold = threshold
        self.adjusted_interval = adjusted_interval

    @property
    def analysis_range(self):
        """Gets the analysis_range of this ComPatagonaPricemonitorShareApiDynamicMonitoringSettings.  # noqa: E501


        :return: The analysis_range of this ComPatagonaPricemonitorShareApiDynamicMonitoringSettings.  # noqa: E501
        :rtype: int
        """
        return self._analysis_range

    @analysis_range.setter
    def analysis_range(self, analysis_range):
        """Sets the analysis_range of this ComPatagonaPricemonitorShareApiDynamicMonitoringSettings.


        :param analysis_range: The analysis_range of this ComPatagonaPricemonitorShareApiDynamicMonitoringSettings.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and analysis_range is None:  # noqa: E501
            raise ValueError("Invalid value for `analysis_range`, must not be `None`")  # noqa: E501

        self._analysis_range = analysis_range

    @property
    def threshold(self):
        """Gets the threshold of this ComPatagonaPricemonitorShareApiDynamicMonitoringSettings.  # noqa: E501


        :return: The threshold of this ComPatagonaPricemonitorShareApiDynamicMonitoringSettings.  # noqa: E501
        :rtype: float
        """
        return self._threshold

    @threshold.setter
    def threshold(self, threshold):
        """Sets the threshold of this ComPatagonaPricemonitorShareApiDynamicMonitoringSettings.


        :param threshold: The threshold of this ComPatagonaPricemonitorShareApiDynamicMonitoringSettings.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and threshold is None:  # noqa: E501
            raise ValueError("Invalid value for `threshold`, must not be `None`")  # noqa: E501

        self._threshold = threshold

    @property
    def adjusted_interval(self):
        """Gets the adjusted_interval of this ComPatagonaPricemonitorShareApiDynamicMonitoringSettings.  # noqa: E501


        :return: The adjusted_interval of this ComPatagonaPricemonitorShareApiDynamicMonitoringSettings.  # noqa: E501
        :rtype: int
        """
        return self._adjusted_interval

    @adjusted_interval.setter
    def adjusted_interval(self, adjusted_interval):
        """Sets the adjusted_interval of this ComPatagonaPricemonitorShareApiDynamicMonitoringSettings.


        :param adjusted_interval: The adjusted_interval of this ComPatagonaPricemonitorShareApiDynamicMonitoringSettings.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and adjusted_interval is None:  # noqa: E501
            raise ValueError("Invalid value for `adjusted_interval`, must not be `None`")  # noqa: E501

        self._adjusted_interval = adjusted_interval

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ComPatagonaPricemonitorShareApiDynamicMonitoringSettings):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ComPatagonaPricemonitorShareApiDynamicMonitoringSettings):
            return True

        return self.to_dict() != other.to_dict()
