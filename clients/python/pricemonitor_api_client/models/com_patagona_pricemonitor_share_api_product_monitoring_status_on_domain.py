# coding: utf-8

"""
    Pricemonitor API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.0.6123
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from pricemonitor_api_client.configuration import Configuration


class ComPatagonaPricemonitorShareApiProductMonitoringStatusOnDomain(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'domain': 'str',
        'started_at': 'datetime',
        'completed_at': 'datetime',
        'outcome': 'ComPatagonaPricemonitorShareApiProductMonitoringStatusOnDomainOutcome'
    }

    attribute_map = {
        'domain': 'domain',
        'started_at': 'startedAt',
        'completed_at': 'completedAt',
        'outcome': 'outcome'
    }

    def __init__(self, domain=None, started_at=None, completed_at=None, outcome=None, local_vars_configuration=None):  # noqa: E501
        """ComPatagonaPricemonitorShareApiProductMonitoringStatusOnDomain - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._domain = None
        self._started_at = None
        self._completed_at = None
        self._outcome = None
        self.discriminator = None

        self.domain = domain
        if started_at is not None:
            self.started_at = started_at
        if completed_at is not None:
            self.completed_at = completed_at
        if outcome is not None:
            self.outcome = outcome

    @property
    def domain(self):
        """Gets the domain of this ComPatagonaPricemonitorShareApiProductMonitoringStatusOnDomain.  # noqa: E501

        The domain which gets monitored.  # noqa: E501

        :return: The domain of this ComPatagonaPricemonitorShareApiProductMonitoringStatusOnDomain.  # noqa: E501
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this ComPatagonaPricemonitorShareApiProductMonitoringStatusOnDomain.

        The domain which gets monitored.  # noqa: E501

        :param domain: The domain of this ComPatagonaPricemonitorShareApiProductMonitoringStatusOnDomain.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and domain is None:  # noqa: E501
            raise ValueError("Invalid value for `domain`, must not be `None`")  # noqa: E501

        self._domain = domain

    @property
    def started_at(self):
        """Gets the started_at of this ComPatagonaPricemonitorShareApiProductMonitoringStatusOnDomain.  # noqa: E501

        The last time pricemonitor tried to monitor the product on the given domain. If this doesn't exist it mean's that pricemonitor haven't tried to monitor this product on the domain yet. One reason could be that the product is very new or the domain has just recently been added to the contract.  # noqa: E501

        :return: The started_at of this ComPatagonaPricemonitorShareApiProductMonitoringStatusOnDomain.  # noqa: E501
        :rtype: datetime
        """
        return self._started_at

    @started_at.setter
    def started_at(self, started_at):
        """Sets the started_at of this ComPatagonaPricemonitorShareApiProductMonitoringStatusOnDomain.

        The last time pricemonitor tried to monitor the product on the given domain. If this doesn't exist it mean's that pricemonitor haven't tried to monitor this product on the domain yet. One reason could be that the product is very new or the domain has just recently been added to the contract.  # noqa: E501

        :param started_at: The started_at of this ComPatagonaPricemonitorShareApiProductMonitoringStatusOnDomain.  # noqa: E501
        :type: datetime
        """

        self._started_at = started_at

    @property
    def completed_at(self):
        """Gets the completed_at of this ComPatagonaPricemonitorShareApiProductMonitoringStatusOnDomain.  # noqa: E501

        The last time pricemonitor completed monitoring the product on the given domain.  # noqa: E501

        :return: The completed_at of this ComPatagonaPricemonitorShareApiProductMonitoringStatusOnDomain.  # noqa: E501
        :rtype: datetime
        """
        return self._completed_at

    @completed_at.setter
    def completed_at(self, completed_at):
        """Sets the completed_at of this ComPatagonaPricemonitorShareApiProductMonitoringStatusOnDomain.

        The last time pricemonitor completed monitoring the product on the given domain.  # noqa: E501

        :param completed_at: The completed_at of this ComPatagonaPricemonitorShareApiProductMonitoringStatusOnDomain.  # noqa: E501
        :type: datetime
        """

        self._completed_at = completed_at

    @property
    def outcome(self):
        """Gets the outcome of this ComPatagonaPricemonitorShareApiProductMonitoringStatusOnDomain.  # noqa: E501


        :return: The outcome of this ComPatagonaPricemonitorShareApiProductMonitoringStatusOnDomain.  # noqa: E501
        :rtype: ComPatagonaPricemonitorShareApiProductMonitoringStatusOnDomainOutcome
        """
        return self._outcome

    @outcome.setter
    def outcome(self, outcome):
        """Sets the outcome of this ComPatagonaPricemonitorShareApiProductMonitoringStatusOnDomain.


        :param outcome: The outcome of this ComPatagonaPricemonitorShareApiProductMonitoringStatusOnDomain.  # noqa: E501
        :type: ComPatagonaPricemonitorShareApiProductMonitoringStatusOnDomainOutcome
        """

        self._outcome = outcome

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ComPatagonaPricemonitorShareApiProductMonitoringStatusOnDomain):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ComPatagonaPricemonitorShareApiProductMonitoringStatusOnDomain):
            return True

        return self.to_dict() != other.to_dict()
