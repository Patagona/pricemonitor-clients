# coding: utf-8

"""
    Omnia 2.0 API The Omnia 2.0 API is RESTful and provides access to the backend of Omnia 2.0 and Pricemonitor. It is used to manage products, offers, contracts and more.

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.0.6837
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from pricemonitor_api_client.configuration import Configuration


class GetPriceRecommendationsResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'next': 'str',
        'price_recommendations': 'list[GetPriceRecommendationsResponsePriceRecommendations]'
    }

    attribute_map = {
        'next': 'next',
        'price_recommendations': 'priceRecommendations'
    }

    def __init__(self, next=None, price_recommendations=None, local_vars_configuration=None):  # noqa: E501
        """GetPriceRecommendationsResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._next = None
        self._price_recommendations = None
        self.discriminator = None

        if next is not None:
            self.next = next
        if price_recommendations is not None:
            self.price_recommendations = price_recommendations

    @property
    def next(self):
        """Gets the next of this GetPriceRecommendationsResponse.  # noqa: E501


        :return: The next of this GetPriceRecommendationsResponse.  # noqa: E501
        :rtype: str
        """
        return self._next

    @next.setter
    def next(self, next):
        """Sets the next of this GetPriceRecommendationsResponse.


        :param next: The next of this GetPriceRecommendationsResponse.  # noqa: E501
        :type: str
        """

        self._next = next

    @property
    def price_recommendations(self):
        """Gets the price_recommendations of this GetPriceRecommendationsResponse.  # noqa: E501


        :return: The price_recommendations of this GetPriceRecommendationsResponse.  # noqa: E501
        :rtype: list[GetPriceRecommendationsResponsePriceRecommendations]
        """
        return self._price_recommendations

    @price_recommendations.setter
    def price_recommendations(self, price_recommendations):
        """Sets the price_recommendations of this GetPriceRecommendationsResponse.


        :param price_recommendations: The price_recommendations of this GetPriceRecommendationsResponse.  # noqa: E501
        :type: list[GetPriceRecommendationsResponsePriceRecommendations]
        """

        self._price_recommendations = price_recommendations

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetPriceRecommendationsResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GetPriceRecommendationsResponse):
            return True

        return self.to_dict() != other.to_dict()
