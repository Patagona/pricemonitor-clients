# coding: utf-8

"""
    Omnia 2.0 API The Omnia 2.0 API is RESTful and provides access to the backend of Omnia 2.0 and Pricemonitor. It is used to manage products, offers, contracts and more.

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.0.6841
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from pricemonitor_api_client.configuration import Configuration


class ComPatagonaPricemonitorShareApiPostProductOfferRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'product_id': 'str',
        'creation_date': 'datetime',
        'domain': 'str',
        'offers': 'list[ComPatagonaPricemonitorShareApiApiOfferV2]'
    }

    attribute_map = {
        'product_id': 'productId',
        'creation_date': 'creationDate',
        'domain': 'domain',
        'offers': 'offers'
    }

    def __init__(self, product_id=None, creation_date=None, domain=None, offers=None, local_vars_configuration=None):  # noqa: E501
        """ComPatagonaPricemonitorShareApiPostProductOfferRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._product_id = None
        self._creation_date = None
        self._domain = None
        self._offers = None
        self.discriminator = None

        self.product_id = product_id
        self.creation_date = creation_date
        self.domain = domain
        self.offers = offers

    @property
    def product_id(self):
        """Gets the product_id of this ComPatagonaPricemonitorShareApiPostProductOfferRequest.  # noqa: E501

        Patagona's internal product id.  # noqa: E501

        :return: The product_id of this ComPatagonaPricemonitorShareApiPostProductOfferRequest.  # noqa: E501
        :rtype: str
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """Sets the product_id of this ComPatagonaPricemonitorShareApiPostProductOfferRequest.

        Patagona's internal product id.  # noqa: E501

        :param product_id: The product_id of this ComPatagonaPricemonitorShareApiPostProductOfferRequest.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and product_id is None:  # noqa: E501
            raise ValueError("Invalid value for `product_id`, must not be `None`")  # noqa: E501

        self._product_id = product_id

    @property
    def creation_date(self):
        """Gets the creation_date of this ComPatagonaPricemonitorShareApiPostProductOfferRequest.  # noqa: E501

        ISO 8601 timestamp when the offers have been gathered. This timestamp needs to be more recent compared to already existing offers. Otherwise, the offers will be rejected.  # noqa: E501

        :return: The creation_date of this ComPatagonaPricemonitorShareApiPostProductOfferRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this ComPatagonaPricemonitorShareApiPostProductOfferRequest.

        ISO 8601 timestamp when the offers have been gathered. This timestamp needs to be more recent compared to already existing offers. Otherwise, the offers will be rejected.  # noqa: E501

        :param creation_date: The creation_date of this ComPatagonaPricemonitorShareApiPostProductOfferRequest.  # noqa: E501
        :type: datetime
        """
        if self.local_vars_configuration.client_side_validation and creation_date is None:  # noqa: E501
            raise ValueError("Invalid value for `creation_date`, must not be `None`")  # noqa: E501

        self._creation_date = creation_date

    @property
    def domain(self):
        """Gets the domain of this ComPatagonaPricemonitorShareApiPostProductOfferRequest.  # noqa: E501

        Origin of the offers.  # noqa: E501

        :return: The domain of this ComPatagonaPricemonitorShareApiPostProductOfferRequest.  # noqa: E501
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this ComPatagonaPricemonitorShareApiPostProductOfferRequest.

        Origin of the offers.  # noqa: E501

        :param domain: The domain of this ComPatagonaPricemonitorShareApiPostProductOfferRequest.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and domain is None:  # noqa: E501
            raise ValueError("Invalid value for `domain`, must not be `None`")  # noqa: E501

        self._domain = domain

    @property
    def offers(self):
        """Gets the offers of this ComPatagonaPricemonitorShareApiPostProductOfferRequest.  # noqa: E501

        Non-empty list of offers.  # noqa: E501

        :return: The offers of this ComPatagonaPricemonitorShareApiPostProductOfferRequest.  # noqa: E501
        :rtype: list[ComPatagonaPricemonitorShareApiApiOfferV2]
        """
        return self._offers

    @offers.setter
    def offers(self, offers):
        """Sets the offers of this ComPatagonaPricemonitorShareApiPostProductOfferRequest.

        Non-empty list of offers.  # noqa: E501

        :param offers: The offers of this ComPatagonaPricemonitorShareApiPostProductOfferRequest.  # noqa: E501
        :type: list[ComPatagonaPricemonitorShareApiApiOfferV2]
        """
        if self.local_vars_configuration.client_side_validation and offers is None:  # noqa: E501
            raise ValueError("Invalid value for `offers`, must not be `None`")  # noqa: E501

        self._offers = offers

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ComPatagonaPricemonitorShareApiPostProductOfferRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ComPatagonaPricemonitorShareApiPostProductOfferRequest):
            return True

        return self.to_dict() != other.to_dict()
