# coding: utf-8

"""
    Omnia 2.0 API The Omnia 2.0 API is RESTful and provides access to the backend of Omnia 2.0 and Pricemonitor. It is used to manage products, offers, contracts and more.

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.0.6956
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from pricemonitor_api_client.configuration import Configuration


class ComPatagonaPricemonitorShareApiLookerUserAttributesV3(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'contract_sid': 'str',
        'contract_id': 'float'
    }

    attribute_map = {
        'contract_sid': 'contractSid',
        'contract_id': 'contractId'
    }

    def __init__(self, contract_sid=None, contract_id=None, local_vars_configuration=None):  # noqa: E501
        """ComPatagonaPricemonitorShareApiLookerUserAttributesV3 - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._contract_sid = None
        self._contract_id = None
        self.discriminator = None

        if contract_sid is not None:
            self.contract_sid = contract_sid
        if contract_id is not None:
            self.contract_id = contract_id

    @property
    def contract_sid(self):
        """Gets the contract_sid of this ComPatagonaPricemonitorShareApiLookerUserAttributesV3.  # noqa: E501

        The contract sid of the user according to looker. References the attribute {{contract_sid}} in looker.  # noqa: E501

        :return: The contract_sid of this ComPatagonaPricemonitorShareApiLookerUserAttributesV3.  # noqa: E501
        :rtype: str
        """
        return self._contract_sid

    @contract_sid.setter
    def contract_sid(self, contract_sid):
        """Sets the contract_sid of this ComPatagonaPricemonitorShareApiLookerUserAttributesV3.

        The contract sid of the user according to looker. References the attribute {{contract_sid}} in looker.  # noqa: E501

        :param contract_sid: The contract_sid of this ComPatagonaPricemonitorShareApiLookerUserAttributesV3.  # noqa: E501
        :type: str
        """

        self._contract_sid = contract_sid

    @property
    def contract_id(self):
        """Gets the contract_id of this ComPatagonaPricemonitorShareApiLookerUserAttributesV3.  # noqa: E501

        The contract id of the user according to looker. References the attribute {{contract_id}} in looker.  # noqa: E501

        :return: The contract_id of this ComPatagonaPricemonitorShareApiLookerUserAttributesV3.  # noqa: E501
        :rtype: float
        """
        return self._contract_id

    @contract_id.setter
    def contract_id(self, contract_id):
        """Sets the contract_id of this ComPatagonaPricemonitorShareApiLookerUserAttributesV3.

        The contract id of the user according to looker. References the attribute {{contract_id}} in looker.  # noqa: E501

        :param contract_id: The contract_id of this ComPatagonaPricemonitorShareApiLookerUserAttributesV3.  # noqa: E501
        :type: float
        """

        self._contract_id = contract_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ComPatagonaPricemonitorShareApiLookerUserAttributesV3):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ComPatagonaPricemonitorShareApiLookerUserAttributesV3):
            return True

        return self.to_dict() != other.to_dict()
