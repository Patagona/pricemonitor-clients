# coding: utf-8

"""
    Omnia 2.0 API The Omnia 2.0 API is RESTful and provides access to the backend of Omnia 2.0 and Pricemonitor. It is used to manage products, offers, contracts, and more.  This API supports both public endpoints for customer integration and internal endpoints for platform management. All endpoints are authenticated using either Basic Authentication or JWT Bearer tokens.

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.0.7256
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from pricemonitor_api_client.configuration import Configuration


class LogMessage(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'message': 'str',
        'severity': 'str',
        'component': 'str',
        'source': 'str',
        'contract_id': 'str'
    }

    attribute_map = {
        'message': 'message',
        'severity': 'severity',
        'component': 'component',
        'source': 'source',
        'contract_id': 'contractId'
    }

    def __init__(self, message=None, severity=None, component=None, source=None, contract_id=None, local_vars_configuration=None):  # noqa: E501
        """LogMessage - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._message = None
        self._severity = None
        self._component = None
        self._source = None
        self._contract_id = None
        self.discriminator = None

        self.message = message
        self.severity = severity
        self.component = component
        self.source = source
        if contract_id is not None:
            self.contract_id = contract_id

    @property
    def message(self):
        """Gets the message of this LogMessage.  # noqa: E501

        The actual log message content to be published  # noqa: E501

        :return: The message of this LogMessage.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this LogMessage.

        The actual log message content to be published  # noqa: E501

        :param message: The message of this LogMessage.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and message is None:  # noqa: E501
            raise ValueError("Invalid value for `message`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                message is not None and len(message) > 5000):
            raise ValueError("Invalid value for `message`, length must be less than or equal to `5000`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                message is not None and len(message) < 1):
            raise ValueError("Invalid value for `message`, length must be greater than or equal to `1`")  # noqa: E501

        self._message = message

    @property
    def severity(self):
        """Gets the severity of this LogMessage.  # noqa: E501

        Log message severity level, ordered by priority (highest to lowest):  - **fatal**: Critical errors causing system termination - **error**: Serious errors requiring immediate attention - **warn**: Deprecated APIs, poor API usage, or unexpected situations - **info**: General progress and state information for end users - **debug**: Detailed information for application developers and support - **trace**: Most detailed information for deep debugging   # noqa: E501

        :return: The severity of this LogMessage.  # noqa: E501
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this LogMessage.

        Log message severity level, ordered by priority (highest to lowest):  - **fatal**: Critical errors causing system termination - **error**: Serious errors requiring immediate attention - **warn**: Deprecated APIs, poor API usage, or unexpected situations - **info**: General progress and state information for end users - **debug**: Detailed information for application developers and support - **trace**: Most detailed information for deep debugging   # noqa: E501

        :param severity: The severity of this LogMessage.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and severity is None:  # noqa: E501
            raise ValueError("Invalid value for `severity`, must not be `None`")  # noqa: E501
        allowed_values = ["fatal", "error", "warn", "info", "debug", "trace"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and severity not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `severity` ({0}), must be one of {1}"  # noqa: E501
                .format(severity, allowed_values)
            )

        self._severity = severity

    @property
    def component(self):
        """Gets the component of this LogMessage.  # noqa: E501

        Name of the integrated system or application component generating the log  # noqa: E501

        :return: The component of this LogMessage.  # noqa: E501
        :rtype: str
        """
        return self._component

    @component.setter
    def component(self, component):
        """Sets the component of this LogMessage.

        Name of the integrated system or application component generating the log  # noqa: E501

        :param component: The component of this LogMessage.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and component is None:  # noqa: E501
            raise ValueError("Invalid value for `component`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                component is not None and len(component) > 100):
            raise ValueError("Invalid value for `component`, length must be less than or equal to `100`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                component is not None and len(component) < 1):
            raise ValueError("Invalid value for `component`, length must be greater than or equal to `1`")  # noqa: E501

        self._component = component

    @property
    def source(self):
        """Gets the source of this LogMessage.  # noqa: E501

        Specific entity or source within the component for additional categorization  # noqa: E501

        :return: The source of this LogMessage.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this LogMessage.

        Specific entity or source within the component for additional categorization  # noqa: E501

        :param source: The source of this LogMessage.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and source is None:  # noqa: E501
            raise ValueError("Invalid value for `source`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                source is not None and len(source) > 255):
            raise ValueError("Invalid value for `source`, length must be less than or equal to `255`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                source is not None and len(source) < 1):
            raise ValueError("Invalid value for `source`, length must be greater than or equal to `1`")  # noqa: E501

        self._source = source

    @property
    def contract_id(self):
        """Gets the contract_id of this LogMessage.  # noqa: E501

        The contract identifier associated with this log message  # noqa: E501

        :return: The contract_id of this LogMessage.  # noqa: E501
        :rtype: str
        """
        return self._contract_id

    @contract_id.setter
    def contract_id(self, contract_id):
        """Sets the contract_id of this LogMessage.

        The contract identifier associated with this log message  # noqa: E501

        :param contract_id: The contract_id of this LogMessage.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                contract_id is not None and len(contract_id) < 1):
            raise ValueError("Invalid value for `contract_id`, length must be greater than or equal to `1`")  # noqa: E501

        self._contract_id = contract_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LogMessage):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, LogMessage):
            return True

        return self.to_dict() != other.to_dict()
