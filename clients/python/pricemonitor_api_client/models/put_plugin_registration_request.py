# coding: utf-8

"""
    Pricemonitor API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.0.5838
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from pricemonitor_api_client.configuration import Configuration


class PutPluginRegistrationRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'plugin_id': 'str',
        'shop_system': 'str',
        'metrics_url': 'str',
        'version': 'str'
    }

    attribute_map = {
        'plugin_id': 'pluginId',
        'shop_system': 'shopSystem',
        'metrics_url': 'metricsUrl',
        'version': 'version'
    }

    def __init__(self, plugin_id=None, shop_system=None, metrics_url=None, version=None, local_vars_configuration=None):  # noqa: E501
        """PutPluginRegistrationRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._plugin_id = None
        self._shop_system = None
        self._metrics_url = None
        self._version = None
        self.discriminator = None

        if plugin_id is not None:
            self.plugin_id = plugin_id
        if shop_system is not None:
            self.shop_system = shop_system
        if metrics_url is not None:
            self.metrics_url = metrics_url
        if version is not None:
            self.version = version

    @property
    def plugin_id(self):
        """Gets the plugin_id of this PutPluginRegistrationRequest.  # noqa: E501


        :return: The plugin_id of this PutPluginRegistrationRequest.  # noqa: E501
        :rtype: str
        """
        return self._plugin_id

    @plugin_id.setter
    def plugin_id(self, plugin_id):
        """Sets the plugin_id of this PutPluginRegistrationRequest.


        :param plugin_id: The plugin_id of this PutPluginRegistrationRequest.  # noqa: E501
        :type: str
        """

        self._plugin_id = plugin_id

    @property
    def shop_system(self):
        """Gets the shop_system of this PutPluginRegistrationRequest.  # noqa: E501


        :return: The shop_system of this PutPluginRegistrationRequest.  # noqa: E501
        :rtype: str
        """
        return self._shop_system

    @shop_system.setter
    def shop_system(self, shop_system):
        """Sets the shop_system of this PutPluginRegistrationRequest.


        :param shop_system: The shop_system of this PutPluginRegistrationRequest.  # noqa: E501
        :type: str
        """

        self._shop_system = shop_system

    @property
    def metrics_url(self):
        """Gets the metrics_url of this PutPluginRegistrationRequest.  # noqa: E501


        :return: The metrics_url of this PutPluginRegistrationRequest.  # noqa: E501
        :rtype: str
        """
        return self._metrics_url

    @metrics_url.setter
    def metrics_url(self, metrics_url):
        """Sets the metrics_url of this PutPluginRegistrationRequest.


        :param metrics_url: The metrics_url of this PutPluginRegistrationRequest.  # noqa: E501
        :type: str
        """

        self._metrics_url = metrics_url

    @property
    def version(self):
        """Gets the version of this PutPluginRegistrationRequest.  # noqa: E501


        :return: The version of this PutPluginRegistrationRequest.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this PutPluginRegistrationRequest.


        :param version: The version of this PutPluginRegistrationRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["1"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and version not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `version` ({0}), must be one of {1}"  # noqa: E501
                .format(version, allowed_values)
            )

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PutPluginRegistrationRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PutPluginRegistrationRequest):
            return True

        return self.to_dict() != other.to_dict()
