# coding: utf-8

"""
    Omnia 2.0 API The Omnia 2.0 API is RESTful and provides access to the backend of Omnia 2.0 and Pricemonitor. It is used to manage products, offers, contracts and more.

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.0.6829
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from pricemonitor_api_client.configuration import Configuration


class ComPatagonaPricemonitorShareApiApiProduct(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'tags': 'list[ComPatagonaPricemonitorShareApiTag]',
        'min_price_boundary': 'float',
        'gtin': 'float',
        'customer_product_id': 'str',
        'id': 'str',
        'max_price_boundary': 'float',
        'reference_price': 'float'
    }

    attribute_map = {
        'name': 'name',
        'tags': 'tags',
        'min_price_boundary': 'minPriceBoundary',
        'gtin': 'gtin',
        'customer_product_id': 'customerProductId',
        'id': 'id',
        'max_price_boundary': 'maxPriceBoundary',
        'reference_price': 'referencePrice'
    }

    def __init__(self, name=None, tags=None, min_price_boundary=None, gtin=None, customer_product_id=None, id=None, max_price_boundary=None, reference_price=None, local_vars_configuration=None):  # noqa: E501
        """ComPatagonaPricemonitorShareApiApiProduct - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._tags = None
        self._min_price_boundary = None
        self._gtin = None
        self._customer_product_id = None
        self._id = None
        self._max_price_boundary = None
        self._reference_price = None
        self.discriminator = None

        self.name = name
        self.tags = tags
        if min_price_boundary is not None:
            self.min_price_boundary = min_price_boundary
        if gtin is not None:
            self.gtin = gtin
        if customer_product_id is not None:
            self.customer_product_id = customer_product_id
        self.id = id
        if max_price_boundary is not None:
            self.max_price_boundary = max_price_boundary
        self.reference_price = reference_price

    @property
    def name(self):
        """Gets the name of this ComPatagonaPricemonitorShareApiApiProduct.  # noqa: E501

        Name of the product.  # noqa: E501

        :return: The name of this ComPatagonaPricemonitorShareApiApiProduct.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ComPatagonaPricemonitorShareApiApiProduct.

        Name of the product.  # noqa: E501

        :param name: The name of this ComPatagonaPricemonitorShareApiApiProduct.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def tags(self):
        """Gets the tags of this ComPatagonaPricemonitorShareApiApiProduct.  # noqa: E501

        Additional information on this product.  # noqa: E501

        :return: The tags of this ComPatagonaPricemonitorShareApiApiProduct.  # noqa: E501
        :rtype: list[ComPatagonaPricemonitorShareApiTag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this ComPatagonaPricemonitorShareApiApiProduct.

        Additional information on this product.  # noqa: E501

        :param tags: The tags of this ComPatagonaPricemonitorShareApiApiProduct.  # noqa: E501
        :type: list[ComPatagonaPricemonitorShareApiTag]
        """
        if self.local_vars_configuration.client_side_validation and tags is None:  # noqa: E501
            raise ValueError("Invalid value for `tags`, must not be `None`")  # noqa: E501

        self._tags = tags

    @property
    def min_price_boundary(self):
        """Gets the min_price_boundary of this ComPatagonaPricemonitorShareApiApiProduct.  # noqa: E501

        Maximum price which pricemonitor can recommend for the product. It won't recommend any price above this boundary.  # noqa: E501

        :return: The min_price_boundary of this ComPatagonaPricemonitorShareApiApiProduct.  # noqa: E501
        :rtype: float
        """
        return self._min_price_boundary

    @min_price_boundary.setter
    def min_price_boundary(self, min_price_boundary):
        """Sets the min_price_boundary of this ComPatagonaPricemonitorShareApiApiProduct.

        Maximum price which pricemonitor can recommend for the product. It won't recommend any price above this boundary.  # noqa: E501

        :param min_price_boundary: The min_price_boundary of this ComPatagonaPricemonitorShareApiApiProduct.  # noqa: E501
        :type: float
        """

        self._min_price_boundary = min_price_boundary

    @property
    def gtin(self):
        """Gets the gtin of this ComPatagonaPricemonitorShareApiApiProduct.  # noqa: E501

        GTIN of the product. Can be optionally.  # noqa: E501

        :return: The gtin of this ComPatagonaPricemonitorShareApiApiProduct.  # noqa: E501
        :rtype: float
        """
        return self._gtin

    @gtin.setter
    def gtin(self, gtin):
        """Sets the gtin of this ComPatagonaPricemonitorShareApiApiProduct.

        GTIN of the product. Can be optionally.  # noqa: E501

        :param gtin: The gtin of this ComPatagonaPricemonitorShareApiApiProduct.  # noqa: E501
        :type: float
        """

        self._gtin = gtin

    @property
    def customer_product_id(self):
        """Gets the customer_product_id of this ComPatagonaPricemonitorShareApiApiProduct.  # noqa: E501

        The customer's id of the product. This field allows to link products in pricemonitor to products in the customer's system.  # noqa: E501

        :return: The customer_product_id of this ComPatagonaPricemonitorShareApiApiProduct.  # noqa: E501
        :rtype: str
        """
        return self._customer_product_id

    @customer_product_id.setter
    def customer_product_id(self, customer_product_id):
        """Sets the customer_product_id of this ComPatagonaPricemonitorShareApiApiProduct.

        The customer's id of the product. This field allows to link products in pricemonitor to products in the customer's system.  # noqa: E501

        :param customer_product_id: The customer_product_id of this ComPatagonaPricemonitorShareApiApiProduct.  # noqa: E501
        :type: str
        """

        self._customer_product_id = customer_product_id

    @property
    def id(self):
        """Gets the id of this ComPatagonaPricemonitorShareApiApiProduct.  # noqa: E501

        Id of the product in the pricemonitor.  # noqa: E501

        :return: The id of this ComPatagonaPricemonitorShareApiApiProduct.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ComPatagonaPricemonitorShareApiApiProduct.

        Id of the product in the pricemonitor.  # noqa: E501

        :param id: The id of this ComPatagonaPricemonitorShareApiApiProduct.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def max_price_boundary(self):
        """Gets the max_price_boundary of this ComPatagonaPricemonitorShareApiApiProduct.  # noqa: E501

        Minimum price which pricemonitor can recommend for the product. It won't recommend any price below this boundary.  # noqa: E501

        :return: The max_price_boundary of this ComPatagonaPricemonitorShareApiApiProduct.  # noqa: E501
        :rtype: float
        """
        return self._max_price_boundary

    @max_price_boundary.setter
    def max_price_boundary(self, max_price_boundary):
        """Sets the max_price_boundary of this ComPatagonaPricemonitorShareApiApiProduct.

        Minimum price which pricemonitor can recommend for the product. It won't recommend any price below this boundary.  # noqa: E501

        :param max_price_boundary: The max_price_boundary of this ComPatagonaPricemonitorShareApiApiProduct.  # noqa: E501
        :type: float
        """

        self._max_price_boundary = max_price_boundary

    @property
    def reference_price(self):
        """Gets the reference_price of this ComPatagonaPricemonitorShareApiApiProduct.  # noqa: E501

        Some price that will be used as benchmark for certain components in pricemonitor.  # noqa: E501

        :return: The reference_price of this ComPatagonaPricemonitorShareApiApiProduct.  # noqa: E501
        :rtype: float
        """
        return self._reference_price

    @reference_price.setter
    def reference_price(self, reference_price):
        """Sets the reference_price of this ComPatagonaPricemonitorShareApiApiProduct.

        Some price that will be used as benchmark for certain components in pricemonitor.  # noqa: E501

        :param reference_price: The reference_price of this ComPatagonaPricemonitorShareApiApiProduct.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and reference_price is None:  # noqa: E501
            raise ValueError("Invalid value for `reference_price`, must not be `None`")  # noqa: E501

        self._reference_price = reference_price

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ComPatagonaPricemonitorShareApiApiProduct):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ComPatagonaPricemonitorShareApiApiProduct):
            return True

        return self.to_dict() != other.to_dict()
