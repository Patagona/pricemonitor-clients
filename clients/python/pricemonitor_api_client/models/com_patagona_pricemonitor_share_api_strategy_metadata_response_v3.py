# coding: utf-8

"""
    Pricemonitor API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.0.6588
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from pricemonitor_api_client.configuration import Configuration


class ComPatagonaPricemonitorShareApiStrategyMetadataResponseV3(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'document_version': 'int',
        'document_version_message': 'str',
        'version': 'str',
        'update_date': 'datetime',
        'updated_by': 'str'
    }

    attribute_map = {
        'document_version': 'documentVersion',
        'document_version_message': 'documentVersionMessage',
        'version': 'version',
        'update_date': 'updateDate',
        'updated_by': 'updatedBy'
    }

    def __init__(self, document_version=None, document_version_message=None, version=None, update_date=None, updated_by=None, local_vars_configuration=None):  # noqa: E501
        """ComPatagonaPricemonitorShareApiStrategyMetadataResponseV3 - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._document_version = None
        self._document_version_message = None
        self._version = None
        self._update_date = None
        self._updated_by = None
        self.discriminator = None

        self.document_version = document_version
        if document_version_message is not None:
            self.document_version_message = document_version_message
        self.version = version
        if update_date is not None:
            self.update_date = update_date
        if updated_by is not None:
            self.updated_by = updated_by

    @property
    def document_version(self):
        """Gets the document_version of this ComPatagonaPricemonitorShareApiStrategyMetadataResponseV3.  # noqa: E501

        strategy version per contract  # noqa: E501

        :return: The document_version of this ComPatagonaPricemonitorShareApiStrategyMetadataResponseV3.  # noqa: E501
        :rtype: int
        """
        return self._document_version

    @document_version.setter
    def document_version(self, document_version):
        """Sets the document_version of this ComPatagonaPricemonitorShareApiStrategyMetadataResponseV3.

        strategy version per contract  # noqa: E501

        :param document_version: The document_version of this ComPatagonaPricemonitorShareApiStrategyMetadataResponseV3.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and document_version is None:  # noqa: E501
            raise ValueError("Invalid value for `document_version`, must not be `None`")  # noqa: E501

        self._document_version = document_version

    @property
    def document_version_message(self):
        """Gets the document_version_message of this ComPatagonaPricemonitorShareApiStrategyMetadataResponseV3.  # noqa: E501

        message provided by user when saving new strategy  # noqa: E501

        :return: The document_version_message of this ComPatagonaPricemonitorShareApiStrategyMetadataResponseV3.  # noqa: E501
        :rtype: str
        """
        return self._document_version_message

    @document_version_message.setter
    def document_version_message(self, document_version_message):
        """Sets the document_version_message of this ComPatagonaPricemonitorShareApiStrategyMetadataResponseV3.

        message provided by user when saving new strategy  # noqa: E501

        :param document_version_message: The document_version_message of this ComPatagonaPricemonitorShareApiStrategyMetadataResponseV3.  # noqa: E501
        :type: str
        """

        self._document_version_message = document_version_message

    @property
    def version(self):
        """Gets the version of this ComPatagonaPricemonitorShareApiStrategyMetadataResponseV3.  # noqa: E501

        schema version of the strategy  # noqa: E501

        :return: The version of this ComPatagonaPricemonitorShareApiStrategyMetadataResponseV3.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this ComPatagonaPricemonitorShareApiStrategyMetadataResponseV3.

        schema version of the strategy  # noqa: E501

        :param version: The version of this ComPatagonaPricemonitorShareApiStrategyMetadataResponseV3.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and version is None:  # noqa: E501
            raise ValueError("Invalid value for `version`, must not be `None`")  # noqa: E501

        self._version = version

    @property
    def update_date(self):
        """Gets the update_date of this ComPatagonaPricemonitorShareApiStrategyMetadataResponseV3.  # noqa: E501

        timestamp of last strategy update. It needs to be an option to ensure old strategies can be read.  # noqa: E501

        :return: The update_date of this ComPatagonaPricemonitorShareApiStrategyMetadataResponseV3.  # noqa: E501
        :rtype: datetime
        """
        return self._update_date

    @update_date.setter
    def update_date(self, update_date):
        """Sets the update_date of this ComPatagonaPricemonitorShareApiStrategyMetadataResponseV3.

        timestamp of last strategy update. It needs to be an option to ensure old strategies can be read.  # noqa: E501

        :param update_date: The update_date of this ComPatagonaPricemonitorShareApiStrategyMetadataResponseV3.  # noqa: E501
        :type: datetime
        """

        self._update_date = update_date

    @property
    def updated_by(self):
        """Gets the updated_by of this ComPatagonaPricemonitorShareApiStrategyMetadataResponseV3.  # noqa: E501

        user email of the account that updated the strategy. It needs to be an option to ensure old strategies can be read.  # noqa: E501

        :return: The updated_by of this ComPatagonaPricemonitorShareApiStrategyMetadataResponseV3.  # noqa: E501
        :rtype: str
        """
        return self._updated_by

    @updated_by.setter
    def updated_by(self, updated_by):
        """Sets the updated_by of this ComPatagonaPricemonitorShareApiStrategyMetadataResponseV3.

        user email of the account that updated the strategy. It needs to be an option to ensure old strategies can be read.  # noqa: E501

        :param updated_by: The updated_by of this ComPatagonaPricemonitorShareApiStrategyMetadataResponseV3.  # noqa: E501
        :type: str
        """

        self._updated_by = updated_by

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ComPatagonaPricemonitorShareApiStrategyMetadataResponseV3):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ComPatagonaPricemonitorShareApiStrategyMetadataResponseV3):
            return True

        return self.to_dict() != other.to_dict()
