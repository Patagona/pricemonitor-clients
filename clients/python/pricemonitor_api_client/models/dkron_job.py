# coding: utf-8

"""
    Omnia 2.0 API The Omnia 2.0 API is RESTful and provides access to the backend of Omnia 2.0 and Pricemonitor. It is used to manage products, offers, contracts, and more.  This API supports both public endpoints for customer integration and internal endpoints for platform management. All endpoints are authenticated using either Basic Authentication or JWT Bearer tokens.

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.0.7277
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from pricemonitor_api_client.configuration import Configuration


class DkronJob(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'schedule': 'str',
        'timezone': 'str',
        'owner': 'str',
        'owner_email': 'str',
        'success_count': 'int',
        'error_count': 'int',
        'last_success': 'datetime',
        'last_error': 'datetime',
        'disabled': 'bool',
        'tags': 'dict(str, str)',
        'retries': 'int',
        'parent_job': 'str',
        'dependent_jobs': 'list[str]',
        'processors': 'object',
        'concurrency': 'str',
        'executor': 'str',
        'executor_config': 'DkronExecutorConfig',
        'status': 'str'
    }

    attribute_map = {
        'name': 'name',
        'schedule': 'schedule',
        'timezone': 'timezone',
        'owner': 'owner',
        'owner_email': 'owner_email',
        'success_count': 'success_count',
        'error_count': 'error_count',
        'last_success': 'last_success',
        'last_error': 'last_error',
        'disabled': 'disabled',
        'tags': 'tags',
        'retries': 'retries',
        'parent_job': 'parent_job',
        'dependent_jobs': 'dependent_jobs',
        'processors': 'processors',
        'concurrency': 'concurrency',
        'executor': 'executor',
        'executor_config': 'executor_config',
        'status': 'status'
    }

    def __init__(self, name=None, schedule=None, timezone=None, owner=None, owner_email=None, success_count=None, error_count=None, last_success=None, last_error=None, disabled=None, tags=None, retries=None, parent_job=None, dependent_jobs=None, processors=None, concurrency=None, executor=None, executor_config=None, status=None, local_vars_configuration=None):  # noqa: E501
        """DkronJob - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._schedule = None
        self._timezone = None
        self._owner = None
        self._owner_email = None
        self._success_count = None
        self._error_count = None
        self._last_success = None
        self._last_error = None
        self._disabled = None
        self._tags = None
        self._retries = None
        self._parent_job = None
        self._dependent_jobs = None
        self._processors = None
        self._concurrency = None
        self._executor = None
        self._executor_config = None
        self._status = None
        self.discriminator = None

        self.name = name
        self.schedule = schedule
        if timezone is not None:
            self.timezone = timezone
        if owner is not None:
            self.owner = owner
        if owner_email is not None:
            self.owner_email = owner_email
        if success_count is not None:
            self.success_count = success_count
        if error_count is not None:
            self.error_count = error_count
        if last_success is not None:
            self.last_success = last_success
        if last_error is not None:
            self.last_error = last_error
        if disabled is not None:
            self.disabled = disabled
        if tags is not None:
            self.tags = tags
        if retries is not None:
            self.retries = retries
        if parent_job is not None:
            self.parent_job = parent_job
        if dependent_jobs is not None:
            self.dependent_jobs = dependent_jobs
        if processors is not None:
            self.processors = processors
        if concurrency is not None:
            self.concurrency = concurrency
        if executor is not None:
            self.executor = executor
        if executor_config is not None:
            self.executor_config = executor_config
        if status is not None:
            self.status = status

    @property
    def name(self):
        """Gets the name of this DkronJob.  # noqa: E501

        Name for the job.  # noqa: E501

        :return: The name of this DkronJob.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DkronJob.

        Name for the job.  # noqa: E501

        :param name: The name of this DkronJob.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def schedule(self):
        """Gets the schedule of this DkronJob.  # noqa: E501

        Cron expression for the job.  # noqa: E501

        :return: The schedule of this DkronJob.  # noqa: E501
        :rtype: str
        """
        return self._schedule

    @schedule.setter
    def schedule(self, schedule):
        """Sets the schedule of this DkronJob.

        Cron expression for the job.  # noqa: E501

        :param schedule: The schedule of this DkronJob.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and schedule is None:  # noqa: E501
            raise ValueError("Invalid value for `schedule`, must not be `None`")  # noqa: E501

        self._schedule = schedule

    @property
    def timezone(self):
        """Gets the timezone of this DkronJob.  # noqa: E501

        Timezone where the job will be executed. By default and when field is set to empty string, the job will run in local time.  # noqa: E501

        :return: The timezone of this DkronJob.  # noqa: E501
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this DkronJob.

        Timezone where the job will be executed. By default and when field is set to empty string, the job will run in local time.  # noqa: E501

        :param timezone: The timezone of this DkronJob.  # noqa: E501
        :type: str
        """

        self._timezone = timezone

    @property
    def owner(self):
        """Gets the owner of this DkronJob.  # noqa: E501

        Owner of the job  # noqa: E501

        :return: The owner of this DkronJob.  # noqa: E501
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this DkronJob.

        Owner of the job  # noqa: E501

        :param owner: The owner of this DkronJob.  # noqa: E501
        :type: str
        """

        self._owner = owner

    @property
    def owner_email(self):
        """Gets the owner_email of this DkronJob.  # noqa: E501

        Email of the owner  # noqa: E501

        :return: The owner_email of this DkronJob.  # noqa: E501
        :rtype: str
        """
        return self._owner_email

    @owner_email.setter
    def owner_email(self, owner_email):
        """Sets the owner_email of this DkronJob.

        Email of the owner  # noqa: E501

        :param owner_email: The owner_email of this DkronJob.  # noqa: E501
        :type: str
        """

        self._owner_email = owner_email

    @property
    def success_count(self):
        """Gets the success_count of this DkronJob.  # noqa: E501

        Number of successful executions  # noqa: E501

        :return: The success_count of this DkronJob.  # noqa: E501
        :rtype: int
        """
        return self._success_count

    @success_count.setter
    def success_count(self, success_count):
        """Sets the success_count of this DkronJob.

        Number of successful executions  # noqa: E501

        :param success_count: The success_count of this DkronJob.  # noqa: E501
        :type: int
        """

        self._success_count = success_count

    @property
    def error_count(self):
        """Gets the error_count of this DkronJob.  # noqa: E501

        Number of failed executions  # noqa: E501

        :return: The error_count of this DkronJob.  # noqa: E501
        :rtype: int
        """
        return self._error_count

    @error_count.setter
    def error_count(self, error_count):
        """Sets the error_count of this DkronJob.

        Number of failed executions  # noqa: E501

        :param error_count: The error_count of this DkronJob.  # noqa: E501
        :type: int
        """

        self._error_count = error_count

    @property
    def last_success(self):
        """Gets the last_success of this DkronJob.  # noqa: E501

        Last time this job executed successfully  # noqa: E501

        :return: The last_success of this DkronJob.  # noqa: E501
        :rtype: datetime
        """
        return self._last_success

    @last_success.setter
    def last_success(self, last_success):
        """Sets the last_success of this DkronJob.

        Last time this job executed successfully  # noqa: E501

        :param last_success: The last_success of this DkronJob.  # noqa: E501
        :type: datetime
        """

        self._last_success = last_success

    @property
    def last_error(self):
        """Gets the last_error of this DkronJob.  # noqa: E501

        Last time this job failed  # noqa: E501

        :return: The last_error of this DkronJob.  # noqa: E501
        :rtype: datetime
        """
        return self._last_error

    @last_error.setter
    def last_error(self, last_error):
        """Sets the last_error of this DkronJob.

        Last time this job failed  # noqa: E501

        :param last_error: The last_error of this DkronJob.  # noqa: E501
        :type: datetime
        """

        self._last_error = last_error

    @property
    def disabled(self):
        """Gets the disabled of this DkronJob.  # noqa: E501

        Disabled state of the job  # noqa: E501

        :return: The disabled of this DkronJob.  # noqa: E501
        :rtype: bool
        """
        return self._disabled

    @disabled.setter
    def disabled(self, disabled):
        """Sets the disabled of this DkronJob.

        Disabled state of the job  # noqa: E501

        :param disabled: The disabled of this DkronJob.  # noqa: E501
        :type: bool
        """

        self._disabled = disabled

    @property
    def tags(self):
        """Gets the tags of this DkronJob.  # noqa: E501

        Target nodes tags of this job  # noqa: E501

        :return: The tags of this DkronJob.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this DkronJob.

        Target nodes tags of this job  # noqa: E501

        :param tags: The tags of this DkronJob.  # noqa: E501
        :type: dict(str, str)
        """

        self._tags = tags

    @property
    def retries(self):
        """Gets the retries of this DkronJob.  # noqa: E501

        Number of times to retry a failed job execution  # noqa: E501

        :return: The retries of this DkronJob.  # noqa: E501
        :rtype: int
        """
        return self._retries

    @retries.setter
    def retries(self, retries):
        """Sets the retries of this DkronJob.

        Number of times to retry a failed job execution  # noqa: E501

        :param retries: The retries of this DkronJob.  # noqa: E501
        :type: int
        """

        self._retries = retries

    @property
    def parent_job(self):
        """Gets the parent_job of this DkronJob.  # noqa: E501

        The name/id of the job that will trigger the execution of this job  # noqa: E501

        :return: The parent_job of this DkronJob.  # noqa: E501
        :rtype: str
        """
        return self._parent_job

    @parent_job.setter
    def parent_job(self, parent_job):
        """Sets the parent_job of this DkronJob.

        The name/id of the job that will trigger the execution of this job  # noqa: E501

        :param parent_job: The parent_job of this DkronJob.  # noqa: E501
        :type: str
        """

        self._parent_job = parent_job

    @property
    def dependent_jobs(self):
        """Gets the dependent_jobs of this DkronJob.  # noqa: E501

        Array containing the jobs that depends on this one  # noqa: E501

        :return: The dependent_jobs of this DkronJob.  # noqa: E501
        :rtype: list[str]
        """
        return self._dependent_jobs

    @dependent_jobs.setter
    def dependent_jobs(self, dependent_jobs):
        """Sets the dependent_jobs of this DkronJob.

        Array containing the jobs that depends on this one  # noqa: E501

        :param dependent_jobs: The dependent_jobs of this DkronJob.  # noqa: E501
        :type: list[str]
        """

        self._dependent_jobs = dependent_jobs

    @property
    def processors(self):
        """Gets the processors of this DkronJob.  # noqa: E501


        :return: The processors of this DkronJob.  # noqa: E501
        :rtype: object
        """
        return self._processors

    @processors.setter
    def processors(self, processors):
        """Sets the processors of this DkronJob.


        :param processors: The processors of this DkronJob.  # noqa: E501
        :type: object
        """

        self._processors = processors

    @property
    def concurrency(self):
        """Gets the concurrency of this DkronJob.  # noqa: E501

        Concurrency policy for the job allow/forbid  # noqa: E501

        :return: The concurrency of this DkronJob.  # noqa: E501
        :rtype: str
        """
        return self._concurrency

    @concurrency.setter
    def concurrency(self, concurrency):
        """Sets the concurrency of this DkronJob.

        Concurrency policy for the job allow/forbid  # noqa: E501

        :param concurrency: The concurrency of this DkronJob.  # noqa: E501
        :type: str
        """

        self._concurrency = concurrency

    @property
    def executor(self):
        """Gets the executor of this DkronJob.  # noqa: E501

        Executor plugin used to run the job  # noqa: E501

        :return: The executor of this DkronJob.  # noqa: E501
        :rtype: str
        """
        return self._executor

    @executor.setter
    def executor(self, executor):
        """Sets the executor of this DkronJob.

        Executor plugin used to run the job  # noqa: E501

        :param executor: The executor of this DkronJob.  # noqa: E501
        :type: str
        """

        self._executor = executor

    @property
    def executor_config(self):
        """Gets the executor_config of this DkronJob.  # noqa: E501


        :return: The executor_config of this DkronJob.  # noqa: E501
        :rtype: DkronExecutorConfig
        """
        return self._executor_config

    @executor_config.setter
    def executor_config(self, executor_config):
        """Sets the executor_config of this DkronJob.


        :param executor_config: The executor_config of this DkronJob.  # noqa: E501
        :type: DkronExecutorConfig
        """

        self._executor_config = executor_config

    @property
    def status(self):
        """Gets the status of this DkronJob.  # noqa: E501

        Status of the job  # noqa: E501

        :return: The status of this DkronJob.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this DkronJob.

        Status of the job  # noqa: E501

        :param status: The status of this DkronJob.  # noqa: E501
        :type: str
        """

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DkronJob):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DkronJob):
            return True

        return self.to_dict() != other.to_dict()
