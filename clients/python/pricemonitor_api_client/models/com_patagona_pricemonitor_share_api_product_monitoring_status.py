# coding: utf-8

"""
    Omnia 2.0 API The Omnia 2.0 API is RESTful and provides access to the backend of Omnia 2.0 and Pricemonitor. It is used to manage products, offers, contracts and more.

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.0.7001
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from pricemonitor_api_client.configuration import Configuration


class ComPatagonaPricemonitorShareApiProductMonitoringStatus(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'product_id': 'float',
        'status_on_domain': 'list[ComPatagonaPricemonitorShareApiProductMonitoringStatusOnDomain]'
    }

    attribute_map = {
        'product_id': 'productId',
        'status_on_domain': 'statusOnDomain'
    }

    def __init__(self, product_id=None, status_on_domain=None, local_vars_configuration=None):  # noqa: E501
        """ComPatagonaPricemonitorShareApiProductMonitoringStatus - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._product_id = None
        self._status_on_domain = None
        self.discriminator = None

        self.product_id = product_id
        self.status_on_domain = status_on_domain

    @property
    def product_id(self):
        """Gets the product_id of this ComPatagonaPricemonitorShareApiProductMonitoringStatus.  # noqa: E501

        The product that gets monitored  # noqa: E501

        :return: The product_id of this ComPatagonaPricemonitorShareApiProductMonitoringStatus.  # noqa: E501
        :rtype: float
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """Sets the product_id of this ComPatagonaPricemonitorShareApiProductMonitoringStatus.

        The product that gets monitored  # noqa: E501

        :param product_id: The product_id of this ComPatagonaPricemonitorShareApiProductMonitoringStatus.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and product_id is None:  # noqa: E501
            raise ValueError("Invalid value for `product_id`, must not be `None`")  # noqa: E501

        self._product_id = product_id

    @property
    def status_on_domain(self):
        """Gets the status_on_domain of this ComPatagonaPricemonitorShareApiProductMonitoringStatus.  # noqa: E501

        The monitoring status on each domain. It will contain an entry for each domain which is active for that contract.  # noqa: E501

        :return: The status_on_domain of this ComPatagonaPricemonitorShareApiProductMonitoringStatus.  # noqa: E501
        :rtype: list[ComPatagonaPricemonitorShareApiProductMonitoringStatusOnDomain]
        """
        return self._status_on_domain

    @status_on_domain.setter
    def status_on_domain(self, status_on_domain):
        """Sets the status_on_domain of this ComPatagonaPricemonitorShareApiProductMonitoringStatus.

        The monitoring status on each domain. It will contain an entry for each domain which is active for that contract.  # noqa: E501

        :param status_on_domain: The status_on_domain of this ComPatagonaPricemonitorShareApiProductMonitoringStatus.  # noqa: E501
        :type: list[ComPatagonaPricemonitorShareApiProductMonitoringStatusOnDomain]
        """
        if self.local_vars_configuration.client_side_validation and status_on_domain is None:  # noqa: E501
            raise ValueError("Invalid value for `status_on_domain`, must not be `None`")  # noqa: E501

        self._status_on_domain = status_on_domain

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ComPatagonaPricemonitorShareApiProductMonitoringStatus):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ComPatagonaPricemonitorShareApiProductMonitoringStatus):
            return True

        return self.to_dict() != other.to_dict()
