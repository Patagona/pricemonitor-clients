# coding: utf-8

"""
    Pricemonitor API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.0.6750
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from pricemonitor_api_client.configuration import Configuration


class ApiProduct(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'tags': 'list[Tag]',
        'customer_product_id': 'str',
        'gtin': 'int',
        'id': 'str',
        'max_price_boundary': 'float',
        'min_price_boundary': 'float',
        'name': 'str',
        'reference_price': 'float'
    }

    attribute_map = {
        'tags': 'tags',
        'customer_product_id': 'customerProductId',
        'gtin': 'gtin',
        'id': 'id',
        'max_price_boundary': 'maxPriceBoundary',
        'min_price_boundary': 'minPriceBoundary',
        'name': 'name',
        'reference_price': 'referencePrice'
    }

    def __init__(self, tags=None, customer_product_id=None, gtin=None, id=None, max_price_boundary=None, min_price_boundary=None, name=None, reference_price=None, local_vars_configuration=None):  # noqa: E501
        """ApiProduct - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._tags = None
        self._customer_product_id = None
        self._gtin = None
        self._id = None
        self._max_price_boundary = None
        self._min_price_boundary = None
        self._name = None
        self._reference_price = None
        self.discriminator = None

        self.tags = tags
        if customer_product_id is not None:
            self.customer_product_id = customer_product_id
        if gtin is not None:
            self.gtin = gtin
        self.id = id
        if max_price_boundary is not None:
            self.max_price_boundary = max_price_boundary
        if min_price_boundary is not None:
            self.min_price_boundary = min_price_boundary
        self.name = name
        self.reference_price = reference_price

    @property
    def tags(self):
        """Gets the tags of this ApiProduct.  # noqa: E501


        :return: The tags of this ApiProduct.  # noqa: E501
        :rtype: list[Tag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this ApiProduct.


        :param tags: The tags of this ApiProduct.  # noqa: E501
        :type: list[Tag]
        """
        if self.local_vars_configuration.client_side_validation and tags is None:  # noqa: E501
            raise ValueError("Invalid value for `tags`, must not be `None`")  # noqa: E501

        self._tags = tags

    @property
    def customer_product_id(self):
        """Gets the customer_product_id of this ApiProduct.  # noqa: E501


        :return: The customer_product_id of this ApiProduct.  # noqa: E501
        :rtype: str
        """
        return self._customer_product_id

    @customer_product_id.setter
    def customer_product_id(self, customer_product_id):
        """Sets the customer_product_id of this ApiProduct.


        :param customer_product_id: The customer_product_id of this ApiProduct.  # noqa: E501
        :type: str
        """

        self._customer_product_id = customer_product_id

    @property
    def gtin(self):
        """Gets the gtin of this ApiProduct.  # noqa: E501


        :return: The gtin of this ApiProduct.  # noqa: E501
        :rtype: int
        """
        return self._gtin

    @gtin.setter
    def gtin(self, gtin):
        """Sets the gtin of this ApiProduct.


        :param gtin: The gtin of this ApiProduct.  # noqa: E501
        :type: int
        """

        self._gtin = gtin

    @property
    def id(self):
        """Gets the id of this ApiProduct.  # noqa: E501


        :return: The id of this ApiProduct.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ApiProduct.


        :param id: The id of this ApiProduct.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def max_price_boundary(self):
        """Gets the max_price_boundary of this ApiProduct.  # noqa: E501


        :return: The max_price_boundary of this ApiProduct.  # noqa: E501
        :rtype: float
        """
        return self._max_price_boundary

    @max_price_boundary.setter
    def max_price_boundary(self, max_price_boundary):
        """Sets the max_price_boundary of this ApiProduct.


        :param max_price_boundary: The max_price_boundary of this ApiProduct.  # noqa: E501
        :type: float
        """

        self._max_price_boundary = max_price_boundary

    @property
    def min_price_boundary(self):
        """Gets the min_price_boundary of this ApiProduct.  # noqa: E501


        :return: The min_price_boundary of this ApiProduct.  # noqa: E501
        :rtype: float
        """
        return self._min_price_boundary

    @min_price_boundary.setter
    def min_price_boundary(self, min_price_boundary):
        """Sets the min_price_boundary of this ApiProduct.


        :param min_price_boundary: The min_price_boundary of this ApiProduct.  # noqa: E501
        :type: float
        """

        self._min_price_boundary = min_price_boundary

    @property
    def name(self):
        """Gets the name of this ApiProduct.  # noqa: E501


        :return: The name of this ApiProduct.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ApiProduct.


        :param name: The name of this ApiProduct.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def reference_price(self):
        """Gets the reference_price of this ApiProduct.  # noqa: E501


        :return: The reference_price of this ApiProduct.  # noqa: E501
        :rtype: float
        """
        return self._reference_price

    @reference_price.setter
    def reference_price(self, reference_price):
        """Sets the reference_price of this ApiProduct.


        :param reference_price: The reference_price of this ApiProduct.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and reference_price is None:  # noqa: E501
            raise ValueError("Invalid value for `reference_price`, must not be `None`")  # noqa: E501

        self._reference_price = reference_price

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApiProduct):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ApiProduct):
            return True

        return self.to_dict() != other.to_dict()
