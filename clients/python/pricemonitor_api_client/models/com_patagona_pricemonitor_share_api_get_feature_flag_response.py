# coding: utf-8

"""
    Omnia 2.0 API The Omnia 2.0 API is RESTful and provides access to the backend of Omnia 2.0 and Pricemonitor. It is used to manage products, offers, contracts, and more.  This API supports both public endpoints for customer integration and internal endpoints for platform management. All endpoints are authenticated using either Basic Authentication or JWT Bearer tokens.

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.0.7249
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from pricemonitor_api_client.configuration import Configuration


class ComPatagonaPricemonitorShareApiGetFeatureFlagResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'flag_key': 'str',
        'description': 'str',
        'created_at': 'datetime',
        'updated_at': 'datetime'
    }

    attribute_map = {
        'flag_key': 'flagKey',
        'description': 'description',
        'created_at': 'createdAt',
        'updated_at': 'updatedAt'
    }

    def __init__(self, flag_key=None, description=None, created_at=None, updated_at=None, local_vars_configuration=None):  # noqa: E501
        """ComPatagonaPricemonitorShareApiGetFeatureFlagResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._flag_key = None
        self._description = None
        self._created_at = None
        self._updated_at = None
        self.discriminator = None

        self.flag_key = flag_key
        if description is not None:
            self.description = description
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at

    @property
    def flag_key(self):
        """Gets the flag_key of this ComPatagonaPricemonitorShareApiGetFeatureFlagResponse.  # noqa: E501


        :return: The flag_key of this ComPatagonaPricemonitorShareApiGetFeatureFlagResponse.  # noqa: E501
        :rtype: str
        """
        return self._flag_key

    @flag_key.setter
    def flag_key(self, flag_key):
        """Sets the flag_key of this ComPatagonaPricemonitorShareApiGetFeatureFlagResponse.


        :param flag_key: The flag_key of this ComPatagonaPricemonitorShareApiGetFeatureFlagResponse.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and flag_key is None:  # noqa: E501
            raise ValueError("Invalid value for `flag_key`, must not be `None`")  # noqa: E501

        self._flag_key = flag_key

    @property
    def description(self):
        """Gets the description of this ComPatagonaPricemonitorShareApiGetFeatureFlagResponse.  # noqa: E501


        :return: The description of this ComPatagonaPricemonitorShareApiGetFeatureFlagResponse.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ComPatagonaPricemonitorShareApiGetFeatureFlagResponse.


        :param description: The description of this ComPatagonaPricemonitorShareApiGetFeatureFlagResponse.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def created_at(self):
        """Gets the created_at of this ComPatagonaPricemonitorShareApiGetFeatureFlagResponse.  # noqa: E501


        :return: The created_at of this ComPatagonaPricemonitorShareApiGetFeatureFlagResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this ComPatagonaPricemonitorShareApiGetFeatureFlagResponse.


        :param created_at: The created_at of this ComPatagonaPricemonitorShareApiGetFeatureFlagResponse.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this ComPatagonaPricemonitorShareApiGetFeatureFlagResponse.  # noqa: E501


        :return: The updated_at of this ComPatagonaPricemonitorShareApiGetFeatureFlagResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this ComPatagonaPricemonitorShareApiGetFeatureFlagResponse.


        :param updated_at: The updated_at of this ComPatagonaPricemonitorShareApiGetFeatureFlagResponse.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ComPatagonaPricemonitorShareApiGetFeatureFlagResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ComPatagonaPricemonitorShareApiGetFeatureFlagResponse):
            return True

        return self.to_dict() != other.to_dict()
