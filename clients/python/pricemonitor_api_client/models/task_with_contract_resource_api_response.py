# coding: utf-8

"""
    Pricemonitor API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.0.6765
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from pricemonitor_api_client.configuration import Configuration


class TaskWithContractResourceApiResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'contract_id': 'str',
        'creation_date': 'datetime',
        'data': 'list[str]',
        'failures': 'list[TaskWithContractResourceApiResponseFailures]',
        'finish_date': 'datetime',
        'parent_id': 'str',
        'start_date': 'datetime',
        'state': 'str',
        'task_id': 'str',
        'task_type': 'str'
    }

    attribute_map = {
        'contract_id': 'contractId',
        'creation_date': 'creationDate',
        'data': 'data',
        'failures': 'failures',
        'finish_date': 'finishDate',
        'parent_id': 'parentId',
        'start_date': 'startDate',
        'state': 'state',
        'task_id': 'taskId',
        'task_type': 'taskType'
    }

    def __init__(self, contract_id=None, creation_date=None, data=None, failures=None, finish_date=None, parent_id=None, start_date=None, state=None, task_id=None, task_type=None, local_vars_configuration=None):  # noqa: E501
        """TaskWithContractResourceApiResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._contract_id = None
        self._creation_date = None
        self._data = None
        self._failures = None
        self._finish_date = None
        self._parent_id = None
        self._start_date = None
        self._state = None
        self._task_id = None
        self._task_type = None
        self.discriminator = None

        if contract_id is not None:
            self.contract_id = contract_id
        if creation_date is not None:
            self.creation_date = creation_date
        if data is not None:
            self.data = data
        if failures is not None:
            self.failures = failures
        if finish_date is not None:
            self.finish_date = finish_date
        if parent_id is not None:
            self.parent_id = parent_id
        if start_date is not None:
            self.start_date = start_date
        if state is not None:
            self.state = state
        if task_id is not None:
            self.task_id = task_id
        if task_type is not None:
            self.task_type = task_type

    @property
    def contract_id(self):
        """Gets the contract_id of this TaskWithContractResourceApiResponse.  # noqa: E501


        :return: The contract_id of this TaskWithContractResourceApiResponse.  # noqa: E501
        :rtype: str
        """
        return self._contract_id

    @contract_id.setter
    def contract_id(self, contract_id):
        """Sets the contract_id of this TaskWithContractResourceApiResponse.


        :param contract_id: The contract_id of this TaskWithContractResourceApiResponse.  # noqa: E501
        :type: str
        """

        self._contract_id = contract_id

    @property
    def creation_date(self):
        """Gets the creation_date of this TaskWithContractResourceApiResponse.  # noqa: E501


        :return: The creation_date of this TaskWithContractResourceApiResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this TaskWithContractResourceApiResponse.


        :param creation_date: The creation_date of this TaskWithContractResourceApiResponse.  # noqa: E501
        :type: datetime
        """

        self._creation_date = creation_date

    @property
    def data(self):
        """Gets the data of this TaskWithContractResourceApiResponse.  # noqa: E501


        :return: The data of this TaskWithContractResourceApiResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this TaskWithContractResourceApiResponse.


        :param data: The data of this TaskWithContractResourceApiResponse.  # noqa: E501
        :type: list[str]
        """

        self._data = data

    @property
    def failures(self):
        """Gets the failures of this TaskWithContractResourceApiResponse.  # noqa: E501


        :return: The failures of this TaskWithContractResourceApiResponse.  # noqa: E501
        :rtype: list[TaskWithContractResourceApiResponseFailures]
        """
        return self._failures

    @failures.setter
    def failures(self, failures):
        """Sets the failures of this TaskWithContractResourceApiResponse.


        :param failures: The failures of this TaskWithContractResourceApiResponse.  # noqa: E501
        :type: list[TaskWithContractResourceApiResponseFailures]
        """

        self._failures = failures

    @property
    def finish_date(self):
        """Gets the finish_date of this TaskWithContractResourceApiResponse.  # noqa: E501


        :return: The finish_date of this TaskWithContractResourceApiResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._finish_date

    @finish_date.setter
    def finish_date(self, finish_date):
        """Sets the finish_date of this TaskWithContractResourceApiResponse.


        :param finish_date: The finish_date of this TaskWithContractResourceApiResponse.  # noqa: E501
        :type: datetime
        """

        self._finish_date = finish_date

    @property
    def parent_id(self):
        """Gets the parent_id of this TaskWithContractResourceApiResponse.  # noqa: E501


        :return: The parent_id of this TaskWithContractResourceApiResponse.  # noqa: E501
        :rtype: str
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """Sets the parent_id of this TaskWithContractResourceApiResponse.


        :param parent_id: The parent_id of this TaskWithContractResourceApiResponse.  # noqa: E501
        :type: str
        """

        self._parent_id = parent_id

    @property
    def start_date(self):
        """Gets the start_date of this TaskWithContractResourceApiResponse.  # noqa: E501


        :return: The start_date of this TaskWithContractResourceApiResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this TaskWithContractResourceApiResponse.


        :param start_date: The start_date of this TaskWithContractResourceApiResponse.  # noqa: E501
        :type: datetime
        """

        self._start_date = start_date

    @property
    def state(self):
        """Gets the state of this TaskWithContractResourceApiResponse.  # noqa: E501


        :return: The state of this TaskWithContractResourceApiResponse.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this TaskWithContractResourceApiResponse.


        :param state: The state of this TaskWithContractResourceApiResponse.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def task_id(self):
        """Gets the task_id of this TaskWithContractResourceApiResponse.  # noqa: E501


        :return: The task_id of this TaskWithContractResourceApiResponse.  # noqa: E501
        :rtype: str
        """
        return self._task_id

    @task_id.setter
    def task_id(self, task_id):
        """Sets the task_id of this TaskWithContractResourceApiResponse.


        :param task_id: The task_id of this TaskWithContractResourceApiResponse.  # noqa: E501
        :type: str
        """

        self._task_id = task_id

    @property
    def task_type(self):
        """Gets the task_type of this TaskWithContractResourceApiResponse.  # noqa: E501


        :return: The task_type of this TaskWithContractResourceApiResponse.  # noqa: E501
        :rtype: str
        """
        return self._task_type

    @task_type.setter
    def task_type(self, task_type):
        """Sets the task_type of this TaskWithContractResourceApiResponse.


        :param task_type: The task_type of this TaskWithContractResourceApiResponse.  # noqa: E501
        :type: str
        """

        self._task_type = task_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TaskWithContractResourceApiResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TaskWithContractResourceApiResponse):
            return True

        return self.to_dict() != other.to_dict()
