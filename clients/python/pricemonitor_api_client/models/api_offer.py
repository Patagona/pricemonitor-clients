# coding: utf-8

"""
    Pricemonitor API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.0.6271
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from pricemonitor_api_client.configuration import Configuration


class ApiOffer(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'attributes': 'list[OfferAttribute]',
        'availability': 'bool',
        'creation_date': 'datetime',
        'contract_id': 'str',
        'currency': 'str',
        'delivery_costs': 'float',
        'domain': 'str',
        'gtin': 'int',
        'ignored': 'bool',
        'max_delivery_time': 'int',
        'min_delivery_time': 'int',
        'position_by_unit_price': 'int',
        'position_by_total_price': 'int',
        'price': 'float',
        'product_id': 'str',
        'product_name': 'str',
        'retrieval_date': 'datetime',
        'url': 'str',
        'vendor_domain_id': 'str',
        'vendor_name': 'str'
    }

    attribute_map = {
        'attributes': 'attributes',
        'availability': 'availability',
        'creation_date': 'creationDate',
        'contract_id': 'contractId',
        'currency': 'currency',
        'delivery_costs': 'deliveryCosts',
        'domain': 'domain',
        'gtin': 'gtin',
        'ignored': 'ignored',
        'max_delivery_time': 'maxDeliveryTime',
        'min_delivery_time': 'minDeliveryTime',
        'position_by_unit_price': 'positionByUnitPrice',
        'position_by_total_price': 'positionByTotalPrice',
        'price': 'price',
        'product_id': 'productId',
        'product_name': 'productName',
        'retrieval_date': 'retrievalDate',
        'url': 'url',
        'vendor_domain_id': 'vendorDomainId',
        'vendor_name': 'vendorName'
    }

    def __init__(self, attributes=None, availability=None, creation_date=None, contract_id=None, currency=None, delivery_costs=None, domain=None, gtin=None, ignored=None, max_delivery_time=None, min_delivery_time=None, position_by_unit_price=None, position_by_total_price=None, price=None, product_id=None, product_name=None, retrieval_date=None, url=None, vendor_domain_id=None, vendor_name=None, local_vars_configuration=None):  # noqa: E501
        """ApiOffer - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._attributes = None
        self._availability = None
        self._creation_date = None
        self._contract_id = None
        self._currency = None
        self._delivery_costs = None
        self._domain = None
        self._gtin = None
        self._ignored = None
        self._max_delivery_time = None
        self._min_delivery_time = None
        self._position_by_unit_price = None
        self._position_by_total_price = None
        self._price = None
        self._product_id = None
        self._product_name = None
        self._retrieval_date = None
        self._url = None
        self._vendor_domain_id = None
        self._vendor_name = None
        self.discriminator = None

        if attributes is not None:
            self.attributes = attributes
        if availability is not None:
            self.availability = availability
        self.creation_date = creation_date
        self.contract_id = contract_id
        self.currency = currency
        self.delivery_costs = delivery_costs
        self.domain = domain
        if gtin is not None:
            self.gtin = gtin
        self.ignored = ignored
        if max_delivery_time is not None:
            self.max_delivery_time = max_delivery_time
        if min_delivery_time is not None:
            self.min_delivery_time = min_delivery_time
        if position_by_unit_price is not None:
            self.position_by_unit_price = position_by_unit_price
        if position_by_total_price is not None:
            self.position_by_total_price = position_by_total_price
        self.price = price
        self.product_id = product_id
        self.product_name = product_name
        if retrieval_date is not None:
            self.retrieval_date = retrieval_date
        self.url = url
        if vendor_domain_id is not None:
            self.vendor_domain_id = vendor_domain_id
        self.vendor_name = vendor_name

    @property
    def attributes(self):
        """Gets the attributes of this ApiOffer.  # noqa: E501


        :return: The attributes of this ApiOffer.  # noqa: E501
        :rtype: list[OfferAttribute]
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this ApiOffer.


        :param attributes: The attributes of this ApiOffer.  # noqa: E501
        :type: list[OfferAttribute]
        """

        self._attributes = attributes

    @property
    def availability(self):
        """Gets the availability of this ApiOffer.  # noqa: E501


        :return: The availability of this ApiOffer.  # noqa: E501
        :rtype: bool
        """
        return self._availability

    @availability.setter
    def availability(self, availability):
        """Sets the availability of this ApiOffer.


        :param availability: The availability of this ApiOffer.  # noqa: E501
        :type: bool
        """

        self._availability = availability

    @property
    def creation_date(self):
        """Gets the creation_date of this ApiOffer.  # noqa: E501


        :return: The creation_date of this ApiOffer.  # noqa: E501
        :rtype: datetime
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this ApiOffer.


        :param creation_date: The creation_date of this ApiOffer.  # noqa: E501
        :type: datetime
        """
        if self.local_vars_configuration.client_side_validation and creation_date is None:  # noqa: E501
            raise ValueError("Invalid value for `creation_date`, must not be `None`")  # noqa: E501

        self._creation_date = creation_date

    @property
    def contract_id(self):
        """Gets the contract_id of this ApiOffer.  # noqa: E501


        :return: The contract_id of this ApiOffer.  # noqa: E501
        :rtype: str
        """
        return self._contract_id

    @contract_id.setter
    def contract_id(self, contract_id):
        """Sets the contract_id of this ApiOffer.


        :param contract_id: The contract_id of this ApiOffer.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and contract_id is None:  # noqa: E501
            raise ValueError("Invalid value for `contract_id`, must not be `None`")  # noqa: E501

        self._contract_id = contract_id

    @property
    def currency(self):
        """Gets the currency of this ApiOffer.  # noqa: E501


        :return: The currency of this ApiOffer.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this ApiOffer.


        :param currency: The currency of this ApiOffer.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and currency is None:  # noqa: E501
            raise ValueError("Invalid value for `currency`, must not be `None`")  # noqa: E501

        self._currency = currency

    @property
    def delivery_costs(self):
        """Gets the delivery_costs of this ApiOffer.  # noqa: E501


        :return: The delivery_costs of this ApiOffer.  # noqa: E501
        :rtype: float
        """
        return self._delivery_costs

    @delivery_costs.setter
    def delivery_costs(self, delivery_costs):
        """Sets the delivery_costs of this ApiOffer.


        :param delivery_costs: The delivery_costs of this ApiOffer.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and delivery_costs is None:  # noqa: E501
            raise ValueError("Invalid value for `delivery_costs`, must not be `None`")  # noqa: E501

        self._delivery_costs = delivery_costs

    @property
    def domain(self):
        """Gets the domain of this ApiOffer.  # noqa: E501


        :return: The domain of this ApiOffer.  # noqa: E501
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this ApiOffer.


        :param domain: The domain of this ApiOffer.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and domain is None:  # noqa: E501
            raise ValueError("Invalid value for `domain`, must not be `None`")  # noqa: E501

        self._domain = domain

    @property
    def gtin(self):
        """Gets the gtin of this ApiOffer.  # noqa: E501


        :return: The gtin of this ApiOffer.  # noqa: E501
        :rtype: int
        """
        return self._gtin

    @gtin.setter
    def gtin(self, gtin):
        """Sets the gtin of this ApiOffer.


        :param gtin: The gtin of this ApiOffer.  # noqa: E501
        :type: int
        """

        self._gtin = gtin

    @property
    def ignored(self):
        """Gets the ignored of this ApiOffer.  # noqa: E501


        :return: The ignored of this ApiOffer.  # noqa: E501
        :rtype: bool
        """
        return self._ignored

    @ignored.setter
    def ignored(self, ignored):
        """Sets the ignored of this ApiOffer.


        :param ignored: The ignored of this ApiOffer.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and ignored is None:  # noqa: E501
            raise ValueError("Invalid value for `ignored`, must not be `None`")  # noqa: E501

        self._ignored = ignored

    @property
    def max_delivery_time(self):
        """Gets the max_delivery_time of this ApiOffer.  # noqa: E501


        :return: The max_delivery_time of this ApiOffer.  # noqa: E501
        :rtype: int
        """
        return self._max_delivery_time

    @max_delivery_time.setter
    def max_delivery_time(self, max_delivery_time):
        """Sets the max_delivery_time of this ApiOffer.


        :param max_delivery_time: The max_delivery_time of this ApiOffer.  # noqa: E501
        :type: int
        """

        self._max_delivery_time = max_delivery_time

    @property
    def min_delivery_time(self):
        """Gets the min_delivery_time of this ApiOffer.  # noqa: E501


        :return: The min_delivery_time of this ApiOffer.  # noqa: E501
        :rtype: int
        """
        return self._min_delivery_time

    @min_delivery_time.setter
    def min_delivery_time(self, min_delivery_time):
        """Sets the min_delivery_time of this ApiOffer.


        :param min_delivery_time: The min_delivery_time of this ApiOffer.  # noqa: E501
        :type: int
        """

        self._min_delivery_time = min_delivery_time

    @property
    def position_by_unit_price(self):
        """Gets the position_by_unit_price of this ApiOffer.  # noqa: E501


        :return: The position_by_unit_price of this ApiOffer.  # noqa: E501
        :rtype: int
        """
        return self._position_by_unit_price

    @position_by_unit_price.setter
    def position_by_unit_price(self, position_by_unit_price):
        """Sets the position_by_unit_price of this ApiOffer.


        :param position_by_unit_price: The position_by_unit_price of this ApiOffer.  # noqa: E501
        :type: int
        """

        self._position_by_unit_price = position_by_unit_price

    @property
    def position_by_total_price(self):
        """Gets the position_by_total_price of this ApiOffer.  # noqa: E501


        :return: The position_by_total_price of this ApiOffer.  # noqa: E501
        :rtype: int
        """
        return self._position_by_total_price

    @position_by_total_price.setter
    def position_by_total_price(self, position_by_total_price):
        """Sets the position_by_total_price of this ApiOffer.


        :param position_by_total_price: The position_by_total_price of this ApiOffer.  # noqa: E501
        :type: int
        """

        self._position_by_total_price = position_by_total_price

    @property
    def price(self):
        """Gets the price of this ApiOffer.  # noqa: E501


        :return: The price of this ApiOffer.  # noqa: E501
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this ApiOffer.


        :param price: The price of this ApiOffer.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and price is None:  # noqa: E501
            raise ValueError("Invalid value for `price`, must not be `None`")  # noqa: E501

        self._price = price

    @property
    def product_id(self):
        """Gets the product_id of this ApiOffer.  # noqa: E501


        :return: The product_id of this ApiOffer.  # noqa: E501
        :rtype: str
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """Sets the product_id of this ApiOffer.


        :param product_id: The product_id of this ApiOffer.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and product_id is None:  # noqa: E501
            raise ValueError("Invalid value for `product_id`, must not be `None`")  # noqa: E501

        self._product_id = product_id

    @property
    def product_name(self):
        """Gets the product_name of this ApiOffer.  # noqa: E501


        :return: The product_name of this ApiOffer.  # noqa: E501
        :rtype: str
        """
        return self._product_name

    @product_name.setter
    def product_name(self, product_name):
        """Sets the product_name of this ApiOffer.


        :param product_name: The product_name of this ApiOffer.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and product_name is None:  # noqa: E501
            raise ValueError("Invalid value for `product_name`, must not be `None`")  # noqa: E501

        self._product_name = product_name

    @property
    def retrieval_date(self):
        """Gets the retrieval_date of this ApiOffer.  # noqa: E501


        :return: The retrieval_date of this ApiOffer.  # noqa: E501
        :rtype: datetime
        """
        return self._retrieval_date

    @retrieval_date.setter
    def retrieval_date(self, retrieval_date):
        """Sets the retrieval_date of this ApiOffer.


        :param retrieval_date: The retrieval_date of this ApiOffer.  # noqa: E501
        :type: datetime
        """

        self._retrieval_date = retrieval_date

    @property
    def url(self):
        """Gets the url of this ApiOffer.  # noqa: E501


        :return: The url of this ApiOffer.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this ApiOffer.


        :param url: The url of this ApiOffer.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and url is None:  # noqa: E501
            raise ValueError("Invalid value for `url`, must not be `None`")  # noqa: E501

        self._url = url

    @property
    def vendor_domain_id(self):
        """Gets the vendor_domain_id of this ApiOffer.  # noqa: E501


        :return: The vendor_domain_id of this ApiOffer.  # noqa: E501
        :rtype: str
        """
        return self._vendor_domain_id

    @vendor_domain_id.setter
    def vendor_domain_id(self, vendor_domain_id):
        """Sets the vendor_domain_id of this ApiOffer.


        :param vendor_domain_id: The vendor_domain_id of this ApiOffer.  # noqa: E501
        :type: str
        """

        self._vendor_domain_id = vendor_domain_id

    @property
    def vendor_name(self):
        """Gets the vendor_name of this ApiOffer.  # noqa: E501


        :return: The vendor_name of this ApiOffer.  # noqa: E501
        :rtype: str
        """
        return self._vendor_name

    @vendor_name.setter
    def vendor_name(self, vendor_name):
        """Sets the vendor_name of this ApiOffer.


        :param vendor_name: The vendor_name of this ApiOffer.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and vendor_name is None:  # noqa: E501
            raise ValueError("Invalid value for `vendor_name`, must not be `None`")  # noqa: E501

        self._vendor_name = vendor_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApiOffer):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ApiOffer):
            return True

        return self.to_dict() != other.to_dict()
