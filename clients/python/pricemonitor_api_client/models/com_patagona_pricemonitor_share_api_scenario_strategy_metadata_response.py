# coding: utf-8

"""
    Omnia 2.0 API The Omnia 2.0 API is RESTful and provides access to the backend of Omnia 2.0 and Pricemonitor. It is used to manage products, offers, contracts, and more.  This API supports both public endpoints for customer integration and internal endpoints for platform management. All endpoints are authenticated using either Basic Authentication or JWT Bearer tokens.

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.0.7194
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from pricemonitor_api_client.configuration import Configuration


class ComPatagonaPricemonitorShareApiScenarioStrategyMetadataResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'description': 'str',
        'id': 'float',
        'update_date': 'datetime',
        'created_by': 'str',
        'creation_date': 'datetime',
        'title': 'str',
        'schema_version': 'int',
        'updated_by': 'str'
    }

    attribute_map = {
        'description': 'description',
        'id': 'id',
        'update_date': 'updateDate',
        'created_by': 'createdBy',
        'creation_date': 'creationDate',
        'title': 'title',
        'schema_version': 'schemaVersion',
        'updated_by': 'updatedBy'
    }

    def __init__(self, description=None, id=None, update_date=None, created_by=None, creation_date=None, title=None, schema_version=None, updated_by=None, local_vars_configuration=None):  # noqa: E501
        """ComPatagonaPricemonitorShareApiScenarioStrategyMetadataResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._description = None
        self._id = None
        self._update_date = None
        self._created_by = None
        self._creation_date = None
        self._title = None
        self._schema_version = None
        self._updated_by = None
        self.discriminator = None

        if description is not None:
            self.description = description
        self.id = id
        self.update_date = update_date
        self.created_by = created_by
        self.creation_date = creation_date
        self.title = title
        self.schema_version = schema_version
        self.updated_by = updated_by

    @property
    def description(self):
        """Gets the description of this ComPatagonaPricemonitorShareApiScenarioStrategyMetadataResponse.  # noqa: E501

        optional description of the scenario  # noqa: E501

        :return: The description of this ComPatagonaPricemonitorShareApiScenarioStrategyMetadataResponse.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ComPatagonaPricemonitorShareApiScenarioStrategyMetadataResponse.

        optional description of the scenario  # noqa: E501

        :param description: The description of this ComPatagonaPricemonitorShareApiScenarioStrategyMetadataResponse.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def id(self):
        """Gets the id of this ComPatagonaPricemonitorShareApiScenarioStrategyMetadataResponse.  # noqa: E501

        unique identifier of the strategy scenario  # noqa: E501

        :return: The id of this ComPatagonaPricemonitorShareApiScenarioStrategyMetadataResponse.  # noqa: E501
        :rtype: float
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ComPatagonaPricemonitorShareApiScenarioStrategyMetadataResponse.

        unique identifier of the strategy scenario  # noqa: E501

        :param id: The id of this ComPatagonaPricemonitorShareApiScenarioStrategyMetadataResponse.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def update_date(self):
        """Gets the update_date of this ComPatagonaPricemonitorShareApiScenarioStrategyMetadataResponse.  # noqa: E501

        timestamp of last strategy update  # noqa: E501

        :return: The update_date of this ComPatagonaPricemonitorShareApiScenarioStrategyMetadataResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._update_date

    @update_date.setter
    def update_date(self, update_date):
        """Sets the update_date of this ComPatagonaPricemonitorShareApiScenarioStrategyMetadataResponse.

        timestamp of last strategy update  # noqa: E501

        :param update_date: The update_date of this ComPatagonaPricemonitorShareApiScenarioStrategyMetadataResponse.  # noqa: E501
        :type: datetime
        """
        if self.local_vars_configuration.client_side_validation and update_date is None:  # noqa: E501
            raise ValueError("Invalid value for `update_date`, must not be `None`")  # noqa: E501

        self._update_date = update_date

    @property
    def created_by(self):
        """Gets the created_by of this ComPatagonaPricemonitorShareApiScenarioStrategyMetadataResponse.  # noqa: E501

        e-mail of the user creating the strategy  # noqa: E501

        :return: The created_by of this ComPatagonaPricemonitorShareApiScenarioStrategyMetadataResponse.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this ComPatagonaPricemonitorShareApiScenarioStrategyMetadataResponse.

        e-mail of the user creating the strategy  # noqa: E501

        :param created_by: The created_by of this ComPatagonaPricemonitorShareApiScenarioStrategyMetadataResponse.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and created_by is None:  # noqa: E501
            raise ValueError("Invalid value for `created_by`, must not be `None`")  # noqa: E501

        self._created_by = created_by

    @property
    def creation_date(self):
        """Gets the creation_date of this ComPatagonaPricemonitorShareApiScenarioStrategyMetadataResponse.  # noqa: E501

        timestamp of when the strategy was created  # noqa: E501

        :return: The creation_date of this ComPatagonaPricemonitorShareApiScenarioStrategyMetadataResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this ComPatagonaPricemonitorShareApiScenarioStrategyMetadataResponse.

        timestamp of when the strategy was created  # noqa: E501

        :param creation_date: The creation_date of this ComPatagonaPricemonitorShareApiScenarioStrategyMetadataResponse.  # noqa: E501
        :type: datetime
        """
        if self.local_vars_configuration.client_side_validation and creation_date is None:  # noqa: E501
            raise ValueError("Invalid value for `creation_date`, must not be `None`")  # noqa: E501

        self._creation_date = creation_date

    @property
    def title(self):
        """Gets the title of this ComPatagonaPricemonitorShareApiScenarioStrategyMetadataResponse.  # noqa: E501

        up to 50 characters, has to be unique for one contract  # noqa: E501

        :return: The title of this ComPatagonaPricemonitorShareApiScenarioStrategyMetadataResponse.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this ComPatagonaPricemonitorShareApiScenarioStrategyMetadataResponse.

        up to 50 characters, has to be unique for one contract  # noqa: E501

        :param title: The title of this ComPatagonaPricemonitorShareApiScenarioStrategyMetadataResponse.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and title is None:  # noqa: E501
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    @property
    def schema_version(self):
        """Gets the schema_version of this ComPatagonaPricemonitorShareApiScenarioStrategyMetadataResponse.  # noqa: E501

        schema version of the strategy  # noqa: E501

        :return: The schema_version of this ComPatagonaPricemonitorShareApiScenarioStrategyMetadataResponse.  # noqa: E501
        :rtype: int
        """
        return self._schema_version

    @schema_version.setter
    def schema_version(self, schema_version):
        """Sets the schema_version of this ComPatagonaPricemonitorShareApiScenarioStrategyMetadataResponse.

        schema version of the strategy  # noqa: E501

        :param schema_version: The schema_version of this ComPatagonaPricemonitorShareApiScenarioStrategyMetadataResponse.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and schema_version is None:  # noqa: E501
            raise ValueError("Invalid value for `schema_version`, must not be `None`")  # noqa: E501

        self._schema_version = schema_version

    @property
    def updated_by(self):
        """Gets the updated_by of this ComPatagonaPricemonitorShareApiScenarioStrategyMetadataResponse.  # noqa: E501

        e-mail of the user that last updated the strategy  # noqa: E501

        :return: The updated_by of this ComPatagonaPricemonitorShareApiScenarioStrategyMetadataResponse.  # noqa: E501
        :rtype: str
        """
        return self._updated_by

    @updated_by.setter
    def updated_by(self, updated_by):
        """Sets the updated_by of this ComPatagonaPricemonitorShareApiScenarioStrategyMetadataResponse.

        e-mail of the user that last updated the strategy  # noqa: E501

        :param updated_by: The updated_by of this ComPatagonaPricemonitorShareApiScenarioStrategyMetadataResponse.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and updated_by is None:  # noqa: E501
            raise ValueError("Invalid value for `updated_by`, must not be `None`")  # noqa: E501

        self._updated_by = updated_by

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ComPatagonaPricemonitorShareApiScenarioStrategyMetadataResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ComPatagonaPricemonitorShareApiScenarioStrategyMetadataResponse):
            return True

        return self.to_dict() != other.to_dict()
