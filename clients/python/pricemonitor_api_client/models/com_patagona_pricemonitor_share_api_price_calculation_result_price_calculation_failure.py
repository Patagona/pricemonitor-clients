# coding: utf-8

"""
    Omnia 2.0 API The Omnia 2.0 API is RESTful and provides access to the backend of Omnia 2.0 and Pricemonitor. It is used to manage products, offers, contracts, and more.  This API supports both public endpoints for customer integration and internal endpoints for platform management. All endpoints are authenticated using either Basic Authentication or JWT Bearer tokens.

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.0.7191
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from pricemonitor_api_client.configuration import Configuration


class ComPatagonaPricemonitorShareApiPriceCalculationResultPriceCalculationFailure(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'reason': 'str',
        'node_id': 'int'
    }

    attribute_map = {
        'reason': 'reason',
        'node_id': 'nodeId'
    }

    def __init__(self, reason=None, node_id=None, local_vars_configuration=None):  # noqa: E501
        """ComPatagonaPricemonitorShareApiPriceCalculationResultPriceCalculationFailure - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._reason = None
        self._node_id = None
        self.discriminator = None

        self.reason = reason
        self.node_id = node_id

    @property
    def reason(self):
        """Gets the reason of this ComPatagonaPricemonitorShareApiPriceCalculationResultPriceCalculationFailure.  # noqa: E501

        The reason why the price calculation failed.  # noqa: E501

        :return: The reason of this ComPatagonaPricemonitorShareApiPriceCalculationResultPriceCalculationFailure.  # noqa: E501
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this ComPatagonaPricemonitorShareApiPriceCalculationResultPriceCalculationFailure.

        The reason why the price calculation failed.  # noqa: E501

        :param reason: The reason of this ComPatagonaPricemonitorShareApiPriceCalculationResultPriceCalculationFailure.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and reason is None:  # noqa: E501
            raise ValueError("Invalid value for `reason`, must not be `None`")  # noqa: E501

        self._reason = reason

    @property
    def node_id(self):
        """Gets the node_id of this ComPatagonaPricemonitorShareApiPriceCalculationResultPriceCalculationFailure.  # noqa: E501

        The ID of the node where the price calculation failed.  # noqa: E501

        :return: The node_id of this ComPatagonaPricemonitorShareApiPriceCalculationResultPriceCalculationFailure.  # noqa: E501
        :rtype: int
        """
        return self._node_id

    @node_id.setter
    def node_id(self, node_id):
        """Sets the node_id of this ComPatagonaPricemonitorShareApiPriceCalculationResultPriceCalculationFailure.

        The ID of the node where the price calculation failed.  # noqa: E501

        :param node_id: The node_id of this ComPatagonaPricemonitorShareApiPriceCalculationResultPriceCalculationFailure.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and node_id is None:  # noqa: E501
            raise ValueError("Invalid value for `node_id`, must not be `None`")  # noqa: E501

        self._node_id = node_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ComPatagonaPricemonitorShareApiPriceCalculationResultPriceCalculationFailure):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ComPatagonaPricemonitorShareApiPriceCalculationResultPriceCalculationFailure):
            return True

        return self.to_dict() != other.to_dict()
