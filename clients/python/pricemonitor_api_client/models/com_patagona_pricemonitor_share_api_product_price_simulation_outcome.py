# coding: utf-8

"""
    Omnia 2.0 API The Omnia 2.0 API is RESTful and provides access to the backend of Omnia 2.0 and Pricemonitor. It is used to manage products, offers, contracts, and more.  This API supports both public endpoints for customer integration and internal endpoints for platform management. All endpoints are authenticated using either Basic Authentication or JWT Bearer tokens.

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.0.7243
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from pricemonitor_api_client.configuration import Configuration


class ComPatagonaPricemonitorShareApiProductPriceSimulationOutcome(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'original_offers': 'list[ComPatagonaPricemonitorShareApiApiOffer]',
        'result': 'ComPatagonaPricemonitorShareApiPriceCalculationResult',
        'product_id': 'str',
        'decisive_path': 'list[int]',
        'full_path': 'list[int]'
    }

    attribute_map = {
        'original_offers': 'originalOffers',
        'result': 'result',
        'product_id': 'productId',
        'decisive_path': 'decisivePath',
        'full_path': 'fullPath'
    }

    def __init__(self, original_offers=None, result=None, product_id=None, decisive_path=None, full_path=None, local_vars_configuration=None):  # noqa: E501
        """ComPatagonaPricemonitorShareApiProductPriceSimulationOutcome - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._original_offers = None
        self._result = None
        self._product_id = None
        self._decisive_path = None
        self._full_path = None
        self.discriminator = None

        self.original_offers = original_offers
        self.result = result
        self.product_id = product_id
        self.decisive_path = decisive_path
        self.full_path = full_path

    @property
    def original_offers(self):
        """Gets the original_offers of this ComPatagonaPricemonitorShareApiProductPriceSimulationOutcome.  # noqa: E501

        All offers which were initially considered for the price calculation.  # noqa: E501

        :return: The original_offers of this ComPatagonaPricemonitorShareApiProductPriceSimulationOutcome.  # noqa: E501
        :rtype: list[ComPatagonaPricemonitorShareApiApiOffer]
        """
        return self._original_offers

    @original_offers.setter
    def original_offers(self, original_offers):
        """Sets the original_offers of this ComPatagonaPricemonitorShareApiProductPriceSimulationOutcome.

        All offers which were initially considered for the price calculation.  # noqa: E501

        :param original_offers: The original_offers of this ComPatagonaPricemonitorShareApiProductPriceSimulationOutcome.  # noqa: E501
        :type: list[ComPatagonaPricemonitorShareApiApiOffer]
        """
        if self.local_vars_configuration.client_side_validation and original_offers is None:  # noqa: E501
            raise ValueError("Invalid value for `original_offers`, must not be `None`")  # noqa: E501

        self._original_offers = original_offers

    @property
    def result(self):
        """Gets the result of this ComPatagonaPricemonitorShareApiProductPriceSimulationOutcome.  # noqa: E501


        :return: The result of this ComPatagonaPricemonitorShareApiProductPriceSimulationOutcome.  # noqa: E501
        :rtype: ComPatagonaPricemonitorShareApiPriceCalculationResult
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this ComPatagonaPricemonitorShareApiProductPriceSimulationOutcome.


        :param result: The result of this ComPatagonaPricemonitorShareApiProductPriceSimulationOutcome.  # noqa: E501
        :type: ComPatagonaPricemonitorShareApiPriceCalculationResult
        """
        if self.local_vars_configuration.client_side_validation and result is None:  # noqa: E501
            raise ValueError("Invalid value for `result`, must not be `None`")  # noqa: E501

        self._result = result

    @property
    def product_id(self):
        """Gets the product_id of this ComPatagonaPricemonitorShareApiProductPriceSimulationOutcome.  # noqa: E501

        The internal product ID in Omnia 2.0.  # noqa: E501

        :return: The product_id of this ComPatagonaPricemonitorShareApiProductPriceSimulationOutcome.  # noqa: E501
        :rtype: str
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """Sets the product_id of this ComPatagonaPricemonitorShareApiProductPriceSimulationOutcome.

        The internal product ID in Omnia 2.0.  # noqa: E501

        :param product_id: The product_id of this ComPatagonaPricemonitorShareApiProductPriceSimulationOutcome.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and product_id is None:  # noqa: E501
            raise ValueError("Invalid value for `product_id`, must not be `None`")  # noqa: E501

        self._product_id = product_id

    @property
    def decisive_path(self):
        """Gets the decisive_path of this ComPatagonaPricemonitorShareApiProductPriceSimulationOutcome.  # noqa: E501

        The decisive path in the strategy tree:<br> From root node down to the node which calculated the price (shortest path). Can be empty when no price has been calculated or the price calculation fails.  # noqa: E501

        :return: The decisive_path of this ComPatagonaPricemonitorShareApiProductPriceSimulationOutcome.  # noqa: E501
        :rtype: list[int]
        """
        return self._decisive_path

    @decisive_path.setter
    def decisive_path(self, decisive_path):
        """Sets the decisive_path of this ComPatagonaPricemonitorShareApiProductPriceSimulationOutcome.

        The decisive path in the strategy tree:<br> From root node down to the node which calculated the price (shortest path). Can be empty when no price has been calculated or the price calculation fails.  # noqa: E501

        :param decisive_path: The decisive_path of this ComPatagonaPricemonitorShareApiProductPriceSimulationOutcome.  # noqa: E501
        :type: list[int]
        """
        if self.local_vars_configuration.client_side_validation and decisive_path is None:  # noqa: E501
            raise ValueError("Invalid value for `decisive_path`, must not be `None`")  # noqa: E501

        self._decisive_path = decisive_path

    @property
    def full_path(self):
        """Gets the full_path of this ComPatagonaPricemonitorShareApiProductPriceSimulationOutcome.  # noqa: E501

        All traversed (processed) nodes in the strategy tree.  # noqa: E501

        :return: The full_path of this ComPatagonaPricemonitorShareApiProductPriceSimulationOutcome.  # noqa: E501
        :rtype: list[int]
        """
        return self._full_path

    @full_path.setter
    def full_path(self, full_path):
        """Sets the full_path of this ComPatagonaPricemonitorShareApiProductPriceSimulationOutcome.

        All traversed (processed) nodes in the strategy tree.  # noqa: E501

        :param full_path: The full_path of this ComPatagonaPricemonitorShareApiProductPriceSimulationOutcome.  # noqa: E501
        :type: list[int]
        """
        if self.local_vars_configuration.client_side_validation and full_path is None:  # noqa: E501
            raise ValueError("Invalid value for `full_path`, must not be `None`")  # noqa: E501

        self._full_path = full_path

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ComPatagonaPricemonitorShareApiProductPriceSimulationOutcome):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ComPatagonaPricemonitorShareApiProductPriceSimulationOutcome):
            return True

        return self.to_dict() != other.to_dict()
