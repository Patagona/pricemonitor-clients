# coding: utf-8

"""
    Omnia 2.0 API The Omnia 2.0 API is RESTful and provides access to the backend of Omnia 2.0 and Pricemonitor. It is used to manage products, offers, contracts, and more.  This API supports both public endpoints for customer integration and internal endpoints for platform management. All endpoints are authenticated using either Basic Authentication or JWT Bearer tokens.

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.0.7297
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from pricemonitor_api_client.api_client import ApiClient
from pricemonitor_api_client.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class TasksApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_task_manufacturer_v2(self, contract_id, **kwargs):  # noqa: E501
        """Create task [manufacturer]  # noqa: E501

        Creates a new task for a manufacturer contract  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_task_manufacturer_v2(contract_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str contract_id: Unique identifier of the contract (required)
        :param ComPatagonaPricemonitorShareApiCreateTaskBodyV2 com_patagona_pricemonitor_share_api_create_task_body_v2: This is a generated entry and needs to be described.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: GenericTaskWithUrl
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.create_task_manufacturer_v2_with_http_info(contract_id, **kwargs)  # noqa: E501

    def create_task_manufacturer_v2_with_http_info(self, contract_id, **kwargs):  # noqa: E501
        """Create task [manufacturer]  # noqa: E501

        Creates a new task for a manufacturer contract  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_task_manufacturer_v2_with_http_info(contract_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str contract_id: Unique identifier of the contract (required)
        :param ComPatagonaPricemonitorShareApiCreateTaskBodyV2 com_patagona_pricemonitor_share_api_create_task_body_v2: This is a generated entry and needs to be described.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(GenericTaskWithUrl, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'contract_id',
            'com_patagona_pricemonitor_share_api_create_task_body_v2'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_task_manufacturer_v2" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'contract_id' is set
        if self.api_client.client_side_validation and ('contract_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['contract_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `contract_id` when calling `create_task_manufacturer_v2`")  # noqa: E501

        if self.api_client.client_side_validation and ('contract_id' in local_var_params and  # noqa: E501
                                                        len(local_var_params['contract_id']) < 1):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `contract_id` when calling `create_task_manufacturer_v2`, length must be greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'contract_id' in local_var_params:
            path_params['contractId'] = local_var_params['contract_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'com_patagona_pricemonitor_share_api_create_task_body_v2' in local_var_params:
            body_params = local_var_params['com_patagona_pricemonitor_share_api_create_task_body_v2']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/2/m/contracts/{contractId}/tasks', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GenericTaskWithUrl',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_task_vendor_v2(self, contract_id, **kwargs):  # noqa: E501
        """Create a task [vendor]  # noqa: E501

        Creates a new task for a vendor contract.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_task_vendor_v2(contract_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str contract_id: Unique identifier of the contract (required)
        :param ComPatagonaPricemonitorShareApiCreateTaskBodyV2 com_patagona_pricemonitor_share_api_create_task_body_v2: Create a new task
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.create_task_vendor_v2_with_http_info(contract_id, **kwargs)  # noqa: E501

    def create_task_vendor_v2_with_http_info(self, contract_id, **kwargs):  # noqa: E501
        """Create a task [vendor]  # noqa: E501

        Creates a new task for a vendor contract.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_task_vendor_v2_with_http_info(contract_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str contract_id: Unique identifier of the contract (required)
        :param ComPatagonaPricemonitorShareApiCreateTaskBodyV2 com_patagona_pricemonitor_share_api_create_task_body_v2: Create a new task
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(object, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'contract_id',
            'com_patagona_pricemonitor_share_api_create_task_body_v2'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_task_vendor_v2" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'contract_id' is set
        if self.api_client.client_side_validation and ('contract_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['contract_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `contract_id` when calling `create_task_vendor_v2`")  # noqa: E501

        if self.api_client.client_side_validation and ('contract_id' in local_var_params and  # noqa: E501
                                                        len(local_var_params['contract_id']) < 1):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `contract_id` when calling `create_task_vendor_v2`, length must be greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'contract_id' in local_var_params:
            path_params['contractId'] = local_var_params['contract_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'com_patagona_pricemonitor_share_api_create_task_body_v2' in local_var_params:
            body_params = local_var_params['com_patagona_pricemonitor_share_api_create_task_body_v2']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/2/v/contracts/{contractId}/tasks', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_task_data_manufacturer_v2(self, contract_id, task_id, **kwargs):  # noqa: E501
        """Get task data [manufacturer]  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_task_data_manufacturer_v2(contract_id, task_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str contract_id: Unique identifier of the contract (required)
        :param str task_id: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_task_data_manufacturer_v2_with_http_info(contract_id, task_id, **kwargs)  # noqa: E501

    def get_task_data_manufacturer_v2_with_http_info(self, contract_id, task_id, **kwargs):  # noqa: E501
        """Get task data [manufacturer]  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_task_data_manufacturer_v2_with_http_info(contract_id, task_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str contract_id: Unique identifier of the contract (required)
        :param str task_id: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(object, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'contract_id',
            'task_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_task_data_manufacturer_v2" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'contract_id' is set
        if self.api_client.client_side_validation and ('contract_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['contract_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `contract_id` when calling `get_task_data_manufacturer_v2`")  # noqa: E501
        # verify the required parameter 'task_id' is set
        if self.api_client.client_side_validation and ('task_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['task_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `task_id` when calling `get_task_data_manufacturer_v2`")  # noqa: E501

        if self.api_client.client_side_validation and ('contract_id' in local_var_params and  # noqa: E501
                                                        len(local_var_params['contract_id']) < 1):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `contract_id` when calling `get_task_data_manufacturer_v2`, length must be greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'contract_id' in local_var_params:
            path_params['contractId'] = local_var_params['contract_id']  # noqa: E501
        if 'task_id' in local_var_params:
            path_params['taskId'] = local_var_params['task_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/2/m/contracts/{contractId}/tasks/{taskId}/data', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_task_data_vendor_v2(self, contract_id, task_id, **kwargs):  # noqa: E501
        """Get task data [vendor]  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_task_data_vendor_v2(contract_id, task_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str contract_id: Unique identifier of the contract (required)
        :param str task_id: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_task_data_vendor_v2_with_http_info(contract_id, task_id, **kwargs)  # noqa: E501

    def get_task_data_vendor_v2_with_http_info(self, contract_id, task_id, **kwargs):  # noqa: E501
        """Get task data [vendor]  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_task_data_vendor_v2_with_http_info(contract_id, task_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str contract_id: Unique identifier of the contract (required)
        :param str task_id: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(object, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'contract_id',
            'task_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_task_data_vendor_v2" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'contract_id' is set
        if self.api_client.client_side_validation and ('contract_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['contract_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `contract_id` when calling `get_task_data_vendor_v2`")  # noqa: E501
        # verify the required parameter 'task_id' is set
        if self.api_client.client_side_validation and ('task_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['task_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `task_id` when calling `get_task_data_vendor_v2`")  # noqa: E501

        if self.api_client.client_side_validation and ('contract_id' in local_var_params and  # noqa: E501
                                                        len(local_var_params['contract_id']) < 1):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `contract_id` when calling `get_task_data_vendor_v2`, length must be greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'contract_id' in local_var_params:
            path_params['contractId'] = local_var_params['contract_id']  # noqa: E501
        if 'task_id' in local_var_params:
            path_params['taskId'] = local_var_params['task_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/2/v/contracts/{contractId}/tasks/{taskId}/data', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_task_manufacturer_v2(self, contract_id, task_id, **kwargs):  # noqa: E501
        """Get task [manufacturer]  # noqa: E501

        Get the task with the specified id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_task_manufacturer_v2(contract_id, task_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str contract_id: Unique identifier of the contract (required)
        :param str task_id: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: GenericTask
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_task_manufacturer_v2_with_http_info(contract_id, task_id, **kwargs)  # noqa: E501

    def get_task_manufacturer_v2_with_http_info(self, contract_id, task_id, **kwargs):  # noqa: E501
        """Get task [manufacturer]  # noqa: E501

        Get the task with the specified id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_task_manufacturer_v2_with_http_info(contract_id, task_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str contract_id: Unique identifier of the contract (required)
        :param str task_id: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(GenericTask, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'contract_id',
            'task_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_task_manufacturer_v2" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'contract_id' is set
        if self.api_client.client_side_validation and ('contract_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['contract_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `contract_id` when calling `get_task_manufacturer_v2`")  # noqa: E501
        # verify the required parameter 'task_id' is set
        if self.api_client.client_side_validation and ('task_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['task_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `task_id` when calling `get_task_manufacturer_v2`")  # noqa: E501

        if self.api_client.client_side_validation and ('contract_id' in local_var_params and  # noqa: E501
                                                        len(local_var_params['contract_id']) < 1):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `contract_id` when calling `get_task_manufacturer_v2`, length must be greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'contract_id' in local_var_params:
            path_params['contractId'] = local_var_params['contract_id']  # noqa: E501
        if 'task_id' in local_var_params:
            path_params['taskId'] = local_var_params['task_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/2/m/contracts/{contractId}/tasks/{taskId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GenericTask',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_task_vendor_v2(self, contract_id, task_id, **kwargs):  # noqa: E501
        """Get task  # noqa: E501

        Finds a task with the specified id for the given contract.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_task_vendor_v2(contract_id, task_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str contract_id: Unique identifier of the contract (required)
        :param str task_id: Id of the task (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: TaskWithContractResourceApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_task_vendor_v2_with_http_info(contract_id, task_id, **kwargs)  # noqa: E501

    def get_task_vendor_v2_with_http_info(self, contract_id, task_id, **kwargs):  # noqa: E501
        """Get task  # noqa: E501

        Finds a task with the specified id for the given contract.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_task_vendor_v2_with_http_info(contract_id, task_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str contract_id: Unique identifier of the contract (required)
        :param str task_id: Id of the task (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(TaskWithContractResourceApiResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'contract_id',
            'task_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_task_vendor_v2" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'contract_id' is set
        if self.api_client.client_side_validation and ('contract_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['contract_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `contract_id` when calling `get_task_vendor_v2`")  # noqa: E501
        # verify the required parameter 'task_id' is set
        if self.api_client.client_side_validation and ('task_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['task_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `task_id` when calling `get_task_vendor_v2`")  # noqa: E501

        if self.api_client.client_side_validation and ('contract_id' in local_var_params and  # noqa: E501
                                                        len(local_var_params['contract_id']) < 1):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `contract_id` when calling `get_task_vendor_v2`, length must be greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'contract_id' in local_var_params:
            path_params['contractId'] = local_var_params['contract_id']  # noqa: E501
        if 'task_id' in local_var_params:
            path_params['taskId'] = local_var_params['task_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/2/v/contracts/{contractId}/tasks/{taskId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskWithContractResourceApiResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_tasks_manufacturer_v2(self, contract_id, task_type_filter, task_state, limit, include_failures, **kwargs):  # noqa: E501
        """Find tasks for contract [manufactuerer]  # noqa: E501

        Returns a list of task objects for the given contract  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tasks_manufacturer_v2(contract_id, task_type_filter, task_state, limit, include_failures, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str contract_id: Unique identifier of the contract (required)
        :param list[str] task_type_filter: A list of task types to filter for (required)
        :param list[str] task_state: A list of task states to filter for (required)
        :param int limit: The maximum number of tasks returned (required)
        :param bool include_failures: Include failed tasks (required)
        :param str task_ids_filter: Comma separated list of task IDs to filter for
        :param datetime min_creation_date: Ignore all tasks created earlier than this date (ISO 8601)
        :param datetime max_creation_date: Ignore all tasks created later than this date (ISO 8601)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[GenericTask]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_tasks_manufacturer_v2_with_http_info(contract_id, task_type_filter, task_state, limit, include_failures, **kwargs)  # noqa: E501

    def get_tasks_manufacturer_v2_with_http_info(self, contract_id, task_type_filter, task_state, limit, include_failures, **kwargs):  # noqa: E501
        """Find tasks for contract [manufactuerer]  # noqa: E501

        Returns a list of task objects for the given contract  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tasks_manufacturer_v2_with_http_info(contract_id, task_type_filter, task_state, limit, include_failures, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str contract_id: Unique identifier of the contract (required)
        :param list[str] task_type_filter: A list of task types to filter for (required)
        :param list[str] task_state: A list of task states to filter for (required)
        :param int limit: The maximum number of tasks returned (required)
        :param bool include_failures: Include failed tasks (required)
        :param str task_ids_filter: Comma separated list of task IDs to filter for
        :param datetime min_creation_date: Ignore all tasks created earlier than this date (ISO 8601)
        :param datetime max_creation_date: Ignore all tasks created later than this date (ISO 8601)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[GenericTask], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'contract_id',
            'task_type_filter',
            'task_state',
            'limit',
            'include_failures',
            'task_ids_filter',
            'min_creation_date',
            'max_creation_date'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_tasks_manufacturer_v2" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'contract_id' is set
        if self.api_client.client_side_validation and ('contract_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['contract_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `contract_id` when calling `get_tasks_manufacturer_v2`")  # noqa: E501
        # verify the required parameter 'task_type_filter' is set
        if self.api_client.client_side_validation and ('task_type_filter' not in local_var_params or  # noqa: E501
                                                        local_var_params['task_type_filter'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `task_type_filter` when calling `get_tasks_manufacturer_v2`")  # noqa: E501
        # verify the required parameter 'task_state' is set
        if self.api_client.client_side_validation and ('task_state' not in local_var_params or  # noqa: E501
                                                        local_var_params['task_state'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `task_state` when calling `get_tasks_manufacturer_v2`")  # noqa: E501
        # verify the required parameter 'limit' is set
        if self.api_client.client_side_validation and ('limit' not in local_var_params or  # noqa: E501
                                                        local_var_params['limit'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `limit` when calling `get_tasks_manufacturer_v2`")  # noqa: E501
        # verify the required parameter 'include_failures' is set
        if self.api_client.client_side_validation and ('include_failures' not in local_var_params or  # noqa: E501
                                                        local_var_params['include_failures'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `include_failures` when calling `get_tasks_manufacturer_v2`")  # noqa: E501

        if self.api_client.client_side_validation and ('contract_id' in local_var_params and  # noqa: E501
                                                        len(local_var_params['contract_id']) < 1):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `contract_id` when calling `get_tasks_manufacturer_v2`, length must be greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'contract_id' in local_var_params:
            path_params['contractId'] = local_var_params['contract_id']  # noqa: E501

        query_params = []
        if 'task_ids_filter' in local_var_params and local_var_params['task_ids_filter'] is not None:  # noqa: E501
            query_params.append(('taskIdsFilter', local_var_params['task_ids_filter']))  # noqa: E501
        if 'task_type_filter' in local_var_params and local_var_params['task_type_filter'] is not None:  # noqa: E501
            query_params.append(('taskTypeFilter', local_var_params['task_type_filter']))  # noqa: E501
            collection_formats['taskTypeFilter'] = 'multi'  # noqa: E501
        if 'task_state' in local_var_params and local_var_params['task_state'] is not None:  # noqa: E501
            query_params.append(('taskState', local_var_params['task_state']))  # noqa: E501
            collection_formats['taskState'] = 'multi'  # noqa: E501
        if 'min_creation_date' in local_var_params and local_var_params['min_creation_date'] is not None:  # noqa: E501
            query_params.append(('minCreationDate', local_var_params['min_creation_date']))  # noqa: E501
        if 'max_creation_date' in local_var_params and local_var_params['max_creation_date'] is not None:  # noqa: E501
            query_params.append(('maxCreationDate', local_var_params['max_creation_date']))  # noqa: E501
        if 'limit' in local_var_params and local_var_params['limit'] is not None:  # noqa: E501
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'include_failures' in local_var_params and local_var_params['include_failures'] is not None:  # noqa: E501
            query_params.append(('includeFailures', local_var_params['include_failures']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/2/m/contracts/{contractId}/tasks', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[GenericTask]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_tasks_vendor_v2(self, contract_id, **kwargs):  # noqa: E501
        """Find tasks for contract [vendor]  # noqa: E501

        The search can be narrowed down by providing the IDs of the tasks, separated by comma  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tasks_vendor_v2(contract_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str contract_id: Unique identifier of the contract (required)
        :param str task_ids_filter: Ids of the tasks
        :param str task_type_filter: Desired task type
        :param int limit: Maximal number of results
        :param bool include_failures: Flag whether to include failures in the response
        :param str task_state: Comma separated task state filter
        :param datetime min_creation_date: Oldest returned creation date in UTC
        :param datetime max_creation_date: Newest returned creation date in UTC
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[TaskWithContractResourceApiResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_tasks_vendor_v2_with_http_info(contract_id, **kwargs)  # noqa: E501

    def get_tasks_vendor_v2_with_http_info(self, contract_id, **kwargs):  # noqa: E501
        """Find tasks for contract [vendor]  # noqa: E501

        The search can be narrowed down by providing the IDs of the tasks, separated by comma  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tasks_vendor_v2_with_http_info(contract_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str contract_id: Unique identifier of the contract (required)
        :param str task_ids_filter: Ids of the tasks
        :param str task_type_filter: Desired task type
        :param int limit: Maximal number of results
        :param bool include_failures: Flag whether to include failures in the response
        :param str task_state: Comma separated task state filter
        :param datetime min_creation_date: Oldest returned creation date in UTC
        :param datetime max_creation_date: Newest returned creation date in UTC
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[TaskWithContractResourceApiResponse], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'contract_id',
            'task_ids_filter',
            'task_type_filter',
            'limit',
            'include_failures',
            'task_state',
            'min_creation_date',
            'max_creation_date'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_tasks_vendor_v2" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'contract_id' is set
        if self.api_client.client_side_validation and ('contract_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['contract_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `contract_id` when calling `get_tasks_vendor_v2`")  # noqa: E501

        if self.api_client.client_side_validation and ('contract_id' in local_var_params and  # noqa: E501
                                                        len(local_var_params['contract_id']) < 1):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `contract_id` when calling `get_tasks_vendor_v2`, length must be greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'contract_id' in local_var_params:
            path_params['contractId'] = local_var_params['contract_id']  # noqa: E501

        query_params = []
        if 'task_ids_filter' in local_var_params and local_var_params['task_ids_filter'] is not None:  # noqa: E501
            query_params.append(('taskIdsFilter', local_var_params['task_ids_filter']))  # noqa: E501
        if 'task_type_filter' in local_var_params and local_var_params['task_type_filter'] is not None:  # noqa: E501
            query_params.append(('taskTypeFilter', local_var_params['task_type_filter']))  # noqa: E501
        if 'limit' in local_var_params and local_var_params['limit'] is not None:  # noqa: E501
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'include_failures' in local_var_params and local_var_params['include_failures'] is not None:  # noqa: E501
            query_params.append(('includeFailures', local_var_params['include_failures']))  # noqa: E501
        if 'task_state' in local_var_params and local_var_params['task_state'] is not None:  # noqa: E501
            query_params.append(('taskState', local_var_params['task_state']))  # noqa: E501
        if 'min_creation_date' in local_var_params and local_var_params['min_creation_date'] is not None:  # noqa: E501
            query_params.append(('minCreationDate', local_var_params['min_creation_date']))  # noqa: E501
        if 'max_creation_date' in local_var_params and local_var_params['max_creation_date'] is not None:  # noqa: E501
            query_params.append(('maxCreationDate', local_var_params['max_creation_date']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/2/v/contracts/{contractId}/tasks', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[TaskWithContractResourceApiResponse]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_task_vendor_v2(self, contract_id, task_id, update_task_request_v2, **kwargs):  # noqa: E501
        """Update a task  # noqa: E501

        Replaces the stored task document with the payload provided in the request body.  The payload must contain the full task representation — including `contractId` and `taskId` — and these identifiers must match the values supplied in the path parameters. Only existing tasks can be updated; the operation fails if the task cannot be found.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_task_vendor_v2(contract_id, task_id, update_task_request_v2, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str contract_id: Unique identifier of the contract (required)
        :param str task_id: (required)
        :param UpdateTaskRequestV2 update_task_request_v2: Complete task document that should replace the existing stored task. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: UpdateTaskRequestV2
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.update_task_vendor_v2_with_http_info(contract_id, task_id, update_task_request_v2, **kwargs)  # noqa: E501

    def update_task_vendor_v2_with_http_info(self, contract_id, task_id, update_task_request_v2, **kwargs):  # noqa: E501
        """Update a task  # noqa: E501

        Replaces the stored task document with the payload provided in the request body.  The payload must contain the full task representation — including `contractId` and `taskId` — and these identifiers must match the values supplied in the path parameters. Only existing tasks can be updated; the operation fails if the task cannot be found.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_task_vendor_v2_with_http_info(contract_id, task_id, update_task_request_v2, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str contract_id: Unique identifier of the contract (required)
        :param str task_id: (required)
        :param UpdateTaskRequestV2 update_task_request_v2: Complete task document that should replace the existing stored task. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(UpdateTaskRequestV2, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'contract_id',
            'task_id',
            'update_task_request_v2'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_task_vendor_v2" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'contract_id' is set
        if self.api_client.client_side_validation and ('contract_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['contract_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `contract_id` when calling `update_task_vendor_v2`")  # noqa: E501
        # verify the required parameter 'task_id' is set
        if self.api_client.client_side_validation and ('task_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['task_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `task_id` when calling `update_task_vendor_v2`")  # noqa: E501
        # verify the required parameter 'update_task_request_v2' is set
        if self.api_client.client_side_validation and ('update_task_request_v2' not in local_var_params or  # noqa: E501
                                                        local_var_params['update_task_request_v2'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `update_task_request_v2` when calling `update_task_vendor_v2`")  # noqa: E501

        if self.api_client.client_side_validation and ('contract_id' in local_var_params and  # noqa: E501
                                                        len(local_var_params['contract_id']) < 1):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `contract_id` when calling `update_task_vendor_v2`, length must be greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'contract_id' in local_var_params:
            path_params['contractId'] = local_var_params['contract_id']  # noqa: E501
        if 'task_id' in local_var_params:
            path_params['taskId'] = local_var_params['task_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'update_task_request_v2' in local_var_params:
            body_params = local_var_params['update_task_request_v2']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain', ])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/2/v/contracts/{contractId}/tasks/{taskId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UpdateTaskRequestV2',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
